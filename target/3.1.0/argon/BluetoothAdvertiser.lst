
/Users/trylaarsdam/Documents/dev/BluetoothAdvertiser/target/3.1.0/argon/BluetoothAdvertiser.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002da4  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000b6dc0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  2003e590  000b6dc4  0001e590  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000001f8  2003e5f8  2003e5f8  0002e5f8  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000b6e2c  000b6e2c  00026e2c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000b6e54  000b6e54  00026e54  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000d6f0c  00000000  00000000  00026e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 0000d234  00000000  00000000  000fdd64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_loc    0002f06b  00000000  00000000  0010af98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000025a0  00000000  00000000  0013a003  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00008ea0  00000000  00000000  0013c5a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003025f  00000000  00000000  00145443  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0002d097  00000000  00000000  001756a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00120ec7  00000000  00000000  001a2739  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_frame  000069d8  00000000  00000000  002c3600  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f002 fb29 	bl	b6684 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f002 fb4b 	bl	b66d4 <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003e590 	.word	0x2003e590
   b4048:	000b6dc4 	.word	0x000b6dc4
   b404c:	2003e5f8 	.word	0x2003e5f8
   b4050:	2003e5f8 	.word	0x2003e5f8
   b4054:	2003e7f0 	.word	0x2003e7f0

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f002 f9a5 	bl	b63ac <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42a5      	cmp	r5, r4
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b6d94 	.word	0x000b6d94
   b407c:	000b6db8 	.word	0x000b6db8

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 b8b8 	b.w	b41f4 <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 f8b7 	bl	b41f8 <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f002 b945 	b.w	b631c <_post_loop>

000b4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4092:	f000 bc21 	b.w	b48d8 <malloc>

000b4096 <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   b4096:	f000 bc27 	b.w	b48e8 <free>

000b409a <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b409a:	7800      	ldrb	r0, [r0, #0]
   b409c:	fab0 f080 	clz	r0, r0
   b40a0:	0940      	lsrs	r0, r0, #5
   b40a2:	4770      	bx	lr

000b40a4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40a4:	2301      	movs	r3, #1
   b40a6:	7003      	strb	r3, [r0, #0]
   b40a8:	4770      	bx	lr

000b40aa <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   b40aa:	b510      	push	{r4, lr}
   b40ac:	4604      	mov	r4, r0
        if (wakeupSource_) {
   b40ae:	6800      	ldr	r0, [r0, #0]
   b40b0:	b108      	cbz	r0, b40b6 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   b40b2:	f000 fc19 	bl	b48e8 <free>
class SystemClass {
   b40b6:	4620      	mov	r0, r4
   b40b8:	bd10      	pop	{r4, pc}

000b40ba <_ZN8particle17BleCharacteristic8setValueIiEENSt9enable_ifIXsrSt18is_standard_layoutIT_E5valueEiE4typeERKS4_NS_11BleTxRxTypeE.isra.0>:
    ssize_t setValue(const String& str, BleTxRxType type = BleTxRxType::AUTO);
    ssize_t setValue(const char* str, BleTxRxType type = BleTxRxType::AUTO);

    template<typename T>
    typename std::enable_if_t<std::is_standard_layout<T>::value, ssize_t>
    setValue(const T& val, BleTxRxType type = BleTxRxType::AUTO) {
   b40ba:	4613      	mov	r3, r2
        return setValue(reinterpret_cast<const uint8_t*>(&val), sizeof(T), type);
   b40bc:	2204      	movs	r2, #4
   b40be:	f000 bf1b 	b.w	b4ef8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>
	...

000b40c4 <_Z12configureBLEv>:
BleCharacteristic tabletDiskSpaceCharacteristicUuid("tabletDiskSpace", BleCharacteristicProperty::NOTIFY, BleUuid("c256151d-6b19-438c-a001-5e4d12bc5949"), serviceUuid);
BleCharacteristic tabletConnectionCharacteristicUuid("tabletConnection", BleCharacteristicProperty::NOTIFY, BleUuid("C255151D-6B19-438C-A001-5E4D12BC5947"), serviceUuid);
BleCharacteristic seizureAlertCharacteristicUuid("seizureAlert", BleCharacteristicProperty::NOTIFY, BleUuid("8329a311-aedd-4ffe-b0ab-def64a994b53"), serviceUuid);

void configureBLE()
{
   b40c4:	b510      	push	{r4, lr}
   b40c6:	b096      	sub	sp, #88	; 0x58
  BLE.setDeviceName("Tablet");
   b40c8:	f001 f820 	bl	b510c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b40cc:	493f      	ldr	r1, [pc, #252]	; (b41cc <_Z12configureBLEv+0x108>)
   b40ce:	f001 f86b 	bl	b51a8 <_ZNK8particle14BleLocalDevice13setDeviceNameEPKc>
  BLE.addCharacteristic(tabletBatteryLevelCharacteristicUuid);
   b40d2:	f001 f81b 	bl	b510c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b40d6:	4a3e      	ldr	r2, [pc, #248]	; (b41d0 <_Z12configureBLEv+0x10c>)
   b40d8:	4601      	mov	r1, r0
   b40da:	a80d      	add	r0, sp, #52	; 0x34
   b40dc:	f001 fc38 	bl	b5950 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b40e0:	a80d      	add	r0, sp, #52	; 0x34
   b40e2:	f001 f8e4 	bl	b52ae <_ZN8particle17BleCharacteristicD1Ev>
  BLE.addCharacteristic(insBatteryLevelCharacteristicUuid);
   b40e6:	f001 f811 	bl	b510c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b40ea:	4a3a      	ldr	r2, [pc, #232]	; (b41d4 <_Z12configureBLEv+0x110>)
   b40ec:	4601      	mov	r1, r0
   b40ee:	a80d      	add	r0, sp, #52	; 0x34
   b40f0:	f001 fc2e 	bl	b5950 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b40f4:	a80d      	add	r0, sp, #52	; 0x34
   b40f6:	f001 f8da 	bl	b52ae <_ZN8particle17BleCharacteristicD1Ev>
  BLE.addCharacteristic(insConnectionCharacteristicUuid);
   b40fa:	f001 f807 	bl	b510c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b40fe:	4a36      	ldr	r2, [pc, #216]	; (b41d8 <_Z12configureBLEv+0x114>)
   b4100:	4601      	mov	r1, r0
   b4102:	a80d      	add	r0, sp, #52	; 0x34
   b4104:	f001 fc24 	bl	b5950 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4108:	a80d      	add	r0, sp, #52	; 0x34
   b410a:	f001 f8d0 	bl	b52ae <_ZN8particle17BleCharacteristicD1Ev>
  BLE.addCharacteristic(ctmBatteryLevelCharacteristicUuid);
   b410e:	f000 fffd 	bl	b510c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4112:	4a32      	ldr	r2, [pc, #200]	; (b41dc <_Z12configureBLEv+0x118>)
   b4114:	4601      	mov	r1, r0
   b4116:	a80d      	add	r0, sp, #52	; 0x34
   b4118:	f001 fc1a 	bl	b5950 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b411c:	a80d      	add	r0, sp, #52	; 0x34
   b411e:	f001 f8c6 	bl	b52ae <_ZN8particle17BleCharacteristicD1Ev>
  BLE.addCharacteristic(ctmConnectionCharacteristicUuid);
   b4122:	f000 fff3 	bl	b510c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4126:	4a2e      	ldr	r2, [pc, #184]	; (b41e0 <_Z12configureBLEv+0x11c>)
   b4128:	4601      	mov	r1, r0
   b412a:	a80d      	add	r0, sp, #52	; 0x34
   b412c:	f001 fc10 	bl	b5950 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4130:	a80d      	add	r0, sp, #52	; 0x34
   b4132:	f001 f8bc 	bl	b52ae <_ZN8particle17BleCharacteristicD1Ev>
  BLE.addCharacteristic(tabletConnectionCharacteristicUuid);
   b4136:	f000 ffe9 	bl	b510c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b413a:	4a2a      	ldr	r2, [pc, #168]	; (b41e4 <_Z12configureBLEv+0x120>)
   b413c:	4601      	mov	r1, r0
   b413e:	a80d      	add	r0, sp, #52	; 0x34
   b4140:	f001 fc06 	bl	b5950 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4144:	a80d      	add	r0, sp, #52	; 0x34
   b4146:	f001 f8b2 	bl	b52ae <_ZN8particle17BleCharacteristicD1Ev>
  BLE.addCharacteristic(tabletDiskSpaceCharacteristicUuid);
   b414a:	f000 ffdf 	bl	b510c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b414e:	4a26      	ldr	r2, [pc, #152]	; (b41e8 <_Z12configureBLEv+0x124>)
   b4150:	4601      	mov	r1, r0
   b4152:	a80d      	add	r0, sp, #52	; 0x34
   b4154:	f001 fbfc 	bl	b5950 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b4158:	a80d      	add	r0, sp, #52	; 0x34
   b415a:	f001 f8a8 	bl	b52ae <_ZN8particle17BleCharacteristicD1Ev>
  BLE.addCharacteristic(seizureAlertCharacteristicUuid);
   b415e:	f000 ffd5 	bl	b510c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b4162:	4a22      	ldr	r2, [pc, #136]	; (b41ec <_Z12configureBLEv+0x128>)
   b4164:	4601      	mov	r1, r0
   b4166:	a80d      	add	r0, sp, #52	; 0x34
   b4168:	f001 fbf2 	bl	b5950 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   b416c:	a80d      	add	r0, sp, #52	; 0x34
   b416e:	f001 f89e 	bl	b52ae <_ZN8particle17BleCharacteristicD1Ev>

  BleAdvertisingData advData;
   b4172:	a80d      	add	r0, sp, #52	; 0x34
   b4174:	f000 fe5b 	bl	b4e2e <_ZN8particle18BleAdvertisingDataC1Ev>

  // Advertise our private service only
  advData.appendServiceUUID(serviceUuid);
   b4178:	491d      	ldr	r1, [pc, #116]	; (b41f0 <_Z12configureBLEv+0x12c>)
   b417a:	a803      	add	r0, sp, #12
   b417c:	f000 fd5c 	bl	b4c38 <_ZN8particle7BleUuidC1ERKS0_>
        BleUuid tempUUID(uuid);
   b4180:	a903      	add	r1, sp, #12
   b4182:	a808      	add	r0, sp, #32
   b4184:	f000 fd58 	bl	b4c38 <_ZN8particle7BleUuidC1ERKS0_>
        if (tempUUID.type() == BleUuidType::SHORT) {
   b4188:	a808      	add	r0, sp, #32
   b418a:	f000 fd9b 	bl	b4cc4 <_ZNK8particle7BleUuid4typeEv>
   b418e:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   b4190:	a808      	add	r0, sp, #32
        if (tempUUID.type() == BleUuidType::SHORT) {
   b4192:	b99c      	cbnz	r4, b41bc <_Z12configureBLEv+0xf8>
            uint16_t uuid16 = tempUUID.shorted();
   b4194:	f000 fdb2 	bl	b4cfc <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b4198:	9400      	str	r4, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   b419a:	f8ad 000a 	strh.w	r0, [sp, #10]
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   b419e:	2302      	movs	r3, #2
   b41a0:	f10d 020a 	add.w	r2, sp, #10
   b41a4:	2103      	movs	r1, #3
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   b41a6:	a80d      	add	r0, sp, #52	; 0x34
   b41a8:	f000 fe36 	bl	b4e18 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
  
  // Continuously advertise when not connected
  BLE.advertise(&advData);
   b41ac:	f000 ffae 	bl	b510c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b41b0:	2200      	movs	r2, #0
   b41b2:	a90d      	add	r1, sp, #52	; 0x34
   b41b4:	f001 f81e 	bl	b51f4 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
}
   b41b8:	b016      	add	sp, #88	; 0x58
   b41ba:	bd10      	pop	{r4, pc}
   b41bc:	f000 fda0 	bl	b4d00 <_ZNK8particle7BleUuid8rawBytesEv>
   b41c0:	2300      	movs	r3, #0
   b41c2:	9300      	str	r3, [sp, #0]
   b41c4:	4602      	mov	r2, r0
   b41c6:	2310      	movs	r3, #16
   b41c8:	2107      	movs	r1, #7
   b41ca:	e7ec      	b.n	b41a6 <_Z12configureBLEv+0xe2>
   b41cc:	000b6790 	.word	0x000b6790
   b41d0:	2003e644 	.word	0x2003e644
   b41d4:	2003e62c 	.word	0x2003e62c
   b41d8:	2003e634 	.word	0x2003e634
   b41dc:	2003e61c 	.word	0x2003e61c
   b41e0:	2003e624 	.word	0x2003e624
   b41e4:	2003e64c 	.word	0x2003e64c
   b41e8:	2003e654 	.word	0x2003e654
   b41ec:	2003e63c 	.word	0x2003e63c
   b41f0:	2003e608 	.word	0x2003e608

000b41f4 <setup>:

// setup() runs once, when the device is first turned on.
void setup() {
  // Put initialization like pinMode and begin functions here.
}
   b41f4:	4770      	bx	lr
	...

000b41f8 <loop>:

// loop() runs over and over again, as quickly as it can execute.
void loop() {
   b41f8:	b507      	push	{r0, r1, r2, lr}
  // The core of your code will likely live here.
  configureBLE();
   b41fa:	f7ff ff63 	bl	b40c4 <_Z12configureBLEv>
  insBatteryLevelCharacteristicUuid.setValue(0x01);
   b41fe:	2301      	movs	r3, #1
   b4200:	a901      	add	r1, sp, #4
   b4202:	481b      	ldr	r0, [pc, #108]	; (b4270 <loop+0x78>)
   b4204:	9301      	str	r3, [sp, #4]
   b4206:	2200      	movs	r2, #0
   b4208:	f7ff ff57 	bl	b40ba <_ZN8particle17BleCharacteristic8setValueIiEENSt9enable_ifIXsrSt18is_standard_layoutIT_E5valueEiE4typeERKS4_NS_11BleTxRxTypeE.isra.0>
  insConnectionCharacteristicUuid.setValue(0x02);
   b420c:	2302      	movs	r3, #2
   b420e:	a901      	add	r1, sp, #4
   b4210:	4818      	ldr	r0, [pc, #96]	; (b4274 <loop+0x7c>)
   b4212:	9301      	str	r3, [sp, #4]
   b4214:	2200      	movs	r2, #0
   b4216:	f7ff ff50 	bl	b40ba <_ZN8particle17BleCharacteristic8setValueIiEENSt9enable_ifIXsrSt18is_standard_layoutIT_E5valueEiE4typeERKS4_NS_11BleTxRxTypeE.isra.0>
  ctmBatteryLevelCharacteristicUuid.setValue(0x03);
   b421a:	2303      	movs	r3, #3
   b421c:	a901      	add	r1, sp, #4
   b421e:	4816      	ldr	r0, [pc, #88]	; (b4278 <loop+0x80>)
   b4220:	9301      	str	r3, [sp, #4]
   b4222:	2200      	movs	r2, #0
   b4224:	f7ff ff49 	bl	b40ba <_ZN8particle17BleCharacteristic8setValueIiEENSt9enable_ifIXsrSt18is_standard_layoutIT_E5valueEiE4typeERKS4_NS_11BleTxRxTypeE.isra.0>
  ctmConnectionCharacteristicUuid.setValue(0x04);
   b4228:	2304      	movs	r3, #4
   b422a:	eb0d 0103 	add.w	r1, sp, r3
   b422e:	4813      	ldr	r0, [pc, #76]	; (b427c <loop+0x84>)
   b4230:	9301      	str	r3, [sp, #4]
   b4232:	2200      	movs	r2, #0
   b4234:	f7ff ff41 	bl	b40ba <_ZN8particle17BleCharacteristic8setValueIiEENSt9enable_ifIXsrSt18is_standard_layoutIT_E5valueEiE4typeERKS4_NS_11BleTxRxTypeE.isra.0>
  tabletBatteryLevelCharacteristicUuid.setValue(0x05);
   b4238:	2305      	movs	r3, #5
   b423a:	a901      	add	r1, sp, #4
   b423c:	4810      	ldr	r0, [pc, #64]	; (b4280 <loop+0x88>)
   b423e:	9301      	str	r3, [sp, #4]
   b4240:	2200      	movs	r2, #0
   b4242:	f7ff ff3a 	bl	b40ba <_ZN8particle17BleCharacteristic8setValueIiEENSt9enable_ifIXsrSt18is_standard_layoutIT_E5valueEiE4typeERKS4_NS_11BleTxRxTypeE.isra.0>
  tabletDiskSpaceCharacteristicUuid.setValue(0x06);
   b4246:	2306      	movs	r3, #6
   b4248:	a901      	add	r1, sp, #4
   b424a:	480e      	ldr	r0, [pc, #56]	; (b4284 <loop+0x8c>)
   b424c:	9301      	str	r3, [sp, #4]
   b424e:	2200      	movs	r2, #0
   b4250:	f7ff ff33 	bl	b40ba <_ZN8particle17BleCharacteristic8setValueIiEENSt9enable_ifIXsrSt18is_standard_layoutIT_E5valueEiE4typeERKS4_NS_11BleTxRxTypeE.isra.0>
  tabletConnectionCharacteristicUuid.setValue(0x07);
   b4254:	2307      	movs	r3, #7
   b4256:	480c      	ldr	r0, [pc, #48]	; (b4288 <loop+0x90>)
   b4258:	9301      	str	r3, [sp, #4]
   b425a:	2200      	movs	r2, #0
   b425c:	a901      	add	r1, sp, #4
   b425e:	f7ff ff2c 	bl	b40ba <_ZN8particle17BleCharacteristic8setValueIiEENSt9enable_ifIXsrSt18is_standard_layoutIT_E5valueEiE4typeERKS4_NS_11BleTxRxTypeE.isra.0>
  delay(5000);
   b4262:	f241 3088 	movw	r0, #5000	; 0x1388
   b4266:	b003      	add	sp, #12
   b4268:	f85d eb04 	ldr.w	lr, [sp], #4
  delay(5000);
   b426c:	f000 bb64 	b.w	b4938 <delay>
   b4270:	2003e62c 	.word	0x2003e62c
   b4274:	2003e634 	.word	0x2003e634
   b4278:	2003e61c 	.word	0x2003e61c
   b427c:	2003e624 	.word	0x2003e624
   b4280:	2003e644 	.word	0x2003e644
   b4284:	2003e654 	.word	0x2003e654
   b4288:	2003e64c 	.word	0x2003e64c

000b428c <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>:
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   b428c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b428e:	4616      	mov	r6, r2
   b4290:	b091      	sub	sp, #68	; 0x44
#if __cplusplus > 201402L
      using weak_type = __weak_ptr<_Tp, _Lp>;
#endif

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   b4292:	2200      	movs	r2, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   b4294:	e9c0 2200 	strd	r2, r2, [r0]
   b4298:	4604      	mov	r4, r0
   b429a:	460d      	mov	r5, r1
        BleUuid sUuid(svcUuid);
   b429c:	af0b      	add	r7, sp, #44	; 0x2c
        BleUuid cUuid(charUuid);
   b429e:	4619      	mov	r1, r3
   b42a0:	a806      	add	r0, sp, #24
   b42a2:	f000 fcc9 	bl	b4c38 <_ZN8particle7BleUuidC1ERKS0_>
        BleUuid sUuid(svcUuid);
   b42a6:	9916      	ldr	r1, [sp, #88]	; 0x58
   b42a8:	4638      	mov	r0, r7
   b42aa:	f000 fcc5 	bl	b4c38 <_ZN8particle7BleUuidC1ERKS0_>
    value_ = static_cast<ValueType>(value);
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const EnumFlags<T>& flags) {
    value_ = flags.value_;
   b42ae:	7833      	ldrb	r3, [r6, #0]
   b42b0:	f88d 3014 	strb.w	r3, [sp, #20]
        construct(desc, properties, cUuid, sUuid, callback, context);
   b42b4:	9b18      	ldr	r3, [sp, #96]	; 0x60
   b42b6:	9302      	str	r3, [sp, #8]
   b42b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   b42ba:	4620      	mov	r0, r4
   b42bc:	e9cd 7300 	strd	r7, r3, [sp]
   b42c0:	aa05      	add	r2, sp, #20
   b42c2:	ab06      	add	r3, sp, #24
   b42c4:	4629      	mov	r1, r5
   b42c6:	f001 fa19 	bl	b56fc <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
    }
   b42ca:	4620      	mov	r0, r4
   b42cc:	b011      	add	sp, #68	; 0x44
   b42ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b42d0 <_Z41__static_initialization_and_destruction_0ii.constprop.0>:
   b42d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
              error_(SYSTEM_ERROR_NONE) {
   b42d4:	4d75      	ldr	r5, [pc, #468]	; (b44ac <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1dc>)
SYSTEM_MODE(MANUAL);
   b42d6:	4e76      	ldr	r6, [pc, #472]	; (b44b0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1e0>)
    SleepResult() {}
   b42d8:	4b76      	ldr	r3, [pc, #472]	; (b44b4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1e4>)
const BleUuid serviceUuid("b025071e-09df-418a-beff-f64aea621700");
   b42da:	4f77      	ldr	r7, [pc, #476]	; (b44b8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1e8>)
   b42dc:	60ab      	str	r3, [r5, #8]
              error_(SYSTEM_ERROR_NONE) {
   b42de:	2400      	movs	r4, #0
   b42e0:	b090      	sub	sp, #64	; 0x40
   b42e2:	e9c5 4400 	strd	r4, r4, [r5]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b42e6:	2003      	movs	r0, #3
   b42e8:	f000 fa6a 	bl	b47c0 <set_system_mode>
SYSTEM_MODE(MANUAL);
   b42ec:	4632      	mov	r2, r6
   b42ee:	4973      	ldr	r1, [pc, #460]	; (b44bc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1ec>)
BleCharacteristic insBatteryLevelCharacteristicUuid("insBatteryLevel", BleCharacteristicProperty::NOTIFY, BleUuid("b026072e-09df-418a-beff-f64aea621766"), serviceUuid);
   b42f0:	f8df a214 	ldr.w	sl, [pc, #532]	; b4508 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x238>
   b42f4:	f8df 8214 	ldr.w	r8, [pc, #532]	; b450c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x23c>
SYSTEM_MODE(MANUAL);
   b42f8:	4628      	mov	r0, r5
   b42fa:	f002 f889 	bl	b6410 <__aeabi_atexit>
const BleUuid serviceUuid("b025071e-09df-418a-beff-f64aea621700");
   b42fe:	4970      	ldr	r1, [pc, #448]	; (b44c0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1f0>)
   b4300:	4638      	mov	r0, r7
BleCharacteristic insBatteryLevelCharacteristicUuid("insBatteryLevel", BleCharacteristicProperty::NOTIFY, BleUuid("b026072e-09df-418a-beff-f64aea621766"), serviceUuid);
   b4302:	ad06      	add	r5, sp, #24
    value_ = static_cast<ValueType>(value);
   b4304:	f04f 0910 	mov.w	r9, #16
const BleUuid serviceUuid("b025071e-09df-418a-beff-f64aea621700");
   b4308:	f000 fd7a 	bl	b4e00 <_ZN8particle7BleUuidC1EPKc>
BleCharacteristic insBatteryLevelCharacteristicUuid("insBatteryLevel", BleCharacteristicProperty::NOTIFY, BleUuid("b026072e-09df-418a-beff-f64aea621766"), serviceUuid);
   b430c:	496d      	ldr	r1, [pc, #436]	; (b44c4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1f4>)
   b430e:	f88d 9014 	strb.w	r9, [sp, #20]
   b4312:	a80b      	add	r0, sp, #44	; 0x2c
   b4314:	f000 fd74 	bl	b4e00 <_ZN8particle7BleUuidC1EPKc>
   b4318:	4639      	mov	r1, r7
   b431a:	4628      	mov	r0, r5
   b431c:	f000 fc8c 	bl	b4c38 <_ZN8particle7BleUuidC1ERKS0_>
   b4320:	ab0b      	add	r3, sp, #44	; 0x2c
   b4322:	aa05      	add	r2, sp, #20
   b4324:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b4328:	4967      	ldr	r1, [pc, #412]	; (b44c8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1f8>)
   b432a:	9500      	str	r5, [sp, #0]
   b432c:	4650      	mov	r0, sl
   b432e:	f7ff ffad 	bl	b428c <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   b4332:	4632      	mov	r2, r6
   b4334:	4641      	mov	r1, r8
   b4336:	4650      	mov	r0, sl
   b4338:	f002 f86a 	bl	b6410 <__aeabi_atexit>
BleCharacteristic insConnectionCharacteristicUuid("insConnection", BleCharacteristicProperty::NOTIFY, BleUuid("B027073E-09DF-418A-BEFF-F64AEA621767"), serviceUuid);
   b433c:	f8df a1d0 	ldr.w	sl, [pc, #464]	; b4510 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x240>
   b4340:	4962      	ldr	r1, [pc, #392]	; (b44cc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x1fc>)
   b4342:	f88d 9014 	strb.w	r9, [sp, #20]
   b4346:	a80b      	add	r0, sp, #44	; 0x2c
   b4348:	f000 fd5a 	bl	b4e00 <_ZN8particle7BleUuidC1EPKc>
   b434c:	4639      	mov	r1, r7
   b434e:	4628      	mov	r0, r5
   b4350:	f000 fc72 	bl	b4c38 <_ZN8particle7BleUuidC1ERKS0_>
   b4354:	ab0b      	add	r3, sp, #44	; 0x2c
   b4356:	aa05      	add	r2, sp, #20
   b4358:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b435c:	495c      	ldr	r1, [pc, #368]	; (b44d0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x200>)
   b435e:	9500      	str	r5, [sp, #0]
   b4360:	4650      	mov	r0, sl
   b4362:	f7ff ff93 	bl	b428c <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   b4366:	4632      	mov	r2, r6
   b4368:	4641      	mov	r1, r8
   b436a:	4650      	mov	r0, sl
   b436c:	f002 f850 	bl	b6410 <__aeabi_atexit>
BleCharacteristic ctmBatteryLevelCharacteristicUuid("ctmBatterLevel", BleCharacteristicProperty::NOTIFY, BleUuid("f89428dd-02b2-4479-90ba-f45cb6cd5b72"), serviceUuid);
   b4370:	f8df a1a0 	ldr.w	sl, [pc, #416]	; b4514 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x244>
   b4374:	4957      	ldr	r1, [pc, #348]	; (b44d4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x204>)
   b4376:	f88d 9014 	strb.w	r9, [sp, #20]
   b437a:	a80b      	add	r0, sp, #44	; 0x2c
   b437c:	f000 fd40 	bl	b4e00 <_ZN8particle7BleUuidC1EPKc>
   b4380:	4639      	mov	r1, r7
   b4382:	4628      	mov	r0, r5
   b4384:	f000 fc58 	bl	b4c38 <_ZN8particle7BleUuidC1ERKS0_>
   b4388:	ab0b      	add	r3, sp, #44	; 0x2c
   b438a:	aa05      	add	r2, sp, #20
   b438c:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b4390:	4951      	ldr	r1, [pc, #324]	; (b44d8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x208>)
   b4392:	9500      	str	r5, [sp, #0]
   b4394:	4650      	mov	r0, sl
   b4396:	f7ff ff79 	bl	b428c <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   b439a:	4632      	mov	r2, r6
   b439c:	4641      	mov	r1, r8
   b439e:	4650      	mov	r0, sl
   b43a0:	f002 f836 	bl	b6410 <__aeabi_atexit>
BleCharacteristic ctmConnectionCharacteristicUuid("ctmConnection", BleCharacteristicProperty::NOTIFY, BleUuid("F89528DD-02B2-4479-90BA-F45CB6CD5B73"), serviceUuid);
   b43a4:	f8df a170 	ldr.w	sl, [pc, #368]	; b4518 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x248>
   b43a8:	494c      	ldr	r1, [pc, #304]	; (b44dc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x20c>)
   b43aa:	f88d 9014 	strb.w	r9, [sp, #20]
   b43ae:	a80b      	add	r0, sp, #44	; 0x2c
   b43b0:	f000 fd26 	bl	b4e00 <_ZN8particle7BleUuidC1EPKc>
   b43b4:	4639      	mov	r1, r7
   b43b6:	4628      	mov	r0, r5
   b43b8:	f000 fc3e 	bl	b4c38 <_ZN8particle7BleUuidC1ERKS0_>
   b43bc:	ab0b      	add	r3, sp, #44	; 0x2c
   b43be:	aa05      	add	r2, sp, #20
   b43c0:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b43c4:	4946      	ldr	r1, [pc, #280]	; (b44e0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x210>)
   b43c6:	9500      	str	r5, [sp, #0]
   b43c8:	4650      	mov	r0, sl
   b43ca:	f7ff ff5f 	bl	b428c <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   b43ce:	4632      	mov	r2, r6
   b43d0:	4641      	mov	r1, r8
   b43d2:	4650      	mov	r0, sl
   b43d4:	f002 f81c 	bl	b6410 <__aeabi_atexit>
BleCharacteristic tabletBatteryLevelCharacteristicUuid("tabletBatteryLevel", BleCharacteristicProperty::NOTIFY, BleUuid("c254151d-6b19-438c-a001-5e4d12bc5946"), serviceUuid);
   b43d8:	f8df a140 	ldr.w	sl, [pc, #320]	; b451c <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x24c>
   b43dc:	4941      	ldr	r1, [pc, #260]	; (b44e4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x214>)
   b43de:	f88d 9014 	strb.w	r9, [sp, #20]
   b43e2:	a80b      	add	r0, sp, #44	; 0x2c
   b43e4:	f000 fd0c 	bl	b4e00 <_ZN8particle7BleUuidC1EPKc>
   b43e8:	4639      	mov	r1, r7
   b43ea:	4628      	mov	r0, r5
   b43ec:	f000 fc24 	bl	b4c38 <_ZN8particle7BleUuidC1ERKS0_>
   b43f0:	ab0b      	add	r3, sp, #44	; 0x2c
   b43f2:	aa05      	add	r2, sp, #20
   b43f4:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b43f8:	493b      	ldr	r1, [pc, #236]	; (b44e8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x218>)
   b43fa:	9500      	str	r5, [sp, #0]
   b43fc:	4650      	mov	r0, sl
   b43fe:	f7ff ff45 	bl	b428c <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   b4402:	4632      	mov	r2, r6
   b4404:	4641      	mov	r1, r8
   b4406:	4650      	mov	r0, sl
   b4408:	f002 f802 	bl	b6410 <__aeabi_atexit>
BleCharacteristic tabletDiskSpaceCharacteristicUuid("tabletDiskSpace", BleCharacteristicProperty::NOTIFY, BleUuid("c256151d-6b19-438c-a001-5e4d12bc5949"), serviceUuid);
   b440c:	f8df a110 	ldr.w	sl, [pc, #272]	; b4520 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x250>
   b4410:	4936      	ldr	r1, [pc, #216]	; (b44ec <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x21c>)
   b4412:	f88d 9014 	strb.w	r9, [sp, #20]
   b4416:	a80b      	add	r0, sp, #44	; 0x2c
   b4418:	f000 fcf2 	bl	b4e00 <_ZN8particle7BleUuidC1EPKc>
   b441c:	4639      	mov	r1, r7
   b441e:	4628      	mov	r0, r5
   b4420:	f000 fc0a 	bl	b4c38 <_ZN8particle7BleUuidC1ERKS0_>
   b4424:	ab0b      	add	r3, sp, #44	; 0x2c
   b4426:	aa05      	add	r2, sp, #20
   b4428:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b442c:	4930      	ldr	r1, [pc, #192]	; (b44f0 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x220>)
   b442e:	9500      	str	r5, [sp, #0]
   b4430:	4650      	mov	r0, sl
   b4432:	f7ff ff2b 	bl	b428c <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   b4436:	4632      	mov	r2, r6
   b4438:	4641      	mov	r1, r8
   b443a:	4650      	mov	r0, sl
   b443c:	f001 ffe8 	bl	b6410 <__aeabi_atexit>
BleCharacteristic tabletConnectionCharacteristicUuid("tabletConnection", BleCharacteristicProperty::NOTIFY, BleUuid("C255151D-6B19-438C-A001-5E4D12BC5947"), serviceUuid);
   b4440:	f8df a0e0 	ldr.w	sl, [pc, #224]	; b4524 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x254>
   b4444:	492b      	ldr	r1, [pc, #172]	; (b44f4 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x224>)
   b4446:	f88d 9014 	strb.w	r9, [sp, #20]
   b444a:	a80b      	add	r0, sp, #44	; 0x2c
   b444c:	f000 fcd8 	bl	b4e00 <_ZN8particle7BleUuidC1EPKc>
   b4450:	4639      	mov	r1, r7
   b4452:	4628      	mov	r0, r5
   b4454:	f000 fbf0 	bl	b4c38 <_ZN8particle7BleUuidC1ERKS0_>
   b4458:	ab0b      	add	r3, sp, #44	; 0x2c
   b445a:	aa05      	add	r2, sp, #20
   b445c:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b4460:	4925      	ldr	r1, [pc, #148]	; (b44f8 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x228>)
   b4462:	9500      	str	r5, [sp, #0]
   b4464:	4650      	mov	r0, sl
   b4466:	f7ff ff11 	bl	b428c <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   b446a:	4632      	mov	r2, r6
   b446c:	4641      	mov	r1, r8
   b446e:	4650      	mov	r0, sl
   b4470:	f001 ffce 	bl	b6410 <__aeabi_atexit>
BleCharacteristic seizureAlertCharacteristicUuid("seizureAlert", BleCharacteristicProperty::NOTIFY, BleUuid("8329a311-aedd-4ffe-b0ab-def64a994b53"), serviceUuid);
   b4474:	4921      	ldr	r1, [pc, #132]	; (b44fc <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x22c>)
   b4476:	f88d 9014 	strb.w	r9, [sp, #20]
   b447a:	a80b      	add	r0, sp, #44	; 0x2c
   b447c:	f000 fcc0 	bl	b4e00 <_ZN8particle7BleUuidC1EPKc>
   b4480:	4639      	mov	r1, r7
   b4482:	4f1f      	ldr	r7, [pc, #124]	; (b4500 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x230>)
   b4484:	4628      	mov	r0, r5
   b4486:	f000 fbd7 	bl	b4c38 <_ZN8particle7BleUuidC1ERKS0_>
   b448a:	aa05      	add	r2, sp, #20
   b448c:	e9cd 4401 	strd	r4, r4, [sp, #4]
   b4490:	491c      	ldr	r1, [pc, #112]	; (b4504 <_Z41__static_initialization_and_destruction_0ii.constprop.0+0x234>)
   b4492:	9500      	str	r5, [sp, #0]
   b4494:	ab0b      	add	r3, sp, #44	; 0x2c
   b4496:	4638      	mov	r0, r7
   b4498:	f7ff fef8 	bl	b428c <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   b449c:	4632      	mov	r2, r6
   b449e:	4641      	mov	r1, r8
   b44a0:	4638      	mov	r0, r7
   b44a2:	b010      	add	sp, #64	; 0x40
   b44a4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
BleCharacteristic seizureAlertCharacteristicUuid("seizureAlert", BleCharacteristicProperty::NOTIFY, BleUuid("8329a311-aedd-4ffe-b0ab-def64a994b53"), serviceUuid);
   b44a8:	f001 bfb2 	b.w	b6410 <__aeabi_atexit>
   b44ac:	2003e5fc 	.word	0x2003e5fc
   b44b0:	2003e5f8 	.word	0x2003e5f8
   b44b4:	ffff0000 	.word	0xffff0000
   b44b8:	2003e608 	.word	0x2003e608
   b44bc:	000b40ab 	.word	0x000b40ab
   b44c0:	000b6797 	.word	0x000b6797
   b44c4:	000b67bc 	.word	0x000b67bc
   b44c8:	000b67e1 	.word	0x000b67e1
   b44cc:	000b67f1 	.word	0x000b67f1
   b44d0:	000b6816 	.word	0x000b6816
   b44d4:	000b6824 	.word	0x000b6824
   b44d8:	000b6849 	.word	0x000b6849
   b44dc:	000b6858 	.word	0x000b6858
   b44e0:	000b687d 	.word	0x000b687d
   b44e4:	000b688b 	.word	0x000b688b
   b44e8:	000b68b0 	.word	0x000b68b0
   b44ec:	000b68c3 	.word	0x000b68c3
   b44f0:	000b68e8 	.word	0x000b68e8
   b44f4:	000b68f8 	.word	0x000b68f8
   b44f8:	000b691d 	.word	0x000b691d
   b44fc:	000b692e 	.word	0x000b692e
   b4500:	2003e63c 	.word	0x2003e63c
   b4504:	000b6953 	.word	0x000b6953
   b4508:	2003e62c 	.word	0x2003e62c
   b450c:	000b52af 	.word	0x000b52af
   b4510:	2003e634 	.word	0x2003e634
   b4514:	2003e61c 	.word	0x2003e61c
   b4518:	2003e624 	.word	0x2003e624
   b451c:	2003e644 	.word	0x2003e644
   b4520:	2003e654 	.word	0x2003e654
   b4524:	2003e64c 	.word	0x2003e64c

000b4528 <_GLOBAL__sub_I_SystemMode>:
   b4528:	f7ff bed2 	b.w	b42d0 <_Z41__static_initialization_and_destruction_0ii.constprop.0>

000b452c <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   b452c:	b508      	push	{r3, lr}
   b452e:	4b02      	ldr	r3, [pc, #8]	; (b4538 <hal_ble_stack_init+0xc>)
   b4530:	681b      	ldr	r3, [r3, #0]
   b4532:	689b      	ldr	r3, [r3, #8]
   b4534:	9301      	str	r3, [sp, #4]
   b4536:	bd08      	pop	{r3, pc}
   b4538:	00030278 	.word	0x00030278

000b453c <hal_ble_gap_set_device_name>:
DYNALIB_FN(3, hal_ble, hal_ble_stack_deinit, int(void*))
DYNALIB_FN(4, hal_ble, hal_ble_select_antenna, int(hal_ble_ant_type_t, void*))
DYNALIB_FN(5, hal_ble, hal_ble_set_callback_on_events_deprecated, int(hal_ble_on_generic_evt_cb_deprecated_t, void*, void*))
DYNALIB_FN(6, hal_ble, hal_ble_gap_set_device_address, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(7, hal_ble, hal_ble_gap_get_device_address, int(hal_ble_addr_t*, void*))
DYNALIB_FN(8, hal_ble, hal_ble_gap_set_device_name, int(const char*, size_t, void*))
   b453c:	b508      	push	{r3, lr}
   b453e:	4b02      	ldr	r3, [pc, #8]	; (b4548 <hal_ble_gap_set_device_name+0xc>)
   b4540:	681b      	ldr	r3, [r3, #0]
   b4542:	6a1b      	ldr	r3, [r3, #32]
   b4544:	9301      	str	r3, [sp, #4]
   b4546:	bd08      	pop	{r3, pc}
   b4548:	00030278 	.word	0x00030278

000b454c <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   b454c:	b508      	push	{r3, lr}
   b454e:	4b02      	ldr	r3, [pc, #8]	; (b4558 <hal_ble_gap_set_advertising_data+0xc>)
   b4550:	681b      	ldr	r3, [r3, #0]
   b4552:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b4554:	9301      	str	r3, [sp, #4]
   b4556:	bd08      	pop	{r3, pc}
   b4558:	00030278 	.word	0x00030278

000b455c <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   b455c:	b508      	push	{r3, lr}
   b455e:	4b02      	ldr	r3, [pc, #8]	; (b4568 <hal_ble_gap_set_scan_response_data+0xc>)
   b4560:	681b      	ldr	r3, [r3, #0]
   b4562:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   b4564:	9301      	str	r3, [sp, #4]
   b4566:	bd08      	pop	{r3, pc}
   b4568:	00030278 	.word	0x00030278

000b456c <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   b456c:	b508      	push	{r3, lr}
   b456e:	4b02      	ldr	r3, [pc, #8]	; (b4578 <hal_ble_gap_start_advertising+0xc>)
   b4570:	681b      	ldr	r3, [r3, #0]
   b4572:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   b4574:	9301      	str	r3, [sp, #4]
   b4576:	bd08      	pop	{r3, pc}
   b4578:	00030278 	.word	0x00030278

000b457c <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   b457c:	b508      	push	{r3, lr}
   b457e:	4b03      	ldr	r3, [pc, #12]	; (b458c <hal_ble_gap_disconnect+0x10>)
   b4580:	681b      	ldr	r3, [r3, #0]
   b4582:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   b4586:	9301      	str	r3, [sp, #4]
   b4588:	bd08      	pop	{r3, pc}
   b458a:	0000      	.short	0x0000
   b458c:	00030278 	.word	0x00030278

000b4590 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   b4590:	b508      	push	{r3, lr}
   b4592:	4b03      	ldr	r3, [pc, #12]	; (b45a0 <hal_ble_gatt_server_add_service+0x10>)
   b4594:	681b      	ldr	r3, [r3, #0]
   b4596:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   b459a:	9301      	str	r3, [sp, #4]
   b459c:	bd08      	pop	{r3, pc}
   b459e:	0000      	.short	0x0000
   b45a0:	00030278 	.word	0x00030278

000b45a4 <hal_ble_gatt_server_set_characteristic_value>:
DYNALIB_FN(43, hal_ble, hal_ble_gatt_server_add_characteristic_deprecated, int(const hal_ble_char_init_deprecated_t*, hal_ble_char_handles_t*, void*))
DYNALIB_FN(44, hal_ble, hal_ble_gatt_server_add_descriptor, int(const hal_ble_desc_init_t*, hal_ble_attr_handle_t*, void*))
DYNALIB_FN(45, hal_ble, hal_ble_gatt_server_set_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b45a4:	b508      	push	{r3, lr}
   b45a6:	4b03      	ldr	r3, [pc, #12]	; (b45b4 <hal_ble_gatt_server_set_characteristic_value+0x10>)
   b45a8:	681b      	ldr	r3, [r3, #0]
   b45aa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
   b45ae:	9301      	str	r3, [sp, #4]
   b45b0:	bd08      	pop	{r3, pc}
   b45b2:	0000      	.short	0x0000
   b45b4:	00030278 	.word	0x00030278

000b45b8 <hal_ble_gatt_client_write_with_response>:
DYNALIB_FN(49, hal_ble, hal_ble_gatt_client_discover_characteristics, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(50, hal_ble, hal_ble_gatt_client_discover_characteristics_by_uuid, int(hal_ble_conn_handle_t, const hal_ble_svc_t*, const hal_ble_uuid_t*, hal_ble_on_disc_char_cb_t, void*, void*))
DYNALIB_FN(51, hal_ble, hal_ble_gatt_client_is_discovering, bool(hal_ble_conn_handle_t, void*))
DYNALIB_FN(52, hal_ble, hal_ble_gatt_set_att_mtu, int(size_t, void*))
DYNALIB_FN(53, hal_ble, hal_ble_gatt_client_configure_cccd_deprecated, int(hal_ble_conn_handle_t, hal_ble_attr_handle_t, ble_sig_cccd_value_t, void*))
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b45b8:	b508      	push	{r3, lr}
   b45ba:	4b03      	ldr	r3, [pc, #12]	; (b45c8 <hal_ble_gatt_client_write_with_response+0x10>)
   b45bc:	681b      	ldr	r3, [r3, #0]
   b45be:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   b45c2:	9301      	str	r3, [sp, #4]
   b45c4:	bd08      	pop	{r3, pc}
   b45c6:	0000      	.short	0x0000
   b45c8:	00030278 	.word	0x00030278

000b45cc <hal_ble_gatt_client_write_without_response>:
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b45cc:	b508      	push	{r3, lr}
   b45ce:	4b03      	ldr	r3, [pc, #12]	; (b45dc <hal_ble_gatt_client_write_without_response+0x10>)
   b45d0:	681b      	ldr	r3, [r3, #0]
   b45d2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
   b45d6:	9301      	str	r3, [sp, #4]
   b45d8:	bd08      	pop	{r3, pc}
   b45da:	0000      	.short	0x0000
   b45dc:	00030278 	.word	0x00030278

000b45e0 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   b45e0:	b508      	push	{r3, lr}
   b45e2:	4b03      	ldr	r3, [pc, #12]	; (b45f0 <hal_ble_gatt_server_add_characteristic+0x10>)
   b45e4:	681b      	ldr	r3, [r3, #0]
   b45e6:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   b45ea:	9301      	str	r3, [sp, #4]
   b45ec:	bd08      	pop	{r3, pc}
   b45ee:	0000      	.short	0x0000
   b45f0:	00030278 	.word	0x00030278

000b45f4 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   b45f4:	b508      	push	{r3, lr}
   b45f6:	4b03      	ldr	r3, [pc, #12]	; (b4604 <hal_ble_set_callback_on_periph_link_events+0x10>)
   b45f8:	681b      	ldr	r3, [r3, #0]
   b45fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   b45fe:	9301      	str	r3, [sp, #4]
   b4600:	bd08      	pop	{r3, pc}
   b4602:	0000      	.short	0x0000
   b4604:	00030278 	.word	0x00030278

000b4608 <hal_ble_gatt_server_notify_characteristic_value>:
DYNALIB_FN(61, hal_ble, hal_ble_gatt_client_configure_cccd, int(const hal_ble_cccd_config_t*, void*))
DYNALIB_FN(62, hal_ble, hal_ble_set_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(63, hal_ble, hal_ble_cancel_callback_on_adv_events, int(hal_ble_on_adv_evt_cb_t, void*, void*))
DYNALIB_FN(64, hal_ble, hal_ble_gatt_server_notify_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b4608:	b508      	push	{r3, lr}
   b460a:	4b03      	ldr	r3, [pc, #12]	; (b4618 <hal_ble_gatt_server_notify_characteristic_value+0x10>)
   b460c:	681b      	ldr	r3, [r3, #0]
   b460e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   b4612:	9301      	str	r3, [sp, #4]
   b4614:	bd08      	pop	{r3, pc}
   b4616:	0000      	.short	0x0000
   b4618:	00030278 	.word	0x00030278

000b461c <hal_ble_gatt_server_indicate_characteristic_value>:
DYNALIB_FN(65, hal_ble, hal_ble_gatt_server_indicate_characteristic_value, ssize_t(hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
   b461c:	b508      	push	{r3, lr}
   b461e:	4b03      	ldr	r3, [pc, #12]	; (b462c <hal_ble_gatt_server_indicate_characteristic_value+0x10>)
   b4620:	681b      	ldr	r3, [r3, #0]
   b4622:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
   b4626:	9301      	str	r3, [sp, #4]
   b4628:	bd08      	pop	{r3, pc}
   b462a:	0000      	.short	0x0000
   b462c:	00030278 	.word	0x00030278

000b4630 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4630:	b508      	push	{r3, lr}
   b4632:	4b02      	ldr	r3, [pc, #8]	; (b463c <os_mutex_recursive_create+0xc>)
   b4634:	681b      	ldr	r3, [r3, #0]
   b4636:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4638:	9301      	str	r3, [sp, #4]
   b463a:	bd08      	pop	{r3, pc}
   b463c:	00030248 	.word	0x00030248

000b4640 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   b4640:	b508      	push	{r3, lr}
   b4642:	4b02      	ldr	r3, [pc, #8]	; (b464c <os_mutex_recursive_destroy+0xc>)
   b4644:	681b      	ldr	r3, [r3, #0]
   b4646:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   b4648:	9301      	str	r3, [sp, #4]
   b464a:	bd08      	pop	{r3, pc}
   b464c:	00030248 	.word	0x00030248

000b4650 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   b4650:	b508      	push	{r3, lr}
   b4652:	4b02      	ldr	r3, [pc, #8]	; (b465c <os_mutex_recursive_lock+0xc>)
   b4654:	681b      	ldr	r3, [r3, #0]
   b4656:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b4658:	9301      	str	r3, [sp, #4]
   b465a:	bd08      	pop	{r3, pc}
   b465c:	00030248 	.word	0x00030248

000b4660 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   b4660:	b508      	push	{r3, lr}
   b4662:	4b02      	ldr	r3, [pc, #8]	; (b466c <os_mutex_recursive_unlock+0xc>)
   b4664:	681b      	ldr	r3, [r3, #0]
   b4666:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b4668:	9301      	str	r3, [sp, #4]
   b466a:	bd08      	pop	{r3, pc}
   b466c:	00030248 	.word	0x00030248

000b4670 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4670:	b508      	push	{r3, lr}
   b4672:	4b02      	ldr	r3, [pc, #8]	; (b467c <HAL_RNG_GetRandomNumber+0xc>)
   b4674:	681b      	ldr	r3, [r3, #0]
   b4676:	685b      	ldr	r3, [r3, #4]
   b4678:	9301      	str	r3, [sp, #4]
   b467a:	bd08      	pop	{r3, pc}
   b467c:	00030218 	.word	0x00030218

000b4680 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b4680:	b508      	push	{r3, lr}
   b4682:	4b02      	ldr	r3, [pc, #8]	; (b468c <HAL_Delay_Microseconds+0xc>)
   b4684:	681b      	ldr	r3, [r3, #0]
   b4686:	68db      	ldr	r3, [r3, #12]
   b4688:	9301      	str	r3, [sp, #4]
   b468a:	bd08      	pop	{r3, pc}
   b468c:	00030218 	.word	0x00030218

000b4690 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4690:	b508      	push	{r3, lr}
   b4692:	4b02      	ldr	r3, [pc, #8]	; (b469c <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4694:	681b      	ldr	r3, [r3, #0]
   b4696:	695b      	ldr	r3, [r3, #20]
   b4698:	9301      	str	r3, [sp, #4]
   b469a:	bd08      	pop	{r3, pc}
   b469c:	00030218 	.word	0x00030218

000b46a0 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b46a0:	b508      	push	{r3, lr}
   b46a2:	4b02      	ldr	r3, [pc, #8]	; (b46ac <inet_inet_ntop+0xc>)
   b46a4:	681b      	ldr	r3, [r3, #0]
   b46a6:	695b      	ldr	r3, [r3, #20]
   b46a8:	9301      	str	r3, [sp, #4]
   b46aa:	bd08      	pop	{r3, pc}
   b46ac:	00030264 	.word	0x00030264

000b46b0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b46b0:	b508      	push	{r3, lr}
   b46b2:	4b02      	ldr	r3, [pc, #8]	; (b46bc <netdb_freeaddrinfo+0xc>)
   b46b4:	681b      	ldr	r3, [r3, #0]
   b46b6:	689b      	ldr	r3, [r3, #8]
   b46b8:	9301      	str	r3, [sp, #4]
   b46ba:	bd08      	pop	{r3, pc}
   b46bc:	00030268 	.word	0x00030268

000b46c0 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b46c0:	b508      	push	{r3, lr}
   b46c2:	4b02      	ldr	r3, [pc, #8]	; (b46cc <netdb_getaddrinfo+0xc>)
   b46c4:	681b      	ldr	r3, [r3, #0]
   b46c6:	68db      	ldr	r3, [r3, #12]
   b46c8:	9301      	str	r3, [sp, #4]
   b46ca:	bd08      	pop	{r3, pc}
   b46cc:	00030268 	.word	0x00030268

000b46d0 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   b46d0:	b508      	push	{r3, lr}
   b46d2:	4b02      	ldr	r3, [pc, #8]	; (b46dc <hal_usart_init+0xc>)
   b46d4:	681b      	ldr	r3, [r3, #0]
   b46d6:	681b      	ldr	r3, [r3, #0]
   b46d8:	9301      	str	r3, [sp, #4]
   b46da:	bd08      	pop	{r3, pc}
   b46dc:	0003023c 	.word	0x0003023c

000b46e0 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b46e0:	b508      	push	{r3, lr}
   b46e2:	4b02      	ldr	r3, [pc, #8]	; (b46ec <hal_usart_write+0xc>)
   b46e4:	681b      	ldr	r3, [r3, #0]
   b46e6:	68db      	ldr	r3, [r3, #12]
   b46e8:	9301      	str	r3, [sp, #4]
   b46ea:	bd08      	pop	{r3, pc}
   b46ec:	0003023c 	.word	0x0003023c

000b46f0 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b46f0:	b508      	push	{r3, lr}
   b46f2:	4b02      	ldr	r3, [pc, #8]	; (b46fc <hal_usart_available+0xc>)
   b46f4:	681b      	ldr	r3, [r3, #0]
   b46f6:	691b      	ldr	r3, [r3, #16]
   b46f8:	9301      	str	r3, [sp, #4]
   b46fa:	bd08      	pop	{r3, pc}
   b46fc:	0003023c 	.word	0x0003023c

000b4700 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b4700:	b508      	push	{r3, lr}
   b4702:	4b02      	ldr	r3, [pc, #8]	; (b470c <hal_usart_read+0xc>)
   b4704:	681b      	ldr	r3, [r3, #0]
   b4706:	695b      	ldr	r3, [r3, #20]
   b4708:	9301      	str	r3, [sp, #4]
   b470a:	bd08      	pop	{r3, pc}
   b470c:	0003023c 	.word	0x0003023c

000b4710 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b4710:	b508      	push	{r3, lr}
   b4712:	4b02      	ldr	r3, [pc, #8]	; (b471c <hal_usart_peek+0xc>)
   b4714:	681b      	ldr	r3, [r3, #0]
   b4716:	699b      	ldr	r3, [r3, #24]
   b4718:	9301      	str	r3, [sp, #4]
   b471a:	bd08      	pop	{r3, pc}
   b471c:	0003023c 	.word	0x0003023c

000b4720 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4720:	b508      	push	{r3, lr}
   b4722:	4b02      	ldr	r3, [pc, #8]	; (b472c <hal_usart_flush+0xc>)
   b4724:	681b      	ldr	r3, [r3, #0]
   b4726:	69db      	ldr	r3, [r3, #28]
   b4728:	9301      	str	r3, [sp, #4]
   b472a:	bd08      	pop	{r3, pc}
   b472c:	0003023c 	.word	0x0003023c

000b4730 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4730:	b508      	push	{r3, lr}
   b4732:	4b02      	ldr	r3, [pc, #8]	; (b473c <hal_usart_available_data_for_write+0xc>)
   b4734:	681b      	ldr	r3, [r3, #0]
   b4736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4738:	9301      	str	r3, [sp, #4]
   b473a:	bd08      	pop	{r3, pc}
   b473c:	0003023c 	.word	0x0003023c

000b4740 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4740:	b508      	push	{r3, lr}
   b4742:	4b02      	ldr	r3, [pc, #8]	; (b474c <HAL_USB_USART_Init+0xc>)
   b4744:	681b      	ldr	r3, [r3, #0]
   b4746:	681b      	ldr	r3, [r3, #0]
   b4748:	9301      	str	r3, [sp, #4]
   b474a:	bd08      	pop	{r3, pc}
   b474c:	0003024c 	.word	0x0003024c

000b4750 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4750:	b508      	push	{r3, lr}
   b4752:	4b02      	ldr	r3, [pc, #8]	; (b475c <HAL_USB_USART_Available_Data+0xc>)
   b4754:	681b      	ldr	r3, [r3, #0]
   b4756:	691b      	ldr	r3, [r3, #16]
   b4758:	9301      	str	r3, [sp, #4]
   b475a:	bd08      	pop	{r3, pc}
   b475c:	0003024c 	.word	0x0003024c

000b4760 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4760:	b508      	push	{r3, lr}
   b4762:	4b02      	ldr	r3, [pc, #8]	; (b476c <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4764:	681b      	ldr	r3, [r3, #0]
   b4766:	695b      	ldr	r3, [r3, #20]
   b4768:	9301      	str	r3, [sp, #4]
   b476a:	bd08      	pop	{r3, pc}
   b476c:	0003024c 	.word	0x0003024c

000b4770 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4770:	b508      	push	{r3, lr}
   b4772:	4b02      	ldr	r3, [pc, #8]	; (b477c <HAL_USB_USART_Receive_Data+0xc>)
   b4774:	681b      	ldr	r3, [r3, #0]
   b4776:	699b      	ldr	r3, [r3, #24]
   b4778:	9301      	str	r3, [sp, #4]
   b477a:	bd08      	pop	{r3, pc}
   b477c:	0003024c 	.word	0x0003024c

000b4780 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4780:	b508      	push	{r3, lr}
   b4782:	4b02      	ldr	r3, [pc, #8]	; (b478c <HAL_USB_USART_Send_Data+0xc>)
   b4784:	681b      	ldr	r3, [r3, #0]
   b4786:	69db      	ldr	r3, [r3, #28]
   b4788:	9301      	str	r3, [sp, #4]
   b478a:	bd08      	pop	{r3, pc}
   b478c:	0003024c 	.word	0x0003024c

000b4790 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4790:	b508      	push	{r3, lr}
   b4792:	4b02      	ldr	r3, [pc, #8]	; (b479c <HAL_USB_USART_Flush_Data+0xc>)
   b4794:	681b      	ldr	r3, [r3, #0]
   b4796:	6a1b      	ldr	r3, [r3, #32]
   b4798:	9301      	str	r3, [sp, #4]
   b479a:	bd08      	pop	{r3, pc}
   b479c:	0003024c 	.word	0x0003024c

000b47a0 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   b47a0:	b508      	push	{r3, lr}
   b47a2:	4b02      	ldr	r3, [pc, #8]	; (b47ac <panic_+0xc>)
   b47a4:	681b      	ldr	r3, [r3, #0]
   b47a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b47a8:	9301      	str	r3, [sp, #4]
   b47aa:	bd08      	pop	{r3, pc}
   b47ac:	00030260 	.word	0x00030260

000b47b0 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b47b0:	b508      	push	{r3, lr}
   b47b2:	4b02      	ldr	r3, [pc, #8]	; (b47bc <log_message+0xc>)
   b47b4:	681b      	ldr	r3, [r3, #0]
   b47b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b47b8:	9301      	str	r3, [sp, #4]
   b47ba:	bd08      	pop	{r3, pc}
   b47bc:	00030260 	.word	0x00030260

000b47c0 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b47c0:	b508      	push	{r3, lr}
   b47c2:	4b02      	ldr	r3, [pc, #8]	; (b47cc <set_system_mode+0xc>)
   b47c4:	681b      	ldr	r3, [r3, #0]
   b47c6:	685b      	ldr	r3, [r3, #4]
   b47c8:	9301      	str	r3, [sp, #4]
   b47ca:	bd08      	pop	{r3, pc}
   b47cc:	00030220 	.word	0x00030220

000b47d0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b47d0:	b508      	push	{r3, lr}
   b47d2:	4b02      	ldr	r3, [pc, #8]	; (b47dc <system_delay_ms+0xc>)
   b47d4:	681b      	ldr	r3, [r3, #0]
   b47d6:	695b      	ldr	r3, [r3, #20]
   b47d8:	9301      	str	r3, [sp, #4]
   b47da:	bd08      	pop	{r3, pc}
   b47dc:	00030220 	.word	0x00030220

000b47e0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b47e0:	b508      	push	{r3, lr}
   b47e2:	4b03      	ldr	r3, [pc, #12]	; (b47f0 <system_ctrl_set_app_request_handler+0x10>)
   b47e4:	681b      	ldr	r3, [r3, #0]
   b47e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b47ea:	9301      	str	r3, [sp, #4]
   b47ec:	bd08      	pop	{r3, pc}
   b47ee:	0000      	.short	0x0000
   b47f0:	00030220 	.word	0x00030220

000b47f4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b47f4:	b508      	push	{r3, lr}
   b47f6:	4b03      	ldr	r3, [pc, #12]	; (b4804 <system_ctrl_set_result+0x10>)
   b47f8:	681b      	ldr	r3, [r3, #0]
   b47fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b47fe:	9301      	str	r3, [sp, #4]
   b4800:	bd08      	pop	{r3, pc}
   b4802:	0000      	.short	0x0000
   b4804:	00030220 	.word	0x00030220

000b4808 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b4808:	b508      	push	{r3, lr}
   b480a:	4b02      	ldr	r3, [pc, #8]	; (b4814 <spark_set_random_seed_from_cloud_handler+0xc>)
   b480c:	681b      	ldr	r3, [r3, #0]
   b480e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4810:	9301      	str	r3, [sp, #4]
   b4812:	bd08      	pop	{r3, pc}
   b4814:	00030244 	.word	0x00030244

000b4818 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b4818:	b508      	push	{r3, lr}
   b481a:	4b02      	ldr	r3, [pc, #8]	; (b4824 <network_connect+0xc>)
   b481c:	681b      	ldr	r3, [r3, #0]
   b481e:	685b      	ldr	r3, [r3, #4]
   b4820:	9301      	str	r3, [sp, #4]
   b4822:	bd08      	pop	{r3, pc}
   b4824:	00030240 	.word	0x00030240

000b4828 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b4828:	b508      	push	{r3, lr}
   b482a:	4b02      	ldr	r3, [pc, #8]	; (b4834 <network_connecting+0xc>)
   b482c:	681b      	ldr	r3, [r3, #0]
   b482e:	689b      	ldr	r3, [r3, #8]
   b4830:	9301      	str	r3, [sp, #4]
   b4832:	bd08      	pop	{r3, pc}
   b4834:	00030240 	.word	0x00030240

000b4838 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b4838:	b508      	push	{r3, lr}
   b483a:	4b02      	ldr	r3, [pc, #8]	; (b4844 <network_disconnect+0xc>)
   b483c:	681b      	ldr	r3, [r3, #0]
   b483e:	68db      	ldr	r3, [r3, #12]
   b4840:	9301      	str	r3, [sp, #4]
   b4842:	bd08      	pop	{r3, pc}
   b4844:	00030240 	.word	0x00030240

000b4848 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b4848:	b508      	push	{r3, lr}
   b484a:	4b02      	ldr	r3, [pc, #8]	; (b4854 <network_ready+0xc>)
   b484c:	681b      	ldr	r3, [r3, #0]
   b484e:	691b      	ldr	r3, [r3, #16]
   b4850:	9301      	str	r3, [sp, #4]
   b4852:	bd08      	pop	{r3, pc}
   b4854:	00030240 	.word	0x00030240

000b4858 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b4858:	b508      	push	{r3, lr}
   b485a:	4b02      	ldr	r3, [pc, #8]	; (b4864 <network_on+0xc>)
   b485c:	681b      	ldr	r3, [r3, #0]
   b485e:	695b      	ldr	r3, [r3, #20]
   b4860:	9301      	str	r3, [sp, #4]
   b4862:	bd08      	pop	{r3, pc}
   b4864:	00030240 	.word	0x00030240

000b4868 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b4868:	b508      	push	{r3, lr}
   b486a:	4b02      	ldr	r3, [pc, #8]	; (b4874 <network_off+0xc>)
   b486c:	681b      	ldr	r3, [r3, #0]
   b486e:	699b      	ldr	r3, [r3, #24]
   b4870:	9301      	str	r3, [sp, #4]
   b4872:	bd08      	pop	{r3, pc}
   b4874:	00030240 	.word	0x00030240

000b4878 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b4878:	b508      	push	{r3, lr}
   b487a:	4b02      	ldr	r3, [pc, #8]	; (b4884 <network_listen+0xc>)
   b487c:	681b      	ldr	r3, [r3, #0]
   b487e:	69db      	ldr	r3, [r3, #28]
   b4880:	9301      	str	r3, [sp, #4]
   b4882:	bd08      	pop	{r3, pc}
   b4884:	00030240 	.word	0x00030240

000b4888 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b4888:	b508      	push	{r3, lr}
   b488a:	4b02      	ldr	r3, [pc, #8]	; (b4894 <network_listening+0xc>)
   b488c:	681b      	ldr	r3, [r3, #0]
   b488e:	6a1b      	ldr	r3, [r3, #32]
   b4890:	9301      	str	r3, [sp, #4]
   b4892:	bd08      	pop	{r3, pc}
   b4894:	00030240 	.word	0x00030240

000b4898 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b4898:	b508      	push	{r3, lr}
   b489a:	4b02      	ldr	r3, [pc, #8]	; (b48a4 <network_set_listen_timeout+0xc>)
   b489c:	681b      	ldr	r3, [r3, #0]
   b489e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b48a0:	9301      	str	r3, [sp, #4]
   b48a2:	bd08      	pop	{r3, pc}
   b48a4:	00030240 	.word	0x00030240

000b48a8 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b48a8:	b508      	push	{r3, lr}
   b48aa:	4b02      	ldr	r3, [pc, #8]	; (b48b4 <network_get_listen_timeout+0xc>)
   b48ac:	681b      	ldr	r3, [r3, #0]
   b48ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b48b0:	9301      	str	r3, [sp, #4]
   b48b2:	bd08      	pop	{r3, pc}
   b48b4:	00030240 	.word	0x00030240

000b48b8 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b48b8:	b508      	push	{r3, lr}
   b48ba:	4b02      	ldr	r3, [pc, #8]	; (b48c4 <network_is_on+0xc>)
   b48bc:	681b      	ldr	r3, [r3, #0]
   b48be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b48c0:	9301      	str	r3, [sp, #4]
   b48c2:	bd08      	pop	{r3, pc}
   b48c4:	00030240 	.word	0x00030240

000b48c8 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b48c8:	b508      	push	{r3, lr}
   b48ca:	4b02      	ldr	r3, [pc, #8]	; (b48d4 <network_is_off+0xc>)
   b48cc:	681b      	ldr	r3, [r3, #0]
   b48ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b48d0:	9301      	str	r3, [sp, #4]
   b48d2:	bd08      	pop	{r3, pc}
   b48d4:	00030240 	.word	0x00030240

000b48d8 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b48d8:	b508      	push	{r3, lr}
   b48da:	4b02      	ldr	r3, [pc, #8]	; (b48e4 <malloc+0xc>)
   b48dc:	681b      	ldr	r3, [r3, #0]
   b48de:	681b      	ldr	r3, [r3, #0]
   b48e0:	9301      	str	r3, [sp, #4]
   b48e2:	bd08      	pop	{r3, pc}
   b48e4:	0003021c 	.word	0x0003021c

000b48e8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b48e8:	b508      	push	{r3, lr}
   b48ea:	4b02      	ldr	r3, [pc, #8]	; (b48f4 <free+0xc>)
   b48ec:	681b      	ldr	r3, [r3, #0]
   b48ee:	685b      	ldr	r3, [r3, #4]
   b48f0:	9301      	str	r3, [sp, #4]
   b48f2:	bd08      	pop	{r3, pc}
   b48f4:	0003021c 	.word	0x0003021c

000b48f8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b48f8:	b508      	push	{r3, lr}
   b48fa:	4b02      	ldr	r3, [pc, #8]	; (b4904 <realloc+0xc>)
   b48fc:	681b      	ldr	r3, [r3, #0]
   b48fe:	689b      	ldr	r3, [r3, #8]
   b4900:	9301      	str	r3, [sp, #4]
   b4902:	bd08      	pop	{r3, pc}
   b4904:	0003021c 	.word	0x0003021c

000b4908 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b4908:	b508      	push	{r3, lr}
   b490a:	4b02      	ldr	r3, [pc, #8]	; (b4914 <abort+0xc>)
   b490c:	681b      	ldr	r3, [r3, #0]
   b490e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4910:	9301      	str	r3, [sp, #4]
   b4912:	bd08      	pop	{r3, pc}
   b4914:	0003021c 	.word	0x0003021c

000b4918 <__assert_func>:
// on Gen 2 platforms without breaking inter-module dependencies.
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b4918:	b508      	push	{r3, lr}
   b491a:	4b02      	ldr	r3, [pc, #8]	; (b4924 <__assert_func+0xc>)
   b491c:	681b      	ldr	r3, [r3, #0]
   b491e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4920:	9301      	str	r3, [sp, #4]
   b4922:	bd08      	pop	{r3, pc}
   b4924:	0003021c 	.word	0x0003021c

000b4928 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b4928:	b508      	push	{r3, lr}
   b492a:	4b02      	ldr	r3, [pc, #8]	; (b4934 <newlib_impure_ptr_callback+0xc>)
   b492c:	681b      	ldr	r3, [r3, #0]
   b492e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4930:	9301      	str	r3, [sp, #4]
   b4932:	bd08      	pop	{r3, pc}
   b4934:	0003021c 	.word	0x0003021c

000b4938 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b4938:	2100      	movs	r1, #0
   b493a:	f7ff bf49 	b.w	b47d0 <system_delay_ms>

000b493e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b493e:	4770      	bx	lr

000b4940 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   b4940:	4770      	bx	lr

000b4942 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   b4942:	4770      	bx	lr

000b4944 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b4944:	4770      	bx	lr
	...

000b4948 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b4948:	4b06      	ldr	r3, [pc, #24]	; (b4964 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b494a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b494c:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   b494e:	f100 040c 	add.w	r4, r0, #12
	    ||
   b4952:	d005      	beq.n	b4960 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b4954:	4608      	mov	r0, r1
   b4956:	f001 fd65 	bl	b6424 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b495a:	2800      	cmp	r0, #0
   b495c:	bf08      	it	eq
   b495e:	2400      	moveq	r4, #0
      }
   b4960:	4620      	mov	r0, r4
   b4962:	bd10      	pop	{r4, pc}
   b4964:	000b6aa8 	.word	0x000b6aa8

000b4968 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b4968:	4b06      	ldr	r3, [pc, #24]	; (b4984 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b496a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b496c:	b510      	push	{r4, lr}
   b496e:	f100 040c 	add.w	r4, r0, #12
	    ||
   b4972:	d005      	beq.n	b4980 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b4974:	4608      	mov	r0, r1
   b4976:	f001 fd55 	bl	b6424 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b497a:	2800      	cmp	r0, #0
   b497c:	bf08      	it	eq
   b497e:	2400      	moveq	r4, #0
      }
   b4980:	4620      	mov	r0, r4
   b4982:	bd10      	pop	{r4, pc}
   b4984:	000b6aa8 	.word	0x000b6aa8

000b4988 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   b4988:	4b06      	ldr	r3, [pc, #24]	; (b49a4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   b498a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   b498c:	b510      	push	{r4, lr}
   b498e:	f100 040c 	add.w	r4, r0, #12
	    ||
   b4992:	d005      	beq.n	b49a0 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   b4994:	4608      	mov	r0, r1
   b4996:	f001 fd45 	bl	b6424 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	return nullptr;
   b499a:	2800      	cmp	r0, #0
   b499c:	bf08      	it	eq
   b499e:	2400      	moveq	r4, #0
      }
   b49a0:	4620      	mov	r0, r4
   b49a2:	bd10      	pop	{r4, pc}
   b49a4:	000b6aa8 	.word	0x000b6aa8

000b49a8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   b49a8:	b510      	push	{r4, lr}
   b49aa:	2168      	movs	r1, #104	; 0x68
   b49ac:	4604      	mov	r4, r0
   b49ae:	f001 fd34 	bl	b641a <_ZdlPvj>
   b49b2:	4620      	mov	r0, r4
   b49b4:	bd10      	pop	{r4, pc}

000b49b6 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b49b6:	b510      	push	{r4, lr}
   b49b8:	2128      	movs	r1, #40	; 0x28
   b49ba:	4604      	mov	r4, r0
   b49bc:	f001 fd2d 	bl	b641a <_ZdlPvj>
   b49c0:	4620      	mov	r0, r4
   b49c2:	bd10      	pop	{r4, pc}

000b49c4 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   b49c4:	b510      	push	{r4, lr}
   b49c6:	2130      	movs	r1, #48	; 0x30
   b49c8:	4604      	mov	r4, r0
   b49ca:	f001 fd26 	bl	b641a <_ZdlPvj>
   b49ce:	4620      	mov	r0, r4
   b49d0:	bd10      	pop	{r4, pc}

000b49d2 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
# endif
			      std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p
   b49d2:	2168      	movs	r1, #104	; 0x68
   b49d4:	f001 bd21 	b.w	b641a <_ZdlPvj>

000b49d8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b49d8:	2128      	movs	r1, #40	; 0x28
   b49da:	f001 bd1e 	b.w	b641a <_ZdlPvj>

000b49de <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   b49de:	2130      	movs	r1, #48	; 0x30
   b49e0:	f001 bd1b 	b.w	b641a <_ZdlPvj>

000b49e4 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   b49e4:	b510      	push	{r4, lr}
   b49e6:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   b49e8:	6800      	ldr	r0, [r0, #0]
   b49ea:	b108      	cbz	r0, b49f0 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   b49ec:	f7ff fe28 	bl	b4640 <os_mutex_recursive_destroy>
    }
   b49f0:	4620      	mov	r0, r4
   b49f2:	bd10      	pop	{r4, pc}

000b49f4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   b49f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b49f6:	2500      	movs	r5, #0
   b49f8:	1cec      	adds	r4, r5, #3
   b49fa:	428c      	cmp	r4, r1
   b49fc:	d80d      	bhi.n	b4a1a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   b49fe:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   b4a00:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   b4a02:	5d87      	ldrb	r7, [r0, r6]
   b4a04:	4297      	cmp	r7, r2
   b4a06:	d105      	bne.n	b4a14 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   b4a08:	4426      	add	r6, r4
   b4a0a:	42b1      	cmp	r1, r6
   b4a0c:	d305      	bcc.n	b4a1a <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   b4a0e:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   b4a10:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   b4a12:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   b4a14:	3401      	adds	r4, #1
   b4a16:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   b4a18:	e7ee      	b.n	b49f8 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   b4a1a:	2000      	movs	r0, #0
   b4a1c:	e7f9      	b.n	b4a12 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>

000b4a1e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b4a1e:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   b4a22:	4604      	mov	r4, r0
   b4a24:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
   b4a28:	461e      	mov	r6, r3
   b4a2a:	4689      	mov	r9, r1
   b4a2c:	ab01      	add	r3, sp, #4
   b4a2e:	4690      	mov	r8, r2
   b4a30:	460a      	mov	r2, r1
   b4a32:	6a01      	ldr	r1, [r0, #32]
   b4a34:	f7ff ffde 	bl	b49f4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (!force && adsLen > 0) {
   b4a38:	6a25      	ldr	r5, [r4, #32]
   b4a3a:	1cb3      	adds	r3, r6, #2
   b4a3c:	bb0f      	cbnz	r7, b4a82 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x64>
   b4a3e:	b300      	cbz	r0, b4a82 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x64>
        if ((staLen + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   b4a40:	195f      	adds	r7, r3, r5
   b4a42:	1a3f      	subs	r7, r7, r0
   b4a44:	2f1f      	cmp	r7, #31
   b4a46:	d818      	bhi.n	b4a7a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x5c>
            uint16_t moveLen = selfLen_ - offset - adsLen;
   b4a48:	f8dd 9004 	ldr.w	r9, [sp, #4]
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   b4a4c:	f109 0a02 	add.w	sl, r9, #2
            uint16_t moveLen = selfLen_ - offset - adsLen;
   b4a50:	eba5 0209 	sub.w	r2, r5, r9
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   b4a54:	eb06 030a 	add.w	r3, r6, sl
            uint16_t moveLen = selfLen_ - offset - adsLen;
   b4a58:	1a12      	subs	r2, r2, r0
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   b4a5a:	4448      	add	r0, r9
   b4a5c:	1821      	adds	r1, r4, r0
   b4a5e:	b292      	uxth	r2, r2
   b4a60:	18e0      	adds	r0, r4, r3
   b4a62:	f001 fe1d 	bl	b66a0 <memmove>
            selfData_[offset] = len + 1;
   b4a66:	1c73      	adds	r3, r6, #1
   b4a68:	f804 3009 	strb.w	r3, [r4, r9]
            memcpy(&selfData_[offset + 2], buf, len);
   b4a6c:	4632      	mov	r2, r6
   b4a6e:	4641      	mov	r1, r8
   b4a70:	eb04 000a 	add.w	r0, r4, sl
   b4a74:	f001 fe06 	bl	b6684 <memcpy>
            selfLen_ = staLen + len + 2;
   b4a78:	6227      	str	r7, [r4, #32]
}
   b4a7a:	6a20      	ldr	r0, [r4, #32]
   b4a7c:	b002      	add	sp, #8
   b4a7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   b4a82:	442b      	add	r3, r5
   b4a84:	2b1f      	cmp	r3, #31
   b4a86:	d8f8      	bhi.n	b4a7a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x5c>
        selfData_[selfLen_++] = len + 1;
   b4a88:	1c73      	adds	r3, r6, #1
   b4a8a:	5563      	strb	r3, [r4, r5]
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   b4a8c:	1ca8      	adds	r0, r5, #2
   b4a8e:	4425      	add	r5, r4
   b4a90:	6220      	str	r0, [r4, #32]
        memcpy(&selfData_[selfLen_], buf, len);
   b4a92:	4632      	mov	r2, r6
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   b4a94:	f885 9001 	strb.w	r9, [r5, #1]
        memcpy(&selfData_[selfLen_], buf, len);
   b4a98:	4641      	mov	r1, r8
   b4a9a:	4420      	add	r0, r4
   b4a9c:	f001 fdf2 	bl	b6684 <memcpy>
        selfLen_ += len;
   b4aa0:	6a23      	ldr	r3, [r4, #32]
   b4aa2:	4433      	add	r3, r6
   b4aa4:	6223      	str	r3, [r4, #32]
   b4aa6:	e7e8      	b.n	b4a7a <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x5c>

000b4aa8 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   b4aa8:	4a02      	ldr	r2, [pc, #8]	; (b4ab4 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   b4aaa:	2100      	movs	r1, #0
   b4aac:	200a      	movs	r0, #10
   b4aae:	f7ff be77 	b.w	b47a0 <panic_>
   b4ab2:	bf00      	nop
   b4ab4:	000b4681 	.word	0x000b4681

000b4ab8 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
	  }
	return false;
      }

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b4ab8:	b430      	push	{r4, r5}
   b4aba:	460d      	mov	r5, r1
   b4abc:	4611      	mov	r1, r2
   b4abe:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   b4ac0:	6803      	ldr	r3, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b4ac2:	6809      	ldr	r1, [r1, #0]
   b4ac4:	6828      	ldr	r0, [r5, #0]
   b4ac6:	e9d3 4300 	ldrd	r4, r3, [r3]
   b4aca:	46a4      	mov	ip, r4
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
   b4acc:	bc30      	pop	{r4, r5}
   b4ace:	4760      	bx	ip

000b4ad0 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
	switch (__op)
   b4ad0:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b4ad2:	b538      	push	{r3, r4, r5, lr}
   b4ad4:	4604      	mov	r4, r0
	switch (__op)
   b4ad6:	d102      	bne.n	b4ade <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xe>
	    return __source._M_access<_Functor*>();
   b4ad8:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   b4ada:	6023      	str	r3, [r4, #0]
	}
   b4adc:	e003      	b.n	b4ae6 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
	  switch (__op)
   b4ade:	2a02      	cmp	r2, #2
   b4ae0:	d003      	beq.n	b4aea <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x1a>
   b4ae2:	2a03      	cmp	r2, #3
   b4ae4:	d00d      	beq.n	b4b02 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x32>
      }
   b4ae6:	2000      	movs	r0, #0
   b4ae8:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   b4aea:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   b4aec:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b4aee:	f7ff fad0 	bl	b4092 <_Znwj>
   b4af2:	4603      	mov	r3, r0
   b4af4:	2800      	cmp	r0, #0
   b4af6:	d0f0      	beq.n	b4ada <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
   b4af8:	e895 0003 	ldmia.w	r5, {r0, r1}
   b4afc:	e883 0003 	stmia.w	r3, {r0, r1}
   b4b00:	e7eb      	b.n	b4ada <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0xa>
	  delete __victim._M_access<_Functor*>();
   b4b02:	6800      	ldr	r0, [r0, #0]
   b4b04:	2800      	cmp	r0, #0
   b4b06:	d0ee      	beq.n	b4ae6 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>
   b4b08:	2108      	movs	r1, #8
   b4b0a:	f001 fc86 	bl	b641a <_ZdlPvj>
   b4b0e:	e7ea      	b.n	b4ae6 <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x16>

000b4b10 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b4b10:	b510      	push	{r4, lr}
      if (_M_manager)
   b4b12:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b4b14:	4604      	mov	r4, r0
      if (_M_manager)
   b4b16:	b113      	cbz	r3, b4b1e <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b4b18:	2203      	movs	r2, #3
   b4b1a:	4601      	mov	r1, r0
   b4b1c:	4798      	blx	r3
    }
   b4b1e:	4620      	mov	r0, r4
   b4b20:	bd10      	pop	{r4, pc}

000b4b22 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b4b22:	b510      	push	{r4, lr}
   b4b24:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   b4b26:	3058      	adds	r0, #88	; 0x58
   b4b28:	f7ff fff2 	bl	b4b10 <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   b4b2c:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   b4b30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   b4b34:	f001 b9f6 	b.w	b5f24 <_ZN6StringD1Ev>

000b4b38 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>:
    {
   b4b38:	b510      	push	{r4, lr}
      if (--_M_use_count == 0)
   b4b3a:	6843      	ldr	r3, [r0, #4]
   b4b3c:	3b01      	subs	r3, #1
    {
   b4b3e:	4604      	mov	r4, r0
      if (--_M_use_count == 0)
   b4b40:	6043      	str	r3, [r0, #4]
   b4b42:	b963      	cbnz	r3, b4b5e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
          _M_dispose();
   b4b44:	6803      	ldr	r3, [r0, #0]
   b4b46:	689b      	ldr	r3, [r3, #8]
   b4b48:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b4b4a:	68a3      	ldr	r3, [r4, #8]
   b4b4c:	3b01      	subs	r3, #1
   b4b4e:	60a3      	str	r3, [r4, #8]
   b4b50:	b92b      	cbnz	r3, b4b5e <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv+0x26>
            _M_destroy();
   b4b52:	6823      	ldr	r3, [r4, #0]
   b4b54:	4620      	mov	r0, r4
   b4b56:	68db      	ldr	r3, [r3, #12]
    }
   b4b58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   b4b5c:	4718      	bx	r3
    }
   b4b5e:	bd10      	pop	{r4, pc}

000b4b60 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   b4b60:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   b4b64:	b2da      	uxtb	r2, r3
   b4b66:	2a09      	cmp	r2, #9
   b4b68:	d801      	bhi.n	b4b6e <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   b4b6a:	4618      	mov	r0, r3
   b4b6c:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   b4b6e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   b4b72:	2b05      	cmp	r3, #5
   b4b74:	d801      	bhi.n	b4b7a <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   b4b76:	3857      	subs	r0, #87	; 0x57
   b4b78:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   b4b7a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   b4b7e:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   b4b80:	bf94      	ite	ls
   b4b82:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   b4b84:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
}
   b4b88:	4770      	bx	lr
	...

000b4b8c <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   b4b8c:	b510      	push	{r4, lr}
            locked_(false) {
   b4b8e:	2300      	movs	r3, #0
   b4b90:	7003      	strb	r3, [r0, #0]
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   b4b92:	4b04      	ldr	r3, [pc, #16]	; (b4ba4 <_ZN8particle3ble13WiringBleLockC1Ev+0x18>)
    WiringBleLock() :
   b4b94:	4604      	mov	r4, r0
   b4b96:	6818      	ldr	r0, [r3, #0]
   b4b98:	f7ff fd5a 	bl	b4650 <os_mutex_recursive_lock>
        locked_ = true;
   b4b9c:	2301      	movs	r3, #1
   b4b9e:	7023      	strb	r3, [r4, #0]
    }
   b4ba0:	4620      	mov	r0, r4
   b4ba2:	bd10      	pop	{r4, pc}
   b4ba4:	2003e664 	.word	0x2003e664

000b4ba8 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   b4ba8:	b510      	push	{r4, lr}
        if (locked_) {
   b4baa:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   b4bac:	4604      	mov	r4, r0
        if (locked_) {
   b4bae:	b11b      	cbz	r3, b4bb8 <_ZN8particle3ble13WiringBleLockD1Ev+0x10>
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   b4bb0:	4b02      	ldr	r3, [pc, #8]	; (b4bbc <_ZN8particle3ble13WiringBleLockD1Ev+0x14>)
   b4bb2:	6818      	ldr	r0, [r3, #0]
   b4bb4:	f7ff fd54 	bl	b4660 <os_mutex_recursive_unlock>
    }
   b4bb8:	4620      	mov	r0, r4
   b4bba:	bd10      	pop	{r4, pc}
   b4bbc:	2003e664 	.word	0x2003e664

000b4bc0 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   b4bc0:	b082      	sub	sp, #8
   b4bc2:	4603      	mov	r3, r0
    address_ = addr;
   b4bc4:	6808      	ldr	r0, [r1, #0]
   b4bc6:	6849      	ldr	r1, [r1, #4]
   b4bc8:	466a      	mov	r2, sp
   b4bca:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   b4bcc:	466a      	mov	r2, sp
   b4bce:	ca03      	ldmia	r2!, {r0, r1}
   b4bd0:	6018      	str	r0, [r3, #0]
}
   b4bd2:	4618      	mov	r0, r3
    address_ = addr.address_;
   b4bd4:	6059      	str	r1, [r3, #4]
}
   b4bd6:	b002      	add	sp, #8
   b4bd8:	4770      	bx	lr

000b4bda <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   b4bda:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   b4bdc:	7982      	ldrb	r2, [r0, #6]
   b4bde:	798b      	ldrb	r3, [r1, #6]
   b4be0:	429a      	cmp	r2, r3
   b4be2:	d106      	bne.n	b4bf2 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   b4be4:	2206      	movs	r2, #6
   b4be6:	f001 fd3d 	bl	b6664 <memcmp>
   b4bea:	fab0 f080 	clz	r0, r0
   b4bee:	0940      	lsrs	r0, r0, #5
}
   b4bf0:	bd08      	pop	{r3, pc}
    return false;
   b4bf2:	2000      	movs	r0, #0
   b4bf4:	e7fc      	b.n	b4bf0 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000b4bf6 <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   b4bf6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   b4bfa:	6003      	str	r3, [r0, #0]
   b4bfc:	8083      	strh	r3, [r0, #4]
}
   b4bfe:	2000      	movs	r0, #0
   b4c00:	4770      	bx	lr

000b4c02 <_ZN8particle10BleAddressC1Ev>:
BleAddress::BleAddress()
   b4c02:	b508      	push	{r3, lr}
   b4c04:	4602      	mov	r2, r0
        : address_{} {
   b4c06:	2100      	movs	r1, #0
   b4c08:	6001      	str	r1, [r0, #0]
   b4c0a:	6041      	str	r1, [r0, #4]
    clear();
   b4c0c:	f7ff fff3 	bl	b4bf6 <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   b4c10:	7191      	strb	r1, [r2, #6]
}
   b4c12:	4610      	mov	r0, r2
   b4c14:	bd08      	pop	{r3, pc}
	...

000b4c18 <_ZN8particle7BleUuidC1Ev>:
BleUuid::BleUuid()
   b4c18:	b510      	push	{r4, lr}
        : type_(BleUuidType::LONG) {
   b4c1a:	2301      	movs	r3, #1
   b4c1c:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b4c1e:	4b05      	ldr	r3, [pc, #20]	; (b4c34 <_ZN8particle7BleUuidC1Ev+0x1c>)
   b4c20:	4602      	mov	r2, r0
   b4c22:	f103 0110 	add.w	r1, r3, #16
   b4c26:	f853 4b04 	ldr.w	r4, [r3], #4
   b4c2a:	f842 4b04 	str.w	r4, [r2], #4
   b4c2e:	428b      	cmp	r3, r1
   b4c30:	d1f9      	bne.n	b4c26 <_ZN8particle7BleUuidC1Ev+0xe>
}
   b4c32:	bd10      	pop	{r4, pc}
   b4c34:	000b6ab6 	.word	0x000b6ab6

000b4c38 <_ZN8particle7BleUuidC1ERKS0_>:
BleUuid::BleUuid(const BleUuid& uuid)
   b4c38:	b510      	push	{r4, lr}
        : type_(uuid.type_) {
   b4c3a:	690b      	ldr	r3, [r1, #16]
   b4c3c:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
   b4c3e:	f101 0210 	add.w	r2, r1, #16
   b4c42:	4603      	mov	r3, r0
   b4c44:	f851 4b04 	ldr.w	r4, [r1], #4
   b4c48:	f843 4b04 	str.w	r4, [r3], #4
   b4c4c:	4291      	cmp	r1, r2
   b4c4e:	d1f9      	bne.n	b4c44 <_ZN8particle7BleUuidC1ERKS0_+0xc>
}
   b4c50:	bd10      	pop	{r4, pc}

000b4c52 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b4c52:	b510      	push	{r4, lr}
    if (uuid128) {
   b4c54:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   b4c56:	4604      	mov	r4, r0
    if (uuid128) {
   b4c58:	b1b1      	cbz	r1, b4c88 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   b4c5a:	2a01      	cmp	r2, #1
   b4c5c:	f101 0210 	add.w	r2, r1, #16
   b4c60:	d10a      	bne.n	b4c78 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   b4c62:	4601      	mov	r1, r0
   b4c64:	f853 0b04 	ldr.w	r0, [r3], #4
   b4c68:	f841 0b04 	str.w	r0, [r1], #4
   b4c6c:	4293      	cmp	r3, r2
   b4c6e:	d1f9      	bne.n	b4c64 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   b4c70:	2301      	movs	r3, #1
   b4c72:	6123      	str	r3, [r4, #16]
}
   b4c74:	4620      	mov	r0, r4
   b4c76:	bd10      	pop	{r4, pc}
   b4c78:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   b4c7a:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   b4c7e:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   b4c82:	429a      	cmp	r2, r3
   b4c84:	d1f9      	bne.n	b4c7a <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   b4c86:	e7f3      	b.n	b4c70 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   b4c88:	2210      	movs	r2, #16
   b4c8a:	f001 fd23 	bl	b66d4 <memset>
   b4c8e:	e7f1      	b.n	b4c74 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000b4c90 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   b4c90:	b538      	push	{r3, r4, r5, lr}
   b4c92:	4604      	mov	r4, r0
   b4c94:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   b4c96:	461a      	mov	r2, r3
   b4c98:	f7ff ffdb 	bl	b4c52 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   b4c9c:	81a5      	strh	r5, [r4, #12]
}
   b4c9e:	4620      	mov	r0, r4
   b4ca0:	bd38      	pop	{r3, r4, r5, pc}
	...

000b4ca4 <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   b4ca4:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   b4ca6:	6902      	ldr	r2, [r0, #16]
   b4ca8:	b922      	cbnz	r2, b4cb4 <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   b4caa:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b4cac:	3800      	subs	r0, #0
   b4cae:	bf18      	it	ne
   b4cb0:	2001      	movne	r0, #1
}
   b4cb2:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b4cb4:	4902      	ldr	r1, [pc, #8]	; (b4cc0 <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   b4cb6:	2210      	movs	r2, #16
   b4cb8:	f001 fcd4 	bl	b6664 <memcmp>
   b4cbc:	e7f6      	b.n	b4cac <_ZNK8particle7BleUuid7isValidEv+0x8>
   b4cbe:	bf00      	nop
   b4cc0:	000b6ad6 	.word	0x000b6ad6

000b4cc4 <_ZNK8particle7BleUuid4typeEv>:
}
   b4cc4:	6900      	ldr	r0, [r0, #16]
   b4cc6:	4770      	bx	lr

000b4cc8 <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   b4cc8:	b538      	push	{r3, r4, r5, lr}
   b4cca:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   b4ccc:	2214      	movs	r2, #20
   b4cce:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   b4cd0:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   b4cd2:	f001 fcff 	bl	b66d4 <memset>
    if (type_ == BleUuidType::SHORT) {
   b4cd6:	6923      	ldr	r3, [r4, #16]
   b4cd8:	b91b      	cbnz	r3, b4ce2 <_ZN8particle7BleUuid7halUUIDEv+0x1a>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   b4cda:	89a3      	ldrh	r3, [r4, #12]
   b4cdc:	802b      	strh	r3, [r5, #0]
}
   b4cde:	4628      	mov	r0, r5
   b4ce0:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   b4ce2:	2301      	movs	r3, #1
   b4ce4:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   b4ce6:	4621      	mov	r1, r4
   b4ce8:	462b      	mov	r3, r5
   b4cea:	f104 0210 	add.w	r2, r4, #16
   b4cee:	f851 0b04 	ldr.w	r0, [r1], #4
   b4cf2:	f843 0b04 	str.w	r0, [r3], #4
   b4cf6:	4291      	cmp	r1, r2
   b4cf8:	d1f9      	bne.n	b4cee <_ZN8particle7BleUuid7halUUIDEv+0x26>
   b4cfa:	e7f0      	b.n	b4cde <_ZN8particle7BleUuid7halUUIDEv+0x16>

000b4cfc <_ZNK8particle7BleUuid7shortedEv>:
}
   b4cfc:	8980      	ldrh	r0, [r0, #12]
   b4cfe:	4770      	bx	lr

000b4d00 <_ZNK8particle7BleUuid8rawBytesEv>:
}
   b4d00:	4770      	bx	lr

000b4d02 <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   b4d02:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b4d04:	6902      	ldr	r2, [r0, #16]
   b4d06:	690b      	ldr	r3, [r1, #16]
   b4d08:	429a      	cmp	r2, r3
   b4d0a:	d106      	bne.n	b4d1a <_ZNK8particle7BleUuideqERKS0_+0x18>
   b4d0c:	2210      	movs	r2, #16
   b4d0e:	f001 fca9 	bl	b6664 <memcmp>
   b4d12:	fab0 f080 	clz	r0, r0
   b4d16:	0940      	lsrs	r0, r0, #5
}
   b4d18:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   b4d1a:	2000      	movs	r0, #0
   b4d1c:	e7fc      	b.n	b4d18 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000b4d20 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   b4d20:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   b4d22:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   b4d26:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b4d28:	4b34      	ldr	r3, [pc, #208]	; (b4dfc <_ZN8particle7BleUuid9constructEPKc+0xdc>)
void BleUuid::construct(const char* uuid) {
   b4d2a:	460c      	mov	r4, r1
   b4d2c:	4606      	mov	r6, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   b4d2e:	4602      	mov	r2, r0
   b4d30:	f103 0110 	add.w	r1, r3, #16
   b4d34:	f853 0b04 	ldr.w	r0, [r3], #4
   b4d38:	f842 0b04 	str.w	r0, [r2], #4
   b4d3c:	428b      	cmp	r3, r1
   b4d3e:	d1f9      	bne.n	b4d34 <_ZN8particle7BleUuid9constructEPKc+0x14>
    if (uuid == nullptr) {
   b4d40:	b344      	cbz	r4, b4d94 <_ZN8particle7BleUuid9constructEPKc+0x74>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   b4d42:	2124      	movs	r1, #36	; 0x24
   b4d44:	4620      	mov	r0, r4
   b4d46:	f001 fd0d 	bl	b6764 <strnlen>
   b4d4a:	2804      	cmp	r0, #4
   b4d4c:	f04f 0500 	mov.w	r5, #0
   b4d50:	d123      	bne.n	b4d9a <_ZN8particle7BleUuid9constructEPKc+0x7a>
        char buf[2] = {};
   b4d52:	f8ad 5004 	strh.w	r5, [sp, #4]
   b4d56:	af01      	add	r7, sp, #4
   b4d58:	1ca5      	adds	r5, r4, #2
   b4d5a:	3406      	adds	r4, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   b4d5c:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   b4d60:	f7ff fefe 	bl	b4b60 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   b4d64:	f1b0 0800 	subs.w	r8, r0, #0
   b4d68:	db12      	blt.n	b4d90 <_ZN8particle7BleUuid9constructEPKc+0x70>
            break;
        }
        const int l = hexToNibble(*src++);
   b4d6a:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   b4d6e:	f7ff fef7 	bl	b4b60 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   b4d72:	2800      	cmp	r0, #0
   b4d74:	db0c      	blt.n	b4d90 <_ZN8particle7BleUuid9constructEPKc+0x70>
    while (n < size) {
   b4d76:	3502      	adds	r5, #2
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b4d78:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   b4d7c:	42a5      	cmp	r5, r4
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   b4d7e:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   b4d82:	d1eb      	bne.n	b4d5c <_ZN8particle7BleUuid9constructEPKc+0x3c>
            uuid128_[UUID16_LO] = buf[1];
   b4d84:	f89d 3005 	ldrb.w	r3, [sp, #5]
   b4d88:	7333      	strb	r3, [r6, #12]
            uuid128_[UUID16_HI] = buf[0];
   b4d8a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b4d8e:	7373      	strb	r3, [r6, #13]
        type_ = BleUuidType::SHORT;
   b4d90:	2300      	movs	r3, #0
   b4d92:	6133      	str	r3, [r6, #16]
}
   b4d94:	b002      	add	sp, #8
   b4d96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   b4d9a:	f04f 0810 	mov.w	r8, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b4d9e:	2124      	movs	r1, #36	; 0x24
   b4da0:	4620      	mov	r0, r4
   b4da2:	f001 fcdf 	bl	b6764 <strnlen>
   b4da6:	42a8      	cmp	r0, r5
   b4da8:	d807      	bhi.n	b4dba <_ZN8particle7BleUuid9constructEPKc+0x9a>
        uuid128_[len - 1] = 0x00;
   b4daa:	4642      	mov	r2, r8
   b4dac:	2100      	movs	r1, #0
   b4dae:	4630      	mov	r0, r6
}
   b4db0:	b002      	add	sp, #8
   b4db2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        uuid128_[len - 1] = 0x00;
   b4db6:	f001 bc8d 	b.w	b66d4 <memset>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b4dba:	f1b8 0f00 	cmp.w	r8, #0
   b4dbe:	d0e9      	beq.n	b4d94 <_ZN8particle7BleUuid9constructEPKc+0x74>
        int8_t hi = hexToNibble(uuid[i]);
   b4dc0:	5d60      	ldrb	r0, [r4, r5]
   b4dc2:	f7ff fecd 	bl	b4b60 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   b4dc6:	0603      	lsls	r3, r0, #24
   b4dc8:	d415      	bmi.n	b4df6 <_ZN8particle7BleUuid9constructEPKc+0xd6>
            uuid128_[len - 1] = hi << 4;
   b4dca:	0100      	lsls	r0, r0, #4
   b4dcc:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   b4dd0:	b2c7      	uxtb	r7, r0
   b4dd2:	f806 7008 	strb.w	r7, [r6, r8]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   b4dd6:	2124      	movs	r1, #36	; 0x24
   b4dd8:	4620      	mov	r0, r4
   b4dda:	f001 fcc3 	bl	b6764 <strnlen>
   b4dde:	3501      	adds	r5, #1
   b4de0:	42a8      	cmp	r0, r5
   b4de2:	d908      	bls.n	b4df6 <_ZN8particle7BleUuid9constructEPKc+0xd6>
                int8_t lo = hexToNibble(uuid[i]);
   b4de4:	5d60      	ldrb	r0, [r4, r5]
   b4de6:	f7ff febb 	bl	b4b60 <_ZN8particle11hexToNibbleEc>
   b4dea:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   b4dec:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   b4dee:	bfa4      	itt	ge
   b4df0:	4338      	orrge	r0, r7
   b4df2:	f806 0008 	strbge.w	r0, [r6, r8]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   b4df6:	3501      	adds	r5, #1
   b4df8:	e7d1      	b.n	b4d9e <_ZN8particle7BleUuid9constructEPKc+0x7e>
   b4dfa:	bf00      	nop
   b4dfc:	000b6ab6 	.word	0x000b6ab6

000b4e00 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   b4e00:	b513      	push	{r0, r1, r4, lr}
   b4e02:	4604      	mov	r4, r0
   b4e04:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   b4e06:	f7ff ff07 	bl	b4c18 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   b4e0a:	4620      	mov	r0, r4
   b4e0c:	9901      	ldr	r1, [sp, #4]
   b4e0e:	f7ff ff87 	bl	b4d20 <_ZN8particle7BleUuid9constructEPKc>
}
   b4e12:	4620      	mov	r0, r4
   b4e14:	b002      	add	sp, #8
   b4e16:	bd10      	pop	{r4, pc}

000b4e18 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   b4e18:	b430      	push	{r4, r5}
   b4e1a:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   b4e1e:	b11a      	cbz	r2, b4e28 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0x10>
   b4e20:	9502      	str	r5, [sp, #8]
}
   b4e22:	bc30      	pop	{r4, r5}
   b4e24:	f7ff bdfb 	b.w	b4a1e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>
        return selfLen_;
   b4e28:	6a00      	ldr	r0, [r0, #32]
}
   b4e2a:	bc30      	pop	{r4, r5}
   b4e2c:	4770      	bx	lr

000b4e2e <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   b4e2e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   b4e30:	4604      	mov	r4, r0
          selfLen_(0) {
   b4e32:	221f      	movs	r2, #31
   b4e34:	2100      	movs	r1, #0
   b4e36:	f001 fc4d 	bl	b66d4 <memset>
   b4e3a:	2300      	movs	r3, #0
   b4e3c:	6223      	str	r3, [r4, #32]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b4e3e:	9300      	str	r3, [sp, #0]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b4e40:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b4e42:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   b4e44:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   b4e48:	4619      	mov	r1, r3
   b4e4a:	f10d 020f 	add.w	r2, sp, #15
   b4e4e:	4620      	mov	r0, r4
   b4e50:	f7ff ffe2 	bl	b4e18 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   b4e54:	4620      	mov	r0, r4
   b4e56:	b004      	add	sp, #16
   b4e58:	bd10      	pop	{r4, pc}

000b4e5a <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b4e5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (offset == nullptr) {
   b4e5c:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   b4e5e:	460e      	mov	r6, r1
   b4e60:	ab01      	add	r3, sp, #4
   b4e62:	6a01      	ldr	r1, [r0, #32]
   b4e64:	4604      	mov	r4, r0
   b4e66:	f7ff fdc5 	bl	b49f4 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   b4e6a:	4605      	mov	r5, r0
   b4e6c:	b178      	cbz	r0, b4e8e <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x34>
        size_t moveLen = selfLen_ - offset - len;
   b4e6e:	9801      	ldr	r0, [sp, #4]
   b4e70:	6a22      	ldr	r2, [r4, #32]
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   b4e72:	1941      	adds	r1, r0, r5
        size_t moveLen = selfLen_ - offset - len;
   b4e74:	1a12      	subs	r2, r2, r0
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   b4e76:	4421      	add	r1, r4
   b4e78:	1b52      	subs	r2, r2, r5
   b4e7a:	4420      	add	r0, r4
   b4e7c:	f001 fc02 	bl	b6684 <memcpy>
        selfLen_ -= len;
   b4e80:	6a20      	ldr	r0, [r4, #32]
   b4e82:	1b40      	subs	r0, r0, r5
   b4e84:	6220      	str	r0, [r4, #32]
        remove(type);
   b4e86:	4631      	mov	r1, r6
   b4e88:	4620      	mov	r0, r4
   b4e8a:	f7ff ffe6 	bl	b4e5a <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   b4e8e:	b002      	add	sp, #8
   b4e90:	bd70      	pop	{r4, r5, r6, pc}
	...

000b4e94 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   b4e94:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   b4e96:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b4e9a:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   b4e9c:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   b4e9e:	8043      	strh	r3, [r0, #2]
   b4ea0:	220e      	movs	r2, #14
   b4ea2:	4629      	mov	r1, r5
   b4ea4:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   b4ea6:	7105      	strb	r5, [r0, #4]
   b4ea8:	3006      	adds	r0, #6
   b4eaa:	f001 fc13 	bl	b66d4 <memset>
   b4eae:	f104 0014 	add.w	r0, r4, #20
   b4eb2:	f7ff feb1 	bl	b4c18 <_ZN8particle7BleUuidC1Ev>
   b4eb6:	f104 0028 	add.w	r0, r4, #40	; 0x28
   b4eba:	f7ff fead 	bl	b4c18 <_ZN8particle7BleUuidC1Ev>
   b4ebe:	4904      	ldr	r1, [pc, #16]	; (b4ed0 <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   b4ec0:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b4ec4:	f001 f879 	bl	b5fba <_ZN6StringC1EPK19__FlashStringHelper>
    _Function_base() : _M_manager(nullptr) { }
   b4ec8:	6565      	str	r5, [r4, #84]	; 0x54
    }
   b4eca:	4620      	mov	r0, r4
   b4ecc:	bd38      	pop	{r3, r4, r5, pc}
   b4ece:	bf00      	nop
   b4ed0:	000b699e 	.word	0x000b699e

000b4ed4 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   b4ed4:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   b4ed6:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   b4eda:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   b4ede:	4293      	cmp	r3, r2
   b4ee0:	4618      	mov	r0, r3
   b4ee2:	d006      	beq.n	b4ef2 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   b4ee4:	6804      	ldr	r4, [r0, #0]
   b4ee6:	8824      	ldrh	r4, [r4, #0]
   b4ee8:	428c      	cmp	r4, r1
   b4eea:	f103 0308 	add.w	r3, r3, #8
   b4eee:	d1f6      	bne.n	b4ede <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   b4ef0:	bd10      	pop	{r4, pc}
        return nullptr;
   b4ef2:	2000      	movs	r0, #0
   b4ef4:	e7fc      	b.n	b4ef0 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000b4ef8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE>:
    len = std::min(len, desc.length());
    memcpy(buf, desc.c_str(), len);
    return len;
}

ssize_t BleCharacteristic::setValue(const uint8_t* buf, size_t len, BleTxRxType type) {
   b4ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
   b4efa:	4606      	mov	r6, r0
   b4efc:	b085      	sub	sp, #20
   b4efe:	461f      	mov	r7, r3
    if (buf == nullptr || len == 0) {
   b4f00:	460d      	mov	r5, r1
   b4f02:	2900      	cmp	r1, #0
   b4f04:	d050      	beq.n	b4fa8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
   b4f06:	2a00      	cmp	r2, #0
   b4f08:	d04e      	beq.n	b4fa8 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb0>
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b4f0a:	6804      	ldr	r4, [r0, #0]
        return SYSTEM_ERROR_INVALID_ARGUMENT;
    }
    len = std::min(len, (size_t)BLE_MAX_ATTR_VALUE_PACKET_SIZE);
    if (impl()->isLocal()) {
   b4f0c:	7823      	ldrb	r3, [r4, #0]
   b4f0e:	2af4      	cmp	r2, #244	; 0xf4
   b4f10:	bf28      	it	cs
   b4f12:	22f4      	movcs	r2, #244	; 0xf4
   b4f14:	b343      	cbz	r3, b4f68 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x70>
    return (value_ > 0);
}

template<typename T>
inline bool particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::isSet(const EnumFlags<T>& flags) const {
    return ((value_ & flags.value_) == flags.value_);
   b4f16:	7923      	ldrb	r3, [r4, #4]
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
        // Updates the local characteristic value for peer to read.
        if (impl()->properties().isSet(BleCharacteristicProperty::READ)) {
   b4f18:	0798      	lsls	r0, r3, #30
   b4f1a:	d509      	bpl.n	b4f30 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x38>
            ret = CHECK(hal_ble_gatt_server_set_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr));
   b4f1c:	89a0      	ldrh	r0, [r4, #12]
   b4f1e:	9203      	str	r2, [sp, #12]
   b4f20:	2300      	movs	r3, #0
   b4f22:	f7ff fb3f 	bl	b45a4 <hal_ble_gatt_server_set_characteristic_value>
   b4f26:	2800      	cmp	r0, #0
   b4f28:	9a03      	ldr	r2, [sp, #12]
   b4f2a:	da03      	bge.n	b4f34 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x3c>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
        }
        return SYSTEM_ERROR_NOT_SUPPORTED;
    }
    return SYSTEM_ERROR_INVALID_STATE;
}
   b4f2c:	b005      	add	sp, #20
   b4f2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        int ret = SYSTEM_ERROR_NOT_SUPPORTED;
   b4f30:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b4f34:	6834      	ldr	r4, [r6, #0]
   b4f36:	7923      	ldrb	r3, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::NOTIFY) && type != BleTxRxType::ACK) {
   b4f38:	06d9      	lsls	r1, r3, #27
   b4f3a:	d509      	bpl.n	b4f50 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
   b4f3c:	2f01      	cmp	r7, #1
   b4f3e:	d007      	beq.n	b4f50 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x58>
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b4f40:	89a0      	ldrh	r0, [r4, #12]
   b4f42:	2300      	movs	r3, #0
   b4f44:	4629      	mov	r1, r5
}
   b4f46:	b005      	add	sp, #20
   b4f48:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_notify_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b4f4c:	f7ff bb5c 	b.w	b4608 <hal_ble_gatt_server_notify_characteristic_value>
        if (impl()->properties().isSet(BleCharacteristicProperty::INDICATE) && type != BleTxRxType::NACK) {
   b4f50:	069b      	lsls	r3, r3, #26
   b4f52:	d5eb      	bpl.n	b4f2c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b4f54:	2f02      	cmp	r7, #2
   b4f56:	d0e9      	beq.n	b4f2c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b4f58:	89a0      	ldrh	r0, [r4, #12]
   b4f5a:	2300      	movs	r3, #0
   b4f5c:	4629      	mov	r1, r5
}
   b4f5e:	b005      	add	sp, #20
   b4f60:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            return hal_ble_gatt_server_indicate_characteristic_value(impl()->attrHandles().value_handle, buf, len, nullptr);
   b4f64:	f7ff bb5a 	b.w	b461c <hal_ble_gatt_server_indicate_characteristic_value>
    if (impl()->connHandle() != BLE_INVALID_CONN_HANDLE) {
   b4f68:	8860      	ldrh	r0, [r4, #2]
   b4f6a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b4f6e:	4288      	cmp	r0, r1
   b4f70:	d01c      	beq.n	b4fac <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xb4>
   b4f72:	7921      	ldrb	r1, [r4, #4]
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE_WO_RSP) && type != BleTxRxType::ACK) {
   b4f74:	074e      	lsls	r6, r1, #29
   b4f76:	d501      	bpl.n	b4f7c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x84>
   b4f78:	2f01      	cmp	r7, #1
   b4f7a:	d104      	bne.n	b4f86 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x8e>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b4f7c:	070b      	lsls	r3, r1, #28
   b4f7e:	d409      	bmi.n	b4f94 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x9c>
        return SYSTEM_ERROR_NOT_SUPPORTED;
   b4f80:	f06f 0077 	mvn.w	r0, #119	; 0x77
   b4f84:	e7d2      	b.n	b4f2c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
            return hal_ble_gatt_client_write_without_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b4f86:	89a1      	ldrh	r1, [r4, #12]
   b4f88:	9300      	str	r3, [sp, #0]
   b4f8a:	4613      	mov	r3, r2
   b4f8c:	462a      	mov	r2, r5
   b4f8e:	f7ff fb1d 	bl	b45cc <hal_ble_gatt_client_write_without_response>
   b4f92:	e7cb      	b.n	b4f2c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        if (impl()->properties().isSet(BleCharacteristicProperty::WRITE) && type != BleTxRxType::NACK) {
   b4f94:	2f02      	cmp	r7, #2
   b4f96:	d0f3      	beq.n	b4f80 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x88>
            return hal_ble_gatt_client_write_with_response(impl()->connHandle(), impl()->attrHandles().value_handle, buf, len, nullptr);
   b4f98:	2300      	movs	r3, #0
   b4f9a:	89a1      	ldrh	r1, [r4, #12]
   b4f9c:	9300      	str	r3, [sp, #0]
   b4f9e:	4613      	mov	r3, r2
   b4fa0:	462a      	mov	r2, r5
   b4fa2:	f7ff fb09 	bl	b45b8 <hal_ble_gatt_client_write_with_response>
   b4fa6:	e7c1      	b.n	b4f2c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
        return SYSTEM_ERROR_INVALID_ARGUMENT;
   b4fa8:	4802      	ldr	r0, [pc, #8]	; (b4fb4 <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0xbc>)
   b4faa:	e7bf      	b.n	b4f2c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
    return SYSTEM_ERROR_INVALID_STATE;
   b4fac:	f06f 00d1 	mvn.w	r0, #209	; 0xd1
   b4fb0:	e7bc      	b.n	b4f2c <_ZN8particle17BleCharacteristic8setValueEPKhjNS_11BleTxRxTypeE+0x34>
   b4fb2:	bf00      	nop
   b4fb4:	fffffef2 	.word	0xfffffef2

000b4fb8 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   b4fb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b4fbc:	2600      	movs	r6, #0
   b4fbe:	6006      	str	r6, [r0, #0]
   b4fc0:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   b4fc2:	2028      	movs	r0, #40	; 0x28
   b4fc4:	460c      	mov	r4, r1
   b4fc6:	f7ff f864 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b4fca:	1e05      	subs	r5, r0, #0
   b4fcc:	f105 080c 	add.w	r8, r5, #12
   b4fd0:	d00f      	beq.n	b4ff2 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   b4fd2:	2301      	movs	r3, #1
   b4fd4:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   b4fd8:	4b08      	ldr	r3, [pc, #32]	; (b4ffc <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   b4fda:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   b4fdc:	4640      	mov	r0, r8
   b4fde:	f7ff fe1b 	bl	b4c18 <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   b4fe2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   b4fe4:	622e      	str	r6, [r5, #32]
   b4fe6:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   b4fea:	4646      	mov	r6, r8
   b4fec:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   b4fee:	6823      	ldr	r3, [r4, #0]
   b4ff0:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   b4ff2:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b4ff6:	4638      	mov	r0, r7
   b4ff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b4ffc:	000b6a78 	.word	0x000b6a78

000b5000 <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   b5000:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b5002:	2500      	movs	r5, #0
   b5004:	6005      	str	r5, [r0, #0]
   b5006:	4606      	mov	r6, r0
   b5008:	2030      	movs	r0, #48	; 0x30
   b500a:	f7ff f842 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b500e:	4604      	mov	r4, r0
   b5010:	b188      	cbz	r0, b5036 <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   b5012:	2301      	movs	r3, #1
   b5014:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   b5018:	4b09      	ldr	r3, [pc, #36]	; (b5040 <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   b501a:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   b501c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b5020:	8183      	strh	r3, [r0, #12]
   b5022:	300e      	adds	r0, #14
   b5024:	f7ff fded 	bl	b4c02 <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   b5028:	e9c4 5506 	strd	r5, r5, [r4, #24]
   b502c:	e9c4 5508 	strd	r5, r5, [r4, #32]
   b5030:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   b5034:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   b5036:	6074      	str	r4, [r6, #4]
   b5038:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   b503a:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   b503c:	4630      	mov	r0, r6
   b503e:	bd70      	pop	{r4, r5, r6, pc}
   b5040:	000b6a94 	.word	0x000b6a94

000b5044 <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   b5044:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5046:	460d      	mov	r5, r1
   b5048:	4604      	mov	r4, r0
    WiringBleLock lk;
   b504a:	a801      	add	r0, sp, #4
   b504c:	f7ff fd9e 	bl	b4b8c <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b5050:	682a      	ldr	r2, [r5, #0]
    address_ = addr.address_;
   b5052:	f8d2 3002 	ldr.w	r3, [r2, #2]
   b5056:	6023      	str	r3, [r4, #0]
   b5058:	f8d2 3006 	ldr.w	r3, [r2, #6]
   b505c:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   b505e:	a801      	add	r0, sp, #4
   b5060:	f7ff fda2 	bl	b4ba8 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   b5064:	4620      	mov	r0, r4
   b5066:	b003      	add	sp, #12
   b5068:	bd30      	pop	{r4, r5, pc}

000b506a <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   b506a:	b530      	push	{r4, r5, lr}
   b506c:	4605      	mov	r5, r0
   b506e:	b087      	sub	sp, #28
   b5070:	460c      	mov	r4, r1
    WiringBleLock lk;
   b5072:	a801      	add	r0, sp, #4
   b5074:	f7ff fd8a 	bl	b4b8c <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   b5078:	682a      	ldr	r2, [r5, #0]
   b507a:	6823      	ldr	r3, [r4, #0]
   b507c:	8812      	ldrh	r2, [r2, #0]
   b507e:	881b      	ldrh	r3, [r3, #0]
   b5080:	429a      	cmp	r2, r3
   b5082:	d10d      	bne.n	b50a0 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   b5084:	4629      	mov	r1, r5
   b5086:	a802      	add	r0, sp, #8
   b5088:	f7ff ffdc 	bl	b5044 <_ZNK8particle13BlePeerDevice7addressEv>
   b508c:	4621      	mov	r1, r4
   b508e:	a804      	add	r0, sp, #16
   b5090:	f7ff ffd8 	bl	b5044 <_ZNK8particle13BlePeerDevice7addressEv>
   b5094:	a904      	add	r1, sp, #16
   b5096:	a802      	add	r0, sp, #8
   b5098:	f7ff fd9f 	bl	b4bda <_ZNK8particle10BleAddresseqERKS0_>
   b509c:	4604      	mov	r4, r0
   b509e:	b900      	cbnz	r0, b50a2 <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   b50a0:	2400      	movs	r4, #0
    WiringBleLock lk;
   b50a2:	a801      	add	r0, sp, #4
   b50a4:	f7ff fd80 	bl	b4ba8 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   b50a8:	4620      	mov	r0, r4
   b50aa:	b007      	add	sp, #28
   b50ac:	bd30      	pop	{r4, r5, pc}
	...

000b50b0 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   b50b0:	b510      	push	{r4, lr}
   b50b2:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   b50b4:	2054      	movs	r0, #84	; 0x54
   b50b6:	f7fe ffec 	bl	b4092 <_Znwj>
   b50ba:	4601      	mov	r1, r0
   b50bc:	b160      	cbz	r0, b50d8 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   b50be:	2300      	movs	r3, #0
   b50c0:	e9c0 3300 	strd	r3, r3, [r0]
   b50c4:	e9c0 3302 	strd	r3, r3, [r0, #8]
   b50c8:	e9c0 3304 	strd	r3, r3, [r0, #16]
   b50cc:	e9c0 3306 	strd	r3, r3, [r0, #24]
   b50d0:	6203      	str	r3, [r0, #32]
   b50d2:	62c3      	str	r3, [r0, #44]	; 0x2c
   b50d4:	63c3      	str	r3, [r0, #60]	; 0x3c
   b50d6:	64c3      	str	r3, [r0, #76]	; 0x4c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   b50d8:	6021      	str	r1, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   b50da:	b919      	cbnz	r1, b50e4 <_ZN8particle14BleLocalDeviceC1Ev+0x34>
        SPARK_ASSERT(false);
   b50dc:	4a09      	ldr	r2, [pc, #36]	; (b5104 <_ZN8particle14BleLocalDeviceC1Ev+0x54>)
   b50de:	200a      	movs	r0, #10
   b50e0:	f7ff fb5e 	bl	b47a0 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   b50e4:	2000      	movs	r0, #0
   b50e6:	f7ff fa21 	bl	b452c <hal_ble_stack_init>
   b50ea:	b120      	cbz	r0, b50f6 <_ZN8particle14BleLocalDeviceC1Ev+0x46>
   b50ec:	4a05      	ldr	r2, [pc, #20]	; (b5104 <_ZN8particle14BleLocalDeviceC1Ev+0x54>)
   b50ee:	2100      	movs	r1, #0
   b50f0:	200a      	movs	r0, #10
   b50f2:	f7ff fb55 	bl	b47a0 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   b50f6:	6821      	ldr	r1, [r4, #0]
   b50f8:	4803      	ldr	r0, [pc, #12]	; (b5108 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   b50fa:	2200      	movs	r2, #0
   b50fc:	f7ff fa7a 	bl	b45f4 <hal_ble_set_callback_on_periph_link_events>
}
   b5100:	4620      	mov	r0, r4
   b5102:	bd10      	pop	{r4, pc}
   b5104:	000b4681 	.word	0x000b4681
   b5108:	000b54ad 	.word	0x000b54ad

000b510c <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   b510c:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   b510e:	4c0b      	ldr	r4, [pc, #44]	; (b513c <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   b5110:	7823      	ldrb	r3, [r4, #0]
   b5112:	f3bf 8f5b 	dmb	ish
   b5116:	07db      	lsls	r3, r3, #31
   b5118:	d40e      	bmi.n	b5138 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>
   b511a:	4620      	mov	r0, r4
   b511c:	f7fe ffbd 	bl	b409a <__cxa_guard_acquire>
   b5120:	b150      	cbz	r0, b5138 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>
   b5122:	4807      	ldr	r0, [pc, #28]	; (b5140 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b5124:	f7ff ffc4 	bl	b50b0 <_ZN8particle14BleLocalDeviceC1Ev>
   b5128:	4620      	mov	r0, r4
   b512a:	f7fe ffbb 	bl	b40a4 <__cxa_guard_release>
   b512e:	4a05      	ldr	r2, [pc, #20]	; (b5144 <_ZN8particle14BleLocalDevice11getInstanceEv+0x38>)
   b5130:	4905      	ldr	r1, [pc, #20]	; (b5148 <_ZN8particle14BleLocalDevice11getInstanceEv+0x3c>)
   b5132:	4803      	ldr	r0, [pc, #12]	; (b5140 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b5134:	f001 f96c 	bl	b6410 <__aeabi_atexit>
    return instance;
}
   b5138:	4801      	ldr	r0, [pc, #4]	; (b5140 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   b513a:	bd10      	pop	{r4, pc}
   b513c:	2003e65c 	.word	0x2003e65c
   b5140:	2003e668 	.word	0x2003e668
   b5144:	2003e5f8 	.word	0x2003e5f8
   b5148:	000b5319 	.word	0x000b5319

000b514c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b514c:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   b514e:	6803      	ldr	r3, [r0, #0]
   b5150:	3b09      	subs	r3, #9
   b5152:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   b5154:	b08d      	sub	sp, #52	; 0x34
   b5156:	4604      	mov	r4, r0
   b5158:	460d      	mov	r5, r1
    switch (event->type) {
   b515a:	d811      	bhi.n	b5180 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   b515c:	f7ff ffd6 	bl	b510c <_ZN8particle14BleLocalDevice11getInstanceEv>
   b5160:	88a1      	ldrh	r1, [r4, #4]
   b5162:	6800      	ldr	r0, [r0, #0]
   b5164:	f7ff feb6 	bl	b4ed4 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   b5168:	4603      	mov	r3, r0
   b516a:	b958      	cbnz	r0, b5184 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   b516c:	2220      	movs	r2, #32
   b516e:	e9cd 2004 	strd	r2, r0, [sp, #16]
   b5172:	4a0b      	ldr	r2, [pc, #44]	; (b51a0 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   b5174:	9200      	str	r2, [sp, #0]
   b5176:	490b      	ldr	r1, [pc, #44]	; (b51a4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   b5178:	aa04      	add	r2, sp, #16
   b517a:	2032      	movs	r0, #50	; 0x32
   b517c:	f7ff fb18 	bl	b47b0 <log_message>
}
   b5180:	b00d      	add	sp, #52	; 0x34
   b5182:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   b5184:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   b5186:	2a00      	cmp	r2, #0
   b5188:	d0fa      	beq.n	b5180 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   b518a:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b518e:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   b5192:	e9cd 1203 	strd	r1, r2, [sp, #12]
   b5196:	6dac      	ldr	r4, [r5, #88]	; 0x58
   b5198:	aa04      	add	r2, sp, #16
   b519a:	a903      	add	r1, sp, #12
   b519c:	47a0      	blx	r4
}
   b519e:	e7ef      	b.n	b5180 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   b51a0:	000b6987 	.word	0x000b6987
   b51a4:	000b6960 	.word	0x000b6960

000b51a8 <_ZNK8particle14BleLocalDevice13setDeviceNameEPKc>:

int BleLocalDevice::setDeviceName(const char* name, size_t len) const {
    return hal_ble_gap_set_device_name(name, len, nullptr);
}

int BleLocalDevice::setDeviceName(const char* name) const {
   b51a8:	b510      	push	{r4, lr}
   b51aa:	460c      	mov	r4, r1
    return setDeviceName(name, strnlen(name, BLE_MAX_DEV_NAME_LEN));
   b51ac:	4620      	mov	r0, r4
   b51ae:	2114      	movs	r1, #20
   b51b0:	f001 fad8 	bl	b6764 <strnlen>
    return hal_ble_gap_set_device_name(name, len, nullptr);
   b51b4:	2200      	movs	r2, #0
    return setDeviceName(name, strnlen(name, BLE_MAX_DEV_NAME_LEN));
   b51b6:	4601      	mov	r1, r0
    return hal_ble_gap_set_device_name(name, len, nullptr);
   b51b8:	4620      	mov	r0, r4
}
   b51ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return hal_ble_gap_set_device_name(name, len, nullptr);
   b51be:	f7ff b9bd 	b.w	b453c <hal_ble_gap_set_device_name>

000b51c2 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   b51c2:	4608      	mov	r0, r1
   b51c4:	b911      	cbnz	r1, b51cc <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   b51c6:	460a      	mov	r2, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   b51c8:	f7ff b9c0 	b.w	b454c <hal_ble_gap_set_advertising_data>
   b51cc:	6a09      	ldr	r1, [r1, #32]
   b51ce:	2200      	movs	r2, #0
   b51d0:	e7fa      	b.n	b51c8 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000b51d2 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:

int BleLocalDevice::setAdvertisingData(BleAdvertisingData& advertisingData) const {
    return setAdvertisingData(&advertisingData);
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   b51d2:	b507      	push	{r0, r1, r2, lr}
    if (scanResponse == nullptr) {
   b51d4:	4608      	mov	r0, r1
   b51d6:	b929      	cbnz	r1, b51e4 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   b51d8:	460a      	mov	r2, r1
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
    }
}
   b51da:	b003      	add	sp, #12
   b51dc:	f85d eb04 	ldr.w	lr, [sp], #4
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b51e0:	f7ff b9bc 	b.w	b455c <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   b51e4:	2101      	movs	r1, #1
   b51e6:	9001      	str	r0, [sp, #4]
   b51e8:	f7ff fe37 	bl	b4e5a <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   b51ec:	9801      	ldr	r0, [sp, #4]
   b51ee:	2200      	movs	r2, #0
   b51f0:	6a01      	ldr	r1, [r0, #32]
   b51f2:	e7f2      	b.n	b51da <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x8>

000b51f4 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise() const {
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   b51f4:	b538      	push	{r3, r4, r5, lr}
   b51f6:	4604      	mov	r4, r0
   b51f8:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   b51fa:	f7ff ffe2 	bl	b51c2 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   b51fe:	2800      	cmp	r0, #0
   b5200:	db0a      	blt.n	b5218 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   b5202:	4629      	mov	r1, r5
   b5204:	4620      	mov	r0, r4
   b5206:	f7ff ffe4 	bl	b51d2 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   b520a:	2800      	cmp	r0, #0
   b520c:	db04      	blt.n	b5218 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    return advertise();
}
   b520e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   b5212:	2000      	movs	r0, #0
   b5214:	f7ff b9aa 	b.w	b456c <hal_ble_gap_start_advertising>
}
   b5218:	bd38      	pop	{r3, r4, r5, pc}
	...

000b521c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   b521c:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b521e:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   b5220:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   b5222:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5224:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   b5226:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5228:	f7fe ff33 	bl	b4092 <_Znwj>
   b522c:	b118      	cbz	r0, b5236 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
      _Bind(_Bind&&) = default;
   b522e:	682b      	ldr	r3, [r5, #0]
   b5230:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b5232:	686b      	ldr	r3, [r5, #4]
   b5234:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   b5236:	4b03      	ldr	r3, [pc, #12]	; (b5244 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   b5238:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   b523a:	4b03      	ldr	r3, [pc, #12]	; (b5248 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b523c:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   b523e:	60a3      	str	r3, [r4, #8]
      }
   b5240:	4620      	mov	r0, r4
   b5242:	bd38      	pop	{r3, r4, r5, pc}
   b5244:	000b4ab9 	.word	0x000b4ab9
   b5248:	000b4ad1 	.word	0x000b4ad1

000b524c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   b524c:	680b      	ldr	r3, [r1, #0]
   b524e:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   b5250:	b113      	cbz	r3, b5258 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   b5252:	685a      	ldr	r2, [r3, #4]
   b5254:	3201      	adds	r2, #1
   b5256:	605a      	str	r2, [r3, #4]
      }
   b5258:	4770      	bx	lr

000b525a <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   b525a:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b525c:	f851 3b04 	ldr.w	r3, [r1], #4
   b5260:	4604      	mov	r4, r0
   b5262:	f840 3b04 	str.w	r3, [r0], #4
   b5266:	f7ff fff1 	bl	b524c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   b526a:	6823      	ldr	r3, [r4, #0]
   b526c:	b90b      	cbnz	r3, b5272 <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   b526e:	f7ff fc1b 	bl	b4aa8 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   b5272:	4620      	mov	r0, r4
   b5274:	bd10      	pop	{r4, pc}

000b5276 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b5276:	b510      	push	{r4, lr}
   b5278:	f851 3b04 	ldr.w	r3, [r1], #4
   b527c:	4604      	mov	r4, r0
   b527e:	f840 3b04 	str.w	r3, [r0], #4
   b5282:	f7ff ffe3 	bl	b524c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b5286:	4620      	mov	r0, r4
   b5288:	bd10      	pop	{r4, pc}

000b528a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   b528a:	b510      	push	{r4, lr}
   b528c:	f851 3b04 	ldr.w	r3, [r1], #4
   b5290:	4604      	mov	r4, r0
   b5292:	f840 3b04 	str.w	r3, [r0], #4
   b5296:	f7ff ffd9 	bl	b524c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   b529a:	4620      	mov	r0, r4
   b529c:	bd10      	pop	{r4, pc}

000b529e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   b529e:	b510      	push	{r4, lr}
   b52a0:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   b52a2:	6800      	ldr	r0, [r0, #0]
   b52a4:	b108      	cbz	r0, b52aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0xc>
	  _M_pi->_M_release();
   b52a6:	f7ff fc47 	bl	b4b38 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv>
      }
   b52aa:	4620      	mov	r0, r4
   b52ac:	bd10      	pop	{r4, pc}

000b52ae <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   b52ae:	b510      	push	{r4, lr}
   b52b0:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b52b2:	3004      	adds	r0, #4
   b52b4:	f7ff fff3 	bl	b529e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b52b8:	4620      	mov	r0, r4
   b52ba:	bd10      	pop	{r4, pc}

000b52bc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b52bc:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b52be:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b52c2:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b52c4:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b52c8:	42ae      	cmp	r6, r5
   b52ca:	d004      	beq.n	b52d6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   b52cc:	1d28      	adds	r0, r5, #4
   b52ce:	f7ff ffe6 	bl	b529e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b52d2:	3508      	adds	r5, #8
   b52d4:	e7f8      	b.n	b52c8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b52d6:	6820      	ldr	r0, [r4, #0]
   b52d8:	f7ff fb06 	bl	b48e8 <free>
}
   b52dc:	4620      	mov	r0, r4
   b52de:	bd70      	pop	{r4, r5, r6, pc}

000b52e0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   b52e0:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   b52e2:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   b52e6:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   b52e8:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   b52ec:	42ae      	cmp	r6, r5
   b52ee:	d004      	beq.n	b52fa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   b52f0:	1d28      	adds	r0, r5, #4
   b52f2:	f7ff ffd4 	bl	b529e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b52f6:	3508      	adds	r5, #8
   b52f8:	e7f8      	b.n	b52ec <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   b52fa:	6820      	ldr	r0, [r4, #0]
   b52fc:	f7ff faf4 	bl	b48e8 <free>
}
   b5300:	4620      	mov	r0, r4
   b5302:	bd70      	pop	{r4, r5, r6, pc}

000b5304 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b5304:	b510      	push	{r4, lr}
   b5306:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   b5308:	3024      	adds	r0, #36	; 0x24
   b530a:	f7ff ffe9 	bl	b52e0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b530e:	f104 0018 	add.w	r0, r4, #24
   b5312:	f7ff ffd3 	bl	b52bc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   b5316:	bd10      	pop	{r4, pc}

000b5318 <_ZN8particle14BleLocalDeviceD1Ev>:
        return impl_.get();
    }

private:
    BleLocalDevice();
    ~BleLocalDevice() = default;
   b5318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (__ptr != nullptr)
   b531a:	6804      	ldr	r4, [r0, #0]
   b531c:	4606      	mov	r6, r0
   b531e:	b324      	cbz	r4, b536a <_ZN8particle14BleLocalDeviceD1Ev+0x52>
    class function<_Res(_ArgTypes...)>
   b5320:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b5324:	f7ff fbf4 	bl	b4b10 <_ZNSt14_Function_baseD1Ev>
   b5328:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b532c:	f7ff fbf0 	bl	b4b10 <_ZNSt14_Function_baseD1Ev>
   b5330:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b5334:	f7ff fbec 	bl	b4b10 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   b5338:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   b533c:	eb05 07c3 	add.w	r7, r5, r3, lsl #3
        for (; p != end; ++p) {
   b5340:	42af      	cmp	r7, r5
   b5342:	d004      	beq.n	b534e <_ZN8particle14BleLocalDeviceD1Ev+0x36>
      ~__shared_ptr() = default;
   b5344:	1d28      	adds	r0, r5, #4
   b5346:	f7ff ffaa 	bl	b529e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b534a:	3508      	adds	r5, #8
   b534c:	e7f8      	b.n	b5340 <_ZN8particle14BleLocalDeviceD1Ev+0x28>
    ::free(ptr);
   b534e:	69a0      	ldr	r0, [r4, #24]
   b5350:	f7ff faca 	bl	b48e8 <free>
    ~BleLocalDeviceImpl() = default;
   b5354:	f104 000c 	add.w	r0, r4, #12
   b5358:	f7ff ffc2 	bl	b52e0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   b535c:	4620      	mov	r0, r4
   b535e:	f7ff ffad 	bl	b52bc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   b5362:	2154      	movs	r1, #84	; 0x54
   b5364:	4620      	mov	r0, r4
   b5366:	f001 f858 	bl	b641a <_ZdlPvj>
   b536a:	4630      	mov	r0, r6
   b536c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b536e <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>:
      operator=(__shared_ptr&& __r) noexcept
   b536e:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   b5370:	2300      	movs	r3, #0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b5372:	e9d1 4200 	ldrd	r4, r2, [r1]
	__r._M_ptr = 0;
   b5376:	e9c1 3300 	strd	r3, r3, [r1]
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   b537a:	6803      	ldr	r3, [r0, #0]
   b537c:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b537e:	6004      	str	r4, [r0, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b5380:	6843      	ldr	r3, [r0, #4]
	__r._M_pi = _M_pi;
   b5382:	6042      	str	r2, [r0, #4]
      ~__shared_ptr() = default;
   b5384:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   b5386:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   b5388:	f7ff ff89 	bl	b529e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   b538c:	b002      	add	sp, #8
   b538e:	bd10      	pop	{r4, pc}

000b5390 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   b5390:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b5392:	b510      	push	{r4, lr}
      if (_M_empty())
   b5394:	b90a      	cbnz	r2, b539a <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   b5396:	f001 f842 	bl	b641e <_ZSt25__throw_bad_function_callv>
    }
   b539a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b539e:	68c3      	ldr	r3, [r0, #12]
   b53a0:	4718      	bx	r3

000b53a2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b53a2:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b53a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b53a6:	4604      	mov	r4, r0
   b53a8:	460d      	mov	r5, r1
   b53aa:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b53ac:	d914      	bls.n	b53d8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b53ae:	4290      	cmp	r0, r2
   b53b0:	d213      	bcs.n	b53da <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b53b2:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b53b6:	1a75      	subs	r5, r6, r1
   b53b8:	f1a1 0708 	sub.w	r7, r1, #8
   b53bc:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b53be:	42b7      	cmp	r7, r6
   b53c0:	d018      	beq.n	b53f4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b53c2:	b11c      	cbz	r4, b53cc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b53c4:	4631      	mov	r1, r6
   b53c6:	4620      	mov	r0, r4
   b53c8:	f7ff ff5f 	bl	b528a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
      ~__shared_ptr() = default;
   b53cc:	1d30      	adds	r0, r6, #4
   b53ce:	f7ff ff66 	bl	b529e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b53d2:	3e08      	subs	r6, #8
   b53d4:	3c08      	subs	r4, #8
   b53d6:	e7f2      	b.n	b53be <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b53d8:	d00c      	beq.n	b53f4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b53da:	42b5      	cmp	r5, r6
   b53dc:	d00a      	beq.n	b53f4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b53de:	b11c      	cbz	r4, b53e8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b53e0:	4629      	mov	r1, r5
   b53e2:	4620      	mov	r0, r4
   b53e4:	f7ff ff51 	bl	b528a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b53e8:	1d28      	adds	r0, r5, #4
   b53ea:	f7ff ff58 	bl	b529e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b53ee:	3508      	adds	r5, #8
   b53f0:	3408      	adds	r4, #8
   b53f2:	e7f2      	b.n	b53da <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b53f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b53f6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b53f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b53f8:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b53fa:	6846      	ldr	r6, [r0, #4]
   b53fc:	4668      	mov	r0, sp
   b53fe:	f7ff ff44 	bl	b528a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5402:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   b5406:	429f      	cmp	r7, r3
   b5408:	db12      	blt.n	b5430 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   b540a:	3701      	adds	r7, #1
        if (n > 0) {
   b540c:	2f00      	cmp	r7, #0
   b540e:	dd29      	ble.n	b5464 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   b5410:	00f8      	lsls	r0, r7, #3
   b5412:	f7ff fa61 	bl	b48d8 <malloc>
            if (!d) {
   b5416:	4605      	mov	r5, r0
   b5418:	b1f0      	cbz	r0, b5458 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   b541a:	e9d4 1200 	ldrd	r1, r2, [r4]
   b541e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b5422:	f7ff ffbe 	bl	b53a2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b5426:	6820      	ldr	r0, [r4, #0]
   b5428:	f7ff fa5e 	bl	b48e8 <free>
        data_ = d;
   b542c:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   b542e:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   b5430:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b5432:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b5434:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   b5438:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b543c:	4631      	mov	r1, r6
   b543e:	f106 0008 	add.w	r0, r6, #8
   b5442:	f7ff ffae 	bl	b53a2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b5446:	b11e      	cbz	r6, b5450 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   b5448:	4669      	mov	r1, sp
   b544a:	4630      	mov	r0, r6
   b544c:	f7ff ff1d 	bl	b528a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   b5450:	6863      	ldr	r3, [r4, #4]
   b5452:	3301      	adds	r3, #1
   b5454:	6063      	str	r3, [r4, #4]
    return true;
   b5456:	2501      	movs	r5, #1
   b5458:	a801      	add	r0, sp, #4
   b545a:	f7ff ff20 	bl	b529e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b545e:	4628      	mov	r0, r5
   b5460:	b003      	add	sp, #12
   b5462:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   b5464:	2500      	movs	r5, #0
   b5466:	e7de      	b.n	b5426 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>

000b5468 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b5468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    T* const p = find(data_, data_ + size_, value);
   b546a:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   b546e:	4605      	mov	r5, r0
   b5470:	460f      	mov	r7, r1
    T* const p = find(data_, data_ + size_, value);
   b5472:	eb04 06c3 	add.w	r6, r4, r3, lsl #3
        for (; p != end; ++p) {
   b5476:	42a6      	cmp	r6, r4
   b5478:	d005      	beq.n	b5486 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>
            if (*p == value) {
   b547a:	4639      	mov	r1, r7
   b547c:	4620      	mov	r0, r4
   b547e:	f7ff fdf4 	bl	b506a <_ZNK8particle13BlePeerDeviceeqERKS0_>
   b5482:	b108      	cbz	r0, b5488 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x20>
    if (!p) {
   b5484:	b914      	cbnz	r4, b548c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x24>
}
   b5486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (; p != end; ++p) {
   b5488:	3408      	adds	r4, #8
   b548a:	e7f4      	b.n	b5476 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0xe>
   b548c:	1d20      	adds	r0, r4, #4
   b548e:	f7ff ff06 	bl	b529e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   b5492:	e9d5 3200 	ldrd	r3, r2, [r5]
   b5496:	f104 0108 	add.w	r1, r4, #8
   b549a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b549e:	4620      	mov	r0, r4
   b54a0:	f7ff ff7f 	bl	b53a2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   b54a4:	686b      	ldr	r3, [r5, #4]
   b54a6:	3b01      	subs	r3, #1
   b54a8:	606b      	str	r3, [r5, #4]
    return true;
   b54aa:	e7ec      	b.n	b5486 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0+0x1e>

000b54ac <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b54ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b54b0:	4605      	mov	r5, r0
   b54b2:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   b54b4:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   b54b6:	460c      	mov	r4, r1
        WiringBleLock lk;
   b54b8:	f7ff fb68 	bl	b4b8c <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   b54bc:	682e      	ldr	r6, [r5, #0]
   b54be:	2e04      	cmp	r6, #4
   b54c0:	d06d      	beq.n	b559e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xf2>
   b54c2:	d807      	bhi.n	b54d4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x28>
   b54c4:	2e03      	cmp	r6, #3
   b54c6:	d02a      	beq.n	b551e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x72>
        WiringBleLock lk;
   b54c8:	a803      	add	r0, sp, #12
   b54ca:	f7ff fb6d 	bl	b4ba8 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   b54ce:	b00e      	add	sp, #56	; 0x38
   b54d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        switch (event->type) {
   b54d4:	f1a6 030c 	sub.w	r3, r6, #12
   b54d8:	2b04      	cmp	r3, #4
   b54da:	d8f5      	bhi.n	b54c8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b54dc:	89a9      	ldrh	r1, [r5, #12]
   b54de:	4620      	mov	r0, r4
   b54e0:	f7ff fcf8 	bl	b4ed4 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b54e4:	4607      	mov	r7, r0
   b54e6:	2800      	cmp	r0, #0
   b54e8:	d0ee      	beq.n	b54c8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                    if (impl->pairingEventCallback_) {
   b54ea:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   b54ec:	2b00      	cmp	r3, #0
   b54ee:	d0eb      	beq.n	b54c8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                        BlePairingEvent pairingEvent = {
   b54f0:	2210      	movs	r2, #16
   b54f2:	2100      	movs	r1, #0
   b54f4:	a807      	add	r0, sp, #28
   b54f6:	f001 f8ed 	bl	b66d4 <memset>
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b54fa:	2e0d      	cmp	r6, #13
                        };
   b54fc:	9706      	str	r7, [sp, #24]
                            .type = static_cast<BlePairingEventType>(event->type)
   b54fe:	f88d 601c 	strb.w	r6, [sp, #28]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY || event->type == BLE_EVT_PAIRING_NUMERIC_COMPARISON) {
   b5502:	d002      	beq.n	b550a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x5e>
   b5504:	2e10      	cmp	r6, #16
   b5506:	f040 8092 	bne.w	b562e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x182>
                            pairingEvent.payload.passkey = event->params.passkey_display.passkey;
   b550a:	686b      	ldr	r3, [r5, #4]
   b550c:	9309      	str	r3, [sp, #36]	; 0x24
                            pairingEvent.payloadLen = BLE_PAIRING_PASSKEY_LEN;
   b550e:	2306      	movs	r3, #6
                            pairingEvent.payloadLen = sizeof(BlePairingStatus);
   b5510:	9308      	str	r3, [sp, #32]
   b5512:	6d23      	ldr	r3, [r4, #80]	; 0x50
   b5514:	a906      	add	r1, sp, #24
   b5516:	f104 0044 	add.w	r0, r4, #68	; 0x44
   b551a:	4798      	blx	r3
   b551c:	e7d4      	b.n	b54c8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                BlePeerDevice peer;
   b551e:	a804      	add	r0, sp, #16
   b5520:	f7ff fd6e 	bl	b5000 <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   b5524:	9b04      	ldr	r3, [sp, #16]
   b5526:	89aa      	ldrh	r2, [r5, #12]
   b5528:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   b552a:	6869      	ldr	r1, [r5, #4]
   b552c:	9804      	ldr	r0, [sp, #16]
   b552e:	3108      	adds	r1, #8
   b5530:	3002      	adds	r0, #2
   b5532:	f7ff fb45 	bl	b4bc0 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   b5536:	a904      	add	r1, sp, #16
   b5538:	a806      	add	r0, sp, #24
   b553a:	f7ff fea6 	bl	b528a <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   b553e:	a906      	add	r1, sp, #24
   b5540:	f104 0018 	add.w	r0, r4, #24
   b5544:	f7ff ff57 	bl	b53f6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   b5548:	4605      	mov	r5, r0
   b554a:	a807      	add	r0, sp, #28
   b554c:	f7ff fea7 	bl	b529e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5550:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   b5552:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   b5554:	b98d      	cbnz	r5, b557a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xce>
                    LOG(ERROR, "Failed to append peer Central device.");
   b5556:	4b3e      	ldr	r3, [pc, #248]	; (b5650 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a4>)
   b5558:	493e      	ldr	r1, [pc, #248]	; (b5654 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a8>)
   b555a:	9300      	str	r3, [sp, #0]
   b555c:	2032      	movs	r0, #50	; 0x32
   b555e:	462b      	mov	r3, r5
   b5560:	aa06      	add	r2, sp, #24
   b5562:	9507      	str	r5, [sp, #28]
   b5564:	f7ff f924 	bl	b47b0 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   b5568:	9b04      	ldr	r3, [sp, #16]
   b556a:	4629      	mov	r1, r5
   b556c:	8818      	ldrh	r0, [r3, #0]
   b556e:	f7ff f805 	bl	b457c <hal_ble_gap_disconnect>
   b5572:	a805      	add	r0, sp, #20
   b5574:	f7ff fe93 	bl	b529e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5578:	e7a6      	b.n	b54c8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                LOG(TRACE, "Connected by Central device.");
   b557a:	4a37      	ldr	r2, [pc, #220]	; (b5658 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ac>)
   b557c:	9200      	str	r2, [sp, #0]
   b557e:	2300      	movs	r3, #0
   b5580:	4934      	ldr	r1, [pc, #208]	; (b5654 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a8>)
   b5582:	9307      	str	r3, [sp, #28]
   b5584:	aa06      	add	r2, sp, #24
   b5586:	2001      	movs	r0, #1
   b5588:	f7ff f912 	bl	b47b0 <log_message>
                if (impl->connectedCallback_) {
   b558c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   b558e:	2b00      	cmp	r3, #0
   b5590:	d0ef      	beq.n	b5572 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xc6>
                    impl->connectedCallback_(peer);
   b5592:	a904      	add	r1, sp, #16
   b5594:	f104 0024 	add.w	r0, r4, #36	; 0x24
   b5598:	f7ff fefa 	bl	b5390 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   b559c:	e7e9      	b.n	b5572 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xc6>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   b559e:	89a9      	ldrh	r1, [r5, #12]
   b55a0:	4620      	mov	r0, r4
   b55a2:	f7ff fc97 	bl	b4ed4 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   b55a6:	4606      	mov	r6, r0
   b55a8:	2800      	cmp	r0, #0
   b55aa:	d08d      	beq.n	b54c8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
      { return _M_ptr; }
   b55ac:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   b55ae:	e9d5 3206 	ldrd	r3, r2, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   b55b2:	f64f 71ff 	movw	r1, #65535	; 0xffff
   b55b6:	8029      	strh	r1, [r5, #0]
   b55b8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& characteristic : characteristics()) {
   b55bc:	429a      	cmp	r2, r3
   b55be:	d003      	beq.n	b55c8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x11c>
   b55c0:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   b55c4:	8041      	strh	r1, [r0, #2]
        for (auto& characteristic : characteristics()) {
   b55c6:	e7f9      	b.n	b55bc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x110>
    destruct(data_, data_ + size_);
   b55c8:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   b55cc:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b55d0:	45b8      	cmp	r8, r7
   b55d2:	d004      	beq.n	b55de <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x132>
      ~__shared_ptr() = default;
   b55d4:	1d38      	adds	r0, r7, #4
   b55d6:	f7ff fe62 	bl	b529e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b55da:	3708      	adds	r7, #8
   b55dc:	e7f8      	b.n	b55d0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x124>
    size_ = 0;
   b55de:	2300      	movs	r3, #0
   b55e0:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   b55e2:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   b55e6:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   b55ea:	45b8      	cmp	r8, r7
   b55ec:	d004      	beq.n	b55f8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x14c>
   b55ee:	1d38      	adds	r0, r7, #4
   b55f0:	f7ff fe55 	bl	b529e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b55f4:	3708      	adds	r7, #8
   b55f6:	e7f8      	b.n	b55ea <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13e>
    size_ = 0;
   b55f8:	2300      	movs	r3, #0
   b55fa:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   b55fc:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   b55fe:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b5600:	b123      	cbz	r3, b560c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x160>
                        impl->disconnectedCallback_(*peer);
   b5602:	4631      	mov	r1, r6
   b5604:	f104 0034 	add.w	r0, r4, #52	; 0x34
   b5608:	f7ff fec2 	bl	b5390 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   b560c:	2300      	movs	r3, #0
   b560e:	2220      	movs	r2, #32
   b5610:	e9cd 2306 	strd	r2, r3, [sp, #24]
   b5614:	4a11      	ldr	r2, [pc, #68]	; (b565c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1b0>)
   b5616:	9200      	str	r2, [sp, #0]
   b5618:	490e      	ldr	r1, [pc, #56]	; (b5654 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a8>)
   b561a:	aa06      	add	r2, sp, #24
   b561c:	2001      	movs	r0, #1
   b561e:	f7ff f8c7 	bl	b47b0 <log_message>
                    impl->peers_.removeOne(*peer);
   b5622:	4631      	mov	r1, r6
   b5624:	f104 0018 	add.w	r0, r4, #24
   b5628:	f7ff ff1e 	bl	b5468 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_.isra.0>
   b562c:	e74c      	b.n	b54c8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   b562e:	2e0f      	cmp	r6, #15
   b5630:	f47f af6f 	bne.w	b5512 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x66>
                            pairingEvent.payload.status.status = event->params.pairing_status.status;
   b5634:	686b      	ldr	r3, [r5, #4]
   b5636:	9309      	str	r3, [sp, #36]	; 0x24
                            pairingEvent.payload.status.bonded = event->params.pairing_status.bonded;
   b5638:	7a2b      	ldrb	r3, [r5, #8]
   b563a:	f003 0201 	and.w	r2, r3, #1
                            pairingEvent.payload.status.lesc = event->params.pairing_status.lesc;
   b563e:	f3c3 0340 	ubfx	r3, r3, #1, #1
   b5642:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
                            pairingEvent.payload.status.bonded = event->params.pairing_status.bonded;
   b5646:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
                            pairingEvent.payloadLen = sizeof(BlePairingStatus);
   b564a:	2308      	movs	r3, #8
   b564c:	e760      	b.n	b5510 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x64>
   b564e:	bf00      	nop
   b5650:	000b699f 	.word	0x000b699f
   b5654:	000b6960 	.word	0x000b6960
   b5658:	000b69c5 	.word	0x000b69c5
   b565c:	000b69e2 	.word	0x000b69e2

000b5660 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   b5660:	b513      	push	{r0, r1, r4, lr}
   b5662:	460b      	mov	r3, r1
   b5664:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5666:	e9d0 0100 	ldrd	r0, r1, [r0]
   b566a:	466c      	mov	r4, sp
   b566c:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b5670:	e893 0003 	ldmia.w	r3, {r0, r1}
   b5674:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b5678:	e894 0003 	ldmia.w	r4, {r0, r1}
   b567c:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b5680:	b002      	add	sp, #8
   b5682:	bd10      	pop	{r4, pc}

000b5684 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   b5684:	b538      	push	{r3, r4, r5, lr}
   b5686:	4605      	mov	r5, r0
   b5688:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   b568a:	f7ff ffe9 	bl	b5660 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b568e:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   b5690:	68a2      	ldr	r2, [r4, #8]
   b5692:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b5694:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5696:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   b5698:	68e2      	ldr	r2, [r4, #12]
   b569a:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b569c:	60e3      	str	r3, [r4, #12]
      }
   b569e:	bd38      	pop	{r3, r4, r5, pc}

000b56a0 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   b56a0:	b570      	push	{r4, r5, r6, lr}
   b56a2:	460e      	mov	r6, r1
   b56a4:	b08c      	sub	sp, #48	; 0x30
   b56a6:	4604      	mov	r4, r0
   b56a8:	9201      	str	r2, [sp, #4]
   b56aa:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   b56ac:	f7ff fbf2 	bl	b4e94 <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   b56b0:	7833      	ldrb	r3, [r6, #0]
        description_ = desc;
   b56b2:	9901      	ldr	r1, [sp, #4]
        properties_ = properties;
   b56b4:	7123      	strb	r3, [r4, #4]
        description_ = desc;
   b56b6:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   b56ba:	f000 fc92 	bl	b5fe2 <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   b56be:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   b56c2:	b1cd      	cbz	r5, b56f8 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x58>
   b56c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b56c6:	9502      	str	r5, [sp, #8]
   b56c8:	a902      	add	r1, sp, #8
   b56ca:	a804      	add	r0, sp, #16
   b56cc:	9303      	str	r3, [sp, #12]
   b56ce:	f7ff fda5 	bl	b521c <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
    _Function_base() : _M_manager(nullptr) { }
   b56d2:	2300      	movs	r3, #0
	__x.swap(*this);
   b56d4:	a908      	add	r1, sp, #32
   b56d6:	a804      	add	r0, sp, #16
    _Function_base() : _M_manager(nullptr) { }
   b56d8:	930a      	str	r3, [sp, #40]	; 0x28
	__x.swap(*this);
   b56da:	f7ff ffd3 	bl	b5684 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   b56de:	4631      	mov	r1, r6
   b56e0:	a808      	add	r0, sp, #32
   b56e2:	f7ff ffcf 	bl	b5684 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   b56e6:	a808      	add	r0, sp, #32
   b56e8:	f7ff fa12 	bl	b4b10 <_ZNSt14_Function_baseD1Ev>
   b56ec:	a804      	add	r0, sp, #16
   b56ee:	f7ff fa0f 	bl	b4b10 <_ZNSt14_Function_baseD1Ev>
    }
   b56f2:	4620      	mov	r0, r4
   b56f4:	b00c      	add	sp, #48	; 0x30
   b56f6:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   b56f8:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   b56fa:	e7ea      	b.n	b56d2 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x32>

000b56fc <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   b56fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5700:	b089      	sub	sp, #36	; 0x24
   b5702:	461d      	mov	r5, r3
   b5704:	e9dd 4312 	ldrd	r4, r3, [sp, #72]	; 0x48
   b5708:	4680      	mov	r8, r0
   b570a:	468a      	mov	sl, r1
   b570c:	4693      	mov	fp, r2
   b570e:	9914      	ldr	r1, [sp, #80]	; 0x50
   b5710:	9303      	str	r3, [sp, #12]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   b5712:	2200      	movs	r2, #0
   b5714:	2068      	movs	r0, #104	; 0x68
   b5716:	9102      	str	r1, [sp, #8]
   b5718:	9206      	str	r2, [sp, #24]
   b571a:	f7fe fcba 	bl	b4092 <_Znwj>
	  auto __pi = ::new (__mem)
   b571e:	1e06      	subs	r6, r0, #0
   b5720:	f106 090c 	add.w	r9, r6, #12
   b5724:	d01c      	beq.n	b5760 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x64>
      : _M_use_count(1), _M_weak_count(1) { }
   b5726:	2201      	movs	r2, #1
	: _M_impl(__a)
   b5728:	4637      	mov	r7, r6
      : _M_use_count(1), _M_weak_count(1) { }
   b572a:	e9c6 2201 	strd	r2, r2, [r6, #4]
	: _M_impl(__a)
   b572e:	4a17      	ldr	r2, [pc, #92]	; (b578c <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x90>)
   b5730:	f847 2b20 	str.w	r2, [r7], #32
            : BleCharacteristicImpl(properties, desc, callback, context) {
   b5734:	9902      	ldr	r1, [sp, #8]
   b5736:	f89b 2000 	ldrb.w	r2, [fp]
   b573a:	9b03      	ldr	r3, [sp, #12]
    value_ = flags.value_;
   b573c:	f88d 2014 	strb.w	r2, [sp, #20]
   b5740:	9100      	str	r1, [sp, #0]
   b5742:	4652      	mov	r2, sl
   b5744:	a905      	add	r1, sp, #20
   b5746:	4648      	mov	r0, r9
   b5748:	f7ff ffaa 	bl	b56a0 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   b574c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b574e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   b5750:	682b      	ldr	r3, [r5, #0]
   b5752:	603b      	str	r3, [r7, #0]
        svcUuid_ = svcUuid;
   b5754:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   b5756:	f106 0534 	add.w	r5, r6, #52	; 0x34
   b575a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   b575c:	6823      	ldr	r3, [r4, #0]
   b575e:	602b      	str	r3, [r5, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   b5760:	a906      	add	r1, sp, #24
   b5762:	4640      	mov	r0, r8
	  __p = __pi->_M_ptr();
   b5764:	e9cd 9606 	strd	r9, r6, [sp, #24]
   b5768:	f7ff fe01 	bl	b536e <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_.isra.0>
      ~__shared_ptr() = default;
   b576c:	a807      	add	r0, sp, #28
   b576e:	f7ff fd96 	bl	b529e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   b5772:	f8d8 1000 	ldr.w	r1, [r8]
   b5776:	b931      	cbnz	r1, b5786 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x8a>
        SPARK_ASSERT(false);
   b5778:	4a05      	ldr	r2, [pc, #20]	; (b5790 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x94>)
   b577a:	200a      	movs	r0, #10
}
   b577c:	b009      	add	sp, #36	; 0x24
   b577e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        SPARK_ASSERT(false);
   b5782:	f7ff b80d 	b.w	b47a0 <panic_>
}
   b5786:	b009      	add	sp, #36	; 0x24
   b5788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b578c:	000b6a5c 	.word	0x000b6a5c
   b5790:	000b4681 	.word	0x000b4681

000b5794 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b5794:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b5796:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5798:	4604      	mov	r4, r0
   b579a:	460d      	mov	r5, r1
   b579c:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b579e:	d914      	bls.n	b57ca <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b57a0:	4290      	cmp	r0, r2
   b57a2:	d213      	bcs.n	b57cc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b57a4:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b57a8:	1a75      	subs	r5, r6, r1
   b57aa:	f1a1 0708 	sub.w	r7, r1, #8
   b57ae:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b57b0:	42b7      	cmp	r7, r6
   b57b2:	d018      	beq.n	b57e6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b57b4:	b11c      	cbz	r4, b57be <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b57b6:	4631      	mov	r1, r6
   b57b8:	4620      	mov	r0, r4
   b57ba:	f7ff fd5c 	bl	b5276 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b57be:	1d30      	adds	r0, r6, #4
   b57c0:	f7ff fd6d 	bl	b529e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b57c4:	3e08      	subs	r6, #8
   b57c6:	3c08      	subs	r4, #8
   b57c8:	e7f2      	b.n	b57b0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b57ca:	d00c      	beq.n	b57e6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b57cc:	42b5      	cmp	r5, r6
   b57ce:	d00a      	beq.n	b57e6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b57d0:	b11c      	cbz	r4, b57da <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b57d2:	4629      	mov	r1, r5
   b57d4:	4620      	mov	r0, r4
   b57d6:	f7ff fd4e 	bl	b5276 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b57da:	1d28      	adds	r0, r5, #4
   b57dc:	f7ff fd5f 	bl	b529e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b57e0:	3508      	adds	r5, #8
   b57e2:	3408      	adds	r4, #8
   b57e4:	e7f2      	b.n	b57cc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b57e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b57e8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b57e8:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b57ea:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b57ec:	4605      	mov	r5, r0
        if (n > 0) {
   b57ee:	dd11      	ble.n	b5814 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b57f0:	00f0      	lsls	r0, r6, #3
   b57f2:	f7ff f871 	bl	b48d8 <malloc>
            if (!d) {
   b57f6:	4604      	mov	r4, r0
   b57f8:	b158      	cbz	r0, b5812 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b57fa:	e9d5 1200 	ldrd	r1, r2, [r5]
   b57fe:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b5802:	f7ff ffc7 	bl	b5794 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b5806:	6828      	ldr	r0, [r5, #0]
   b5808:	f7ff f86e 	bl	b48e8 <free>
        data_ = d;
   b580c:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b580e:	60ae      	str	r6, [r5, #8]
        return true;
   b5810:	2001      	movs	r0, #1
    }
   b5812:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b5814:	2400      	movs	r4, #0
   b5816:	e7f6      	b.n	b5806 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b5818 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b5818:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b581a:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b581c:	6845      	ldr	r5, [r0, #4]
   b581e:	4668      	mov	r0, sp
   b5820:	f7ff fd29 	bl	b5276 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5824:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b5828:	4299      	cmp	r1, r3
   b582a:	da10      	bge.n	b584e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b582c:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b582e:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b5830:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b5834:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b5838:	4629      	mov	r1, r5
   b583a:	f105 0008 	add.w	r0, r5, #8
   b583e:	f7ff ffa9 	bl	b5794 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b5842:	b98d      	cbnz	r5, b5868 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b5844:	6863      	ldr	r3, [r4, #4]
   b5846:	3301      	adds	r3, #1
   b5848:	6063      	str	r3, [r4, #4]
    return true;
   b584a:	2601      	movs	r6, #1
   b584c:	e006      	b.n	b585c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b584e:	3101      	adds	r1, #1
   b5850:	4620      	mov	r0, r4
   b5852:	f7ff ffc9 	bl	b57e8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b5856:	4606      	mov	r6, r0
   b5858:	2800      	cmp	r0, #0
   b585a:	d1e7      	bne.n	b582c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   b585c:	a801      	add	r0, sp, #4
   b585e:	f7ff fd1e 	bl	b529e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b5862:	4630      	mov	r0, r6
   b5864:	b002      	add	sp, #8
   b5866:	bd70      	pop	{r4, r5, r6, pc}
   b5868:	4669      	mov	r1, sp
   b586a:	4628      	mov	r0, r5
   b586c:	f7ff fd03 	bl	b5276 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   b5870:	e7e8      	b.n	b5844 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b5872 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   b5872:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   b5874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5876:	4604      	mov	r4, r0
   b5878:	460d      	mov	r5, r1
   b587a:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   b587c:	d914      	bls.n	b58a8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   b587e:	4290      	cmp	r0, r2
   b5880:	d213      	bcs.n	b58aa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   b5882:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   b5886:	1a75      	subs	r5, r6, r1
   b5888:	f1a1 0708 	sub.w	r7, r1, #8
   b588c:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   b588e:	42b7      	cmp	r7, r6
   b5890:	d018      	beq.n	b58c4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   b5892:	b11c      	cbz	r4, b589c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   b5894:	4631      	mov	r1, r6
   b5896:	4620      	mov	r0, r4
   b5898:	f7ff fcdf 	bl	b525a <_ZN8particle17BleCharacteristicC1ERKS0_>
   b589c:	1d30      	adds	r0, r6, #4
   b589e:	f7ff fcfe 	bl	b529e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   b58a2:	3e08      	subs	r6, #8
   b58a4:	3c08      	subs	r4, #8
   b58a6:	e7f2      	b.n	b588e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   b58a8:	d00c      	beq.n	b58c4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   b58aa:	42b5      	cmp	r5, r6
   b58ac:	d00a      	beq.n	b58c4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   b58ae:	b11c      	cbz	r4, b58b8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   b58b0:	4629      	mov	r1, r5
   b58b2:	4620      	mov	r0, r4
   b58b4:	f7ff fcd1 	bl	b525a <_ZN8particle17BleCharacteristicC1ERKS0_>
   b58b8:	1d28      	adds	r0, r5, #4
   b58ba:	f7ff fcf0 	bl	b529e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   b58be:	3508      	adds	r5, #8
   b58c0:	3408      	adds	r4, #8
   b58c2:	e7f2      	b.n	b58aa <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   b58c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b58c6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   b58c6:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   b58c8:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   b58ca:	4605      	mov	r5, r0
        if (n > 0) {
   b58cc:	dd11      	ble.n	b58f2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   b58ce:	00f0      	lsls	r0, r6, #3
   b58d0:	f7ff f802 	bl	b48d8 <malloc>
            if (!d) {
   b58d4:	4604      	mov	r4, r0
   b58d6:	b158      	cbz	r0, b58f0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   b58d8:	e9d5 1200 	ldrd	r1, r2, [r5]
   b58dc:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   b58e0:	f7ff ffc7 	bl	b5872 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   b58e4:	6828      	ldr	r0, [r5, #0]
   b58e6:	f7fe ffff 	bl	b48e8 <free>
        data_ = d;
   b58ea:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   b58ec:	60ae      	str	r6, [r5, #8]
        return true;
   b58ee:	2001      	movs	r0, #1
    }
   b58f0:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   b58f2:	2400      	movs	r4, #0
   b58f4:	e7f6      	b.n	b58e4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000b58f6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   b58f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b58f8:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   b58fa:	6845      	ldr	r5, [r0, #4]
   b58fc:	4668      	mov	r0, sp
   b58fe:	f7ff fcac 	bl	b525a <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b5902:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   b5906:	4299      	cmp	r1, r3
   b5908:	da10      	bge.n	b592c <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   b590a:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   b590c:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   b590e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   b5912:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   b5916:	4629      	mov	r1, r5
   b5918:	f105 0008 	add.w	r0, r5, #8
   b591c:	f7ff ffa9 	bl	b5872 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   b5920:	b98d      	cbnz	r5, b5946 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   b5922:	6863      	ldr	r3, [r4, #4]
   b5924:	3301      	adds	r3, #1
   b5926:	6063      	str	r3, [r4, #4]
    return true;
   b5928:	2601      	movs	r6, #1
   b592a:	e006      	b.n	b593a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   b592c:	3101      	adds	r1, #1
   b592e:	4620      	mov	r0, r4
   b5930:	f7ff ffc9 	bl	b58c6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   b5934:	4606      	mov	r6, r0
   b5936:	2800      	cmp	r0, #0
   b5938:	d1e7      	bne.n	b590a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   b593a:	a801      	add	r0, sp, #4
   b593c:	f7ff fcaf 	bl	b529e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b5940:	4630      	mov	r0, r6
   b5942:	b002      	add	sp, #8
   b5944:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   b5946:	4669      	mov	r1, sp
   b5948:	4628      	mov	r0, r5
   b594a:	f7ff fc86 	bl	b525a <_ZN8particle17BleCharacteristicC1ERKS0_>
   b594e:	e7e8      	b.n	b5922 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000b5950 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b5950:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5954:	4617      	mov	r7, r2
   b5956:	b0a1      	sub	sp, #132	; 0x84
   b5958:	4680      	mov	r8, r0
    WiringBleLock lk;
   b595a:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   b595c:	460e      	mov	r6, r1
    WiringBleLock lk;
   b595e:	f7ff f915 	bl	b4b8c <_ZN8particle3ble13WiringBleLockC1Ev>
      { return _M_ptr; }
   b5962:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   b5964:	7923      	ldrb	r3, [r4, #4]
   b5966:	b953      	cbnz	r3, b597e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   b5968:	4639      	mov	r1, r7
   b596a:	4640      	mov	r0, r8
   b596c:	f7ff fc75 	bl	b525a <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   b5970:	a80a      	add	r0, sp, #40	; 0x28
   b5972:	f7ff f919 	bl	b4ba8 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   b5976:	4640      	mov	r0, r8
   b5978:	b021      	add	sp, #132	; 0x84
   b597a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   b597e:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   b5980:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   b5984:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   b5988:	9303      	str	r3, [sp, #12]
                svcUuid_ == impl.svcUuid_ &&
   b598a:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   b598e:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   b5992:	9b03      	ldr	r3, [sp, #12]
   b5994:	429d      	cmp	r5, r3
   b5996:	d021      	beq.n	b59dc <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   b5998:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   b599c:	4658      	mov	r0, fp
   b599e:	f109 0114 	add.w	r1, r9, #20
   b59a2:	f7ff f9ae 	bl	b4d02 <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   b59a6:	b1b8      	cbz	r0, b59d8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   b59a8:	f109 0128 	add.w	r1, r9, #40	; 0x28
   b59ac:	4650      	mov	r0, sl
   b59ae:	f7ff f9a8 	bl	b4d02 <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   b59b2:	b188      	cbz	r0, b59d8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   b59b4:	6823      	ldr	r3, [r4, #0]
   b59b6:	f8d9 2000 	ldr.w	r2, [r9]
   b59ba:	4053      	eors	r3, r2
   b59bc:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   b59c0:	d10a      	bne.n	b59d8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   b59c2:	2220      	movs	r2, #32
   b59c4:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   b59c8:	4a5e      	ldr	r2, [pc, #376]	; (b5b44 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   b59ca:	9200      	str	r2, [sp, #0]
   b59cc:	aa15      	add	r2, sp, #84	; 0x54
   b59ce:	495e      	ldr	r1, [pc, #376]	; (b5b48 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   b59d0:	2032      	movs	r0, #50	; 0x32
   b59d2:	f7fe feed 	bl	b47b0 <log_message>
   b59d6:	e7c7      	b.n	b5968 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   b59d8:	3508      	adds	r5, #8
   b59da:	e7da      	b.n	b5992 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   b59dc:	4650      	mov	r0, sl
   b59de:	f7ff f961 	bl	b4ca4 <_ZNK8particle7BleUuid7isValidEv>
   b59e2:	b960      	cbnz	r0, b59fe <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
        return *this = BleUuid(uuid);
   b59e4:	4959      	ldr	r1, [pc, #356]	; (b5b4c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   b59e6:	2201      	movs	r2, #1
   b59e8:	a815      	add	r0, sp, #84	; 0x54
   b59ea:	ad15      	add	r5, sp, #84	; 0x54
   b59ec:	f7ff f931 	bl	b4c52 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   b59f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b59f2:	46d4      	mov	ip, sl
   b59f4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b59f8:	682b      	ldr	r3, [r5, #0]
   b59fa:	f8cc 3000 	str.w	r3, [ip]
   b59fe:	6833      	ldr	r3, [r6, #0]
   b5a00:	e9d3 5300 	ldrd	r5, r3, [r3]
   b5a04:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   b5a08:	455d      	cmp	r5, fp
   b5a0a:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   b5a0c:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   b5a0e:	d06e      	beq.n	b5aee <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   b5a10:	f855 0b08 	ldr.w	r0, [r5], #8
   b5a14:	f7ff f975 	bl	b4d02 <_ZNK8particle7BleUuideqERKS0_>
   b5a18:	2800      	cmp	r0, #0
   b5a1a:	d0f5      	beq.n	b5a08 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   b5a1c:	f104 0a14 	add.w	sl, r4, #20
   b5a20:	4650      	mov	r0, sl
   b5a22:	f7ff f93f 	bl	b4ca4 <_ZNK8particle7BleUuid7isValidEv>
   b5a26:	b988      	cbnz	r0, b5a4c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   b5a28:	4b49      	ldr	r3, [pc, #292]	; (b5b50 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b5a2a:	4948      	ldr	r1, [pc, #288]	; (b5b4c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   b5a2c:	881a      	ldrh	r2, [r3, #0]
   b5a2e:	3201      	adds	r2, #1
   b5a30:	b292      	uxth	r2, r2
   b5a32:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b5a34:	a815      	add	r0, sp, #84	; 0x54
   b5a36:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   b5a38:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   b5a3a:	f7ff f929 	bl	b4c90 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   b5a3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5a40:	46d4      	mov	ip, sl
   b5a42:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   b5a46:	682b      	ldr	r3, [r5, #0]
   b5a48:	f8cc 3000 	str.w	r3, [ip]
    charInit.version = BLE_API_VERSION;
   b5a4c:	4b41      	ldr	r3, [pc, #260]	; (b5b54 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   b5a4e:	9315      	str	r3, [sp, #84]	; 0x54
    hal_ble_char_init_t charInit = {};
   b5a50:	2228      	movs	r2, #40	; 0x28
   b5a52:	2100      	movs	r1, #0
   b5a54:	a816      	add	r0, sp, #88	; 0x58
   b5a56:	f000 fe3d 	bl	b66d4 <memset>
    charInit.uuid = charImpl->charUUID().halUUID();
   b5a5a:	4651      	mov	r1, sl
   b5a5c:	a804      	add	r0, sp, #16
   b5a5e:	f7ff f933 	bl	b4cc8 <_ZN8particle7BleUuid7halUUIDEv>
   b5a62:	ab04      	add	r3, sp, #16
   b5a64:	aa18      	add	r2, sp, #96	; 0x60
   b5a66:	f10d 0c20 	add.w	ip, sp, #32
   b5a6a:	6818      	ldr	r0, [r3, #0]
   b5a6c:	6859      	ldr	r1, [r3, #4]
   b5a6e:	4615      	mov	r5, r2
   b5a70:	c503      	stmia	r5!, {r0, r1}
   b5a72:	3308      	adds	r3, #8
   b5a74:	4563      	cmp	r3, ip
   b5a76:	462a      	mov	r2, r5
   b5a78:	d1f7      	bne.n	b5a6a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   b5a7a:	6818      	ldr	r0, [r3, #0]
   b5a7c:	6028      	str	r0, [r5, #0]
    return value_;
   b5a7e:	7923      	ldrb	r3, [r4, #4]
    charInit.properties = charImpl->properties().value();
   b5a80:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   b5a84:	f8d9 3000 	ldr.w	r3, [r9]
   b5a88:	8a9b      	ldrh	r3, [r3, #20]
   b5a8a:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   b5a8e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   b5a90:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   b5a92:	4b31      	ldr	r3, [pc, #196]	; (b5b58 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b5a94:	2200      	movs	r2, #0
   b5a96:	1da1      	adds	r1, r4, #6
   b5a98:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   b5a9a:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   b5a9e:	f7fe fd9f 	bl	b45e0 <hal_ble_gatt_server_add_characteristic>
   b5aa2:	2800      	cmp	r0, #0
   b5aa4:	f47f af60 	bne.w	b5968 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   b5aa8:	2301      	movs	r3, #1
   b5aaa:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   b5aac:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   b5aae:	4639      	mov	r1, r7
        return characteristics_;
   b5ab0:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   b5ab2:	a80d      	add	r0, sp, #52	; 0x34
   b5ab4:	f7ff fbd1 	bl	b525a <_ZN8particle17BleCharacteristicC1ERKS0_>
   b5ab8:	4620      	mov	r0, r4
   b5aba:	a90d      	add	r1, sp, #52	; 0x34
   b5abc:	f7ff ff1b 	bl	b58f6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   b5ac0:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   b5ac2:	a80e      	add	r0, sp, #56	; 0x38
   b5ac4:	f7ff fbeb 	bl	b529e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5ac8:	2c00      	cmp	r4, #0
   b5aca:	f47f af4d 	bne.w	b5968 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   b5ace:	2320      	movs	r3, #32
   b5ad0:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   b5ad4:	4b21      	ldr	r3, [pc, #132]	; (b5b5c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   b5ad6:	9300      	str	r3, [sp, #0]
   b5ad8:	aa0d      	add	r2, sp, #52	; 0x34
   b5ada:	4623      	mov	r3, r4
   b5adc:	e777      	b.n	b59ce <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   b5ade:	4639      	mov	r1, r7
   b5ae0:	4640      	mov	r0, r8
   b5ae2:	f7ff fbba 	bl	b525a <_ZN8particle17BleCharacteristicC1ERKS0_>
   b5ae6:	a80c      	add	r0, sp, #48	; 0x30
   b5ae8:	f7ff fbd9 	bl	b529e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5aec:	e740      	b.n	b5970 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   b5aee:	a80b      	add	r0, sp, #44	; 0x2c
   b5af0:	f7ff fa62 	bl	b4fb8 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   b5af4:	4651      	mov	r1, sl
   b5af6:	a815      	add	r0, sp, #84	; 0x54
   b5af8:	f7ff f8e6 	bl	b4cc8 <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   b5afc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   b5afe:	2300      	movs	r3, #0
   b5b00:	3214      	adds	r2, #20
   b5b02:	a915      	add	r1, sp, #84	; 0x54
   b5b04:	2001      	movs	r0, #1
   b5b06:	f7fe fd43 	bl	b4590 <hal_ble_gatt_server_add_service>
   b5b0a:	2800      	cmp	r0, #0
   b5b0c:	d1e7      	bne.n	b5ade <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   b5b0e:	6835      	ldr	r5, [r6, #0]
   b5b10:	a90b      	add	r1, sp, #44	; 0x2c
   b5b12:	a80d      	add	r0, sp, #52	; 0x34
   b5b14:	f7ff fbaf 	bl	b5276 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   b5b18:	4628      	mov	r0, r5
   b5b1a:	a90d      	add	r1, sp, #52	; 0x34
   b5b1c:	f7ff fe7c 	bl	b5818 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   b5b20:	4605      	mov	r5, r0
   b5b22:	a80e      	add	r0, sp, #56	; 0x38
   b5b24:	f7ff fbbb 	bl	b529e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5b28:	2d00      	cmp	r5, #0
   b5b2a:	d0d8      	beq.n	b5ade <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   b5b2c:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   b5b2e:	6853      	ldr	r3, [r2, #4]
   b5b30:	6812      	ldr	r2, [r2, #0]
   b5b32:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   b5b36:	3b01      	subs	r3, #1
   b5b38:	a80c      	add	r0, sp, #48	; 0x30
   b5b3a:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   b5b3e:	f7ff fbae 	bl	b529e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5b42:	e76b      	b.n	b5a1c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   b5b44:	000b6a01 	.word	0x000b6a01
   b5b48:	000b6960 	.word	0x000b6960
   b5b4c:	000b6ac6 	.word	0x000b6ac6
   b5b50:	2003e660 	.word	0x2003e660
   b5b54:	002c0003 	.word	0x002c0003
   b5b58:	000b514d 	.word	0x000b514d
   b5b5c:	000b6a2c 	.word	0x000b6a2c

000b5b60 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   b5b60:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   b5b62:	4c06      	ldr	r4, [pc, #24]	; (b5b7c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   b5b64:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   b5b66:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   b5b68:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   b5b6a:	f7fe fd61 	bl	b4630 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   b5b6e:	4620      	mov	r0, r4
   b5b70:	4a03      	ldr	r2, [pc, #12]	; (b5b80 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   b5b72:	4904      	ldr	r1, [pc, #16]	; (b5b84 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   b5b74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   b5b78:	f000 bc4a 	b.w	b6410 <__aeabi_atexit>
   b5b7c:	2003e664 	.word	0x2003e664
   b5b80:	2003e5f8 	.word	0x2003e5f8
   b5b84:	000b49e5 	.word	0x000b49e5

000b5b88 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b5b88:	2200      	movs	r2, #0
   b5b8a:	6840      	ldr	r0, [r0, #4]
   b5b8c:	4611      	mov	r1, r2
   b5b8e:	f7fe be7b 	b.w	b4888 <network_listening>

000b5b92 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b5b92:	2200      	movs	r2, #0
   b5b94:	6840      	ldr	r0, [r0, #4]
   b5b96:	4611      	mov	r1, r2
   b5b98:	f7fe be86 	b.w	b48a8 <network_get_listen_timeout>

000b5b9c <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b5b9c:	6840      	ldr	r0, [r0, #4]
   b5b9e:	2200      	movs	r2, #0
   b5ba0:	f7fe be7a 	b.w	b4898 <network_set_listen_timeout>

000b5ba4 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b5ba4:	6840      	ldr	r0, [r0, #4]
   b5ba6:	2200      	movs	r2, #0
   b5ba8:	f081 0101 	eor.w	r1, r1, #1
   b5bac:	f7fe be64 	b.w	b4878 <network_listen>

000b5bb0 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b5bb0:	2300      	movs	r3, #0
   b5bb2:	6840      	ldr	r0, [r0, #4]
   b5bb4:	461a      	mov	r2, r3
   b5bb6:	4619      	mov	r1, r3
   b5bb8:	f7fe be56 	b.w	b4868 <network_off>

000b5bbc <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5bbc:	2300      	movs	r3, #0
   b5bbe:	6840      	ldr	r0, [r0, #4]
   b5bc0:	461a      	mov	r2, r3
   b5bc2:	4619      	mov	r1, r3
   b5bc4:	f7fe be48 	b.w	b4858 <network_on>

000b5bc8 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b5bc8:	2200      	movs	r2, #0
   b5bca:	6840      	ldr	r0, [r0, #4]
   b5bcc:	4611      	mov	r1, r2
   b5bce:	f7fe be3b 	b.w	b4848 <network_ready>

000b5bd2 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b5bd2:	2200      	movs	r2, #0
   b5bd4:	6840      	ldr	r0, [r0, #4]
   b5bd6:	4611      	mov	r1, r2
   b5bd8:	f7fe be26 	b.w	b4828 <network_connecting>

000b5bdc <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5bdc:	6840      	ldr	r0, [r0, #4]
   b5bde:	2200      	movs	r2, #0
   b5be0:	2102      	movs	r1, #2
   b5be2:	f7fe be29 	b.w	b4838 <network_disconnect>

000b5be6 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b5be6:	2300      	movs	r3, #0
   b5be8:	6840      	ldr	r0, [r0, #4]
   b5bea:	461a      	mov	r2, r3
   b5bec:	f7fe be14 	b.w	b4818 <network_connect>

000b5bf0 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b5bf0:	4b02      	ldr	r3, [pc, #8]	; (b5bfc <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b5bf2:	2203      	movs	r2, #3
   b5bf4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b5bf6:	4a02      	ldr	r2, [pc, #8]	; (b5c00 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b5bf8:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b5bfa:	4770      	bx	lr
   b5bfc:	2003e66c 	.word	0x2003e66c
   b5c00:	000b6af0 	.word	0x000b6af0

000b5c04 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b5c04:	4770      	bx	lr

000b5c06 <_ZN9IPAddressD0Ev>:
   b5c06:	b510      	push	{r4, lr}
   b5c08:	2118      	movs	r1, #24
   b5c0a:	4604      	mov	r4, r0
   b5c0c:	f000 fc05 	bl	b641a <_ZdlPvj>
   b5c10:	4620      	mov	r0, r4
   b5c12:	bd10      	pop	{r4, pc}

000b5c14 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b5c14:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b5c16:	7d03      	ldrb	r3, [r0, #20]
   b5c18:	2b06      	cmp	r3, #6
{
   b5c1a:	b08d      	sub	sp, #52	; 0x34
   b5c1c:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5c1e:	f100 0704 	add.w	r7, r0, #4
   b5c22:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b5c26:	d012      	beq.n	b5c4e <_ZNK9IPAddress7printToER5Print+0x3a>
   b5c28:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b5c2c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b5c30:	220a      	movs	r2, #10
   b5c32:	4630      	mov	r0, r6
   b5c34:	f000 f943 	bl	b5ebe <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b5c38:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b5c3a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b5c3c:	d019      	beq.n	b5c72 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b5c3e:	2c00      	cmp	r4, #0
   b5c40:	d0f4      	beq.n	b5c2c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b5c42:	212e      	movs	r1, #46	; 0x2e
   b5c44:	4630      	mov	r0, r6
   b5c46:	f000 f937 	bl	b5eb8 <_ZN5Print5printEc>
   b5c4a:	4404      	add	r4, r0
   b5c4c:	e7ee      	b.n	b5c2c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5c4e:	232f      	movs	r3, #47	; 0x2f
   b5c50:	466a      	mov	r2, sp
   b5c52:	4639      	mov	r1, r7
   b5c54:	200a      	movs	r0, #10
		buf[0] = 0;
   b5c56:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b5c5a:	f7fe fd21 	bl	b46a0 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b5c5e:	4668      	mov	r0, sp
   b5c60:	f000 fd78 	bl	b6754 <strlen>
   b5c64:	6833      	ldr	r3, [r6, #0]
   b5c66:	4602      	mov	r2, r0
   b5c68:	68db      	ldr	r3, [r3, #12]
   b5c6a:	4669      	mov	r1, sp
   b5c6c:	4630      	mov	r0, r6
   b5c6e:	4798      	blx	r3
   b5c70:	4604      	mov	r4, r0
    }
    return n;
}
   b5c72:	4620      	mov	r0, r4
   b5c74:	b00d      	add	sp, #52	; 0x34
   b5c76:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b5c78 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b5c78:	b510      	push	{r4, lr}
   b5c7a:	4b05      	ldr	r3, [pc, #20]	; (b5c90 <_ZN9IPAddressC1Ev+0x18>)
   b5c7c:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b5c7e:	2211      	movs	r2, #17
   b5c80:	f840 3b04 	str.w	r3, [r0], #4
   b5c84:	2100      	movs	r1, #0
   b5c86:	f000 fd25 	bl	b66d4 <memset>
}
   b5c8a:	4620      	mov	r0, r4
   b5c8c:	bd10      	pop	{r4, pc}
   b5c8e:	bf00      	nop
   b5c90:	000b6b2c 	.word	0x000b6b2c

000b5c94 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b5c94:	4603      	mov	r3, r0
   b5c96:	4a07      	ldr	r2, [pc, #28]	; (b5cb4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b5c98:	b510      	push	{r4, lr}
   b5c9a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b5c9e:	f101 0210 	add.w	r2, r1, #16
   b5ca2:	f851 4b04 	ldr.w	r4, [r1], #4
   b5ca6:	f843 4b04 	str.w	r4, [r3], #4
   b5caa:	4291      	cmp	r1, r2
   b5cac:	d1f9      	bne.n	b5ca2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b5cae:	780a      	ldrb	r2, [r1, #0]
   b5cb0:	701a      	strb	r2, [r3, #0]
}
   b5cb2:	bd10      	pop	{r4, pc}
   b5cb4:	000b6b2c 	.word	0x000b6b2c

000b5cb8 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b5cb8:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b5cba:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b5cbe:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b5cc2:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b5cc6:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b5cca:	2304      	movs	r3, #4
   b5ccc:	6041      	str	r1, [r0, #4]
   b5cce:	7503      	strb	r3, [r0, #20]
}
   b5cd0:	bd10      	pop	{r4, pc}
	...

000b5cd4 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b5cd4:	b507      	push	{r0, r1, r2, lr}
   b5cd6:	4b06      	ldr	r3, [pc, #24]	; (b5cf0 <_ZN9IPAddressC1EPKh+0x1c>)
   b5cd8:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b5cda:	78cb      	ldrb	r3, [r1, #3]
   b5cdc:	9300      	str	r3, [sp, #0]
   b5cde:	788b      	ldrb	r3, [r1, #2]
   b5ce0:	784a      	ldrb	r2, [r1, #1]
   b5ce2:	7809      	ldrb	r1, [r1, #0]
   b5ce4:	f7ff ffe8 	bl	b5cb8 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b5ce8:	b003      	add	sp, #12
   b5cea:	f85d fb04 	ldr.w	pc, [sp], #4
   b5cee:	bf00      	nop
   b5cf0:	000b6b2c 	.word	0x000b6b2c

000b5cf4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b5cf4:	4b01      	ldr	r3, [pc, #4]	; (b5cfc <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b5cf6:	4a02      	ldr	r2, [pc, #8]	; (b5d00 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b5cf8:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b5cfa:	4770      	bx	lr
   b5cfc:	2003e674 	.word	0x2003e674
   b5d00:	000b6b38 	.word	0x000b6b38

000b5d04 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b5d04:	2300      	movs	r3, #0
   b5d06:	6840      	ldr	r0, [r0, #4]
   b5d08:	461a      	mov	r2, r3
   b5d0a:	f7fe bd85 	b.w	b4818 <network_connect>

000b5d0e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b5d0e:	6840      	ldr	r0, [r0, #4]
   b5d10:	2200      	movs	r2, #0
   b5d12:	2102      	movs	r1, #2
   b5d14:	f7fe bd90 	b.w	b4838 <network_disconnect>

000b5d18 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b5d18:	2200      	movs	r2, #0
   b5d1a:	6840      	ldr	r0, [r0, #4]
   b5d1c:	4611      	mov	r1, r2
   b5d1e:	f7fe bd83 	b.w	b4828 <network_connecting>

000b5d22 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b5d22:	2200      	movs	r2, #0
   b5d24:	6840      	ldr	r0, [r0, #4]
   b5d26:	4611      	mov	r1, r2
   b5d28:	f7fe bd8e 	b.w	b4848 <network_ready>

000b5d2c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b5d2c:	2300      	movs	r3, #0
   b5d2e:	6840      	ldr	r0, [r0, #4]
   b5d30:	461a      	mov	r2, r3
   b5d32:	4619      	mov	r1, r3
   b5d34:	f7fe bd90 	b.w	b4858 <network_on>

000b5d38 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b5d38:	2300      	movs	r3, #0
   b5d3a:	6840      	ldr	r0, [r0, #4]
   b5d3c:	461a      	mov	r2, r3
   b5d3e:	4619      	mov	r1, r3
   b5d40:	f7fe bd92 	b.w	b4868 <network_off>

000b5d44 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b5d44:	6840      	ldr	r0, [r0, #4]
   b5d46:	2100      	movs	r1, #0
   b5d48:	f7fe bdb6 	b.w	b48b8 <network_is_on>

000b5d4c <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b5d4c:	6840      	ldr	r0, [r0, #4]
   b5d4e:	2100      	movs	r1, #0
   b5d50:	f7fe bdba 	b.w	b48c8 <network_is_off>

000b5d54 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b5d54:	6840      	ldr	r0, [r0, #4]
   b5d56:	2200      	movs	r2, #0
   b5d58:	f081 0101 	eor.w	r1, r1, #1
   b5d5c:	f7fe bd8c 	b.w	b4878 <network_listen>

000b5d60 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b5d60:	6840      	ldr	r0, [r0, #4]
   b5d62:	2200      	movs	r2, #0
   b5d64:	f7fe bd98 	b.w	b4898 <network_set_listen_timeout>

000b5d68 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b5d68:	2200      	movs	r2, #0
   b5d6a:	6840      	ldr	r0, [r0, #4]
   b5d6c:	4611      	mov	r1, r2
   b5d6e:	f7fe bd9b 	b.w	b48a8 <network_get_listen_timeout>

000b5d72 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b5d72:	2200      	movs	r2, #0
   b5d74:	6840      	ldr	r0, [r0, #4]
   b5d76:	4611      	mov	r1, r2
   b5d78:	f7fe bd86 	b.w	b4888 <network_listening>

000b5d7c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b5d7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b5d80:	b095      	sub	sp, #84	; 0x54
   b5d82:	4614      	mov	r4, r2
   b5d84:	460d      	mov	r5, r1
   b5d86:	4607      	mov	r7, r0
    IPAddress addr;
   b5d88:	f7ff ff76 	bl	b5c78 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b5d8c:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b5d8e:	221c      	movs	r2, #28
   b5d90:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b5d92:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b5d94:	f000 fc9e 	bl	b66d4 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b5d98:	2340      	movs	r3, #64	; 0x40
   b5d9a:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b5d9c:	4620      	mov	r0, r4
   b5d9e:	466b      	mov	r3, sp
   b5da0:	aa0c      	add	r2, sp, #48	; 0x30
   b5da2:	2100      	movs	r1, #0
   b5da4:	f7fe fc8c 	bl	b46c0 <netdb_getaddrinfo>
    if (!r) {
   b5da8:	4604      	mov	r4, r0
   b5daa:	2800      	cmp	r0, #0
   b5dac:	d14b      	bne.n	b5e46 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5dae:	4602      	mov	r2, r0
   b5db0:	2101      	movs	r1, #1
   b5db2:	6868      	ldr	r0, [r5, #4]
   b5db4:	f7fe fd48 	bl	b4848 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5db8:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5dba:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5dbc:	4622      	mov	r2, r4
   b5dbe:	6868      	ldr	r0, [r5, #4]
   b5dc0:	f7fe fd42 	bl	b4848 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5dc4:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5dc6:	4681      	mov	r9, r0
        bool ok = false;
   b5dc8:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5dca:	2e00      	cmp	r6, #0
   b5dcc:	d03b      	beq.n	b5e46 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b5dce:	2900      	cmp	r1, #0
   b5dd0:	d139      	bne.n	b5e46 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b5dd2:	6873      	ldr	r3, [r6, #4]
   b5dd4:	2b02      	cmp	r3, #2
   b5dd6:	d003      	beq.n	b5de0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b5dd8:	2b0a      	cmp	r3, #10
   b5dda:	d011      	beq.n	b5e00 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5ddc:	69f6      	ldr	r6, [r6, #28]
   b5dde:	e7f4      	b.n	b5dca <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b5de0:	f1b8 0f00 	cmp.w	r8, #0
   b5de4:	d0fa      	beq.n	b5ddc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b5de6:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b5de8:	a806      	add	r0, sp, #24
   b5dea:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b5dec:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b5dee:	f7ff ff71 	bl	b5cd4 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b5df2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5df4:	1d3c      	adds	r4, r7, #4
   b5df6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5df8:	682b      	ldr	r3, [r5, #0]
   b5dfa:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5dfc:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b5dfe:	e7ed      	b.n	b5ddc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b5e00:	f1b9 0f00 	cmp.w	r9, #0
   b5e04:	d0ea      	beq.n	b5ddc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b5e06:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b5e08:	2210      	movs	r2, #16
   b5e0a:	a801      	add	r0, sp, #4
   b5e0c:	f000 fc62 	bl	b66d4 <memset>
                    a.v = 6;
   b5e10:	2306      	movs	r3, #6
   b5e12:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b5e16:	ad01      	add	r5, sp, #4
   b5e18:	f104 0308 	add.w	r3, r4, #8
   b5e1c:	3418      	adds	r4, #24
   b5e1e:	6818      	ldr	r0, [r3, #0]
   b5e20:	6859      	ldr	r1, [r3, #4]
   b5e22:	462a      	mov	r2, r5
   b5e24:	c203      	stmia	r2!, {r0, r1}
   b5e26:	3308      	adds	r3, #8
   b5e28:	42a3      	cmp	r3, r4
   b5e2a:	4615      	mov	r5, r2
   b5e2c:	d1f7      	bne.n	b5e1e <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b5e2e:	a901      	add	r1, sp, #4
   b5e30:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b5e32:	ad07      	add	r5, sp, #28
   b5e34:	f7ff ff2e 	bl	b5c94 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b5e38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5e3a:	1d3c      	adds	r4, r7, #4
   b5e3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5e3e:	682b      	ldr	r3, [r5, #0]
   b5e40:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5e42:	4649      	mov	r1, r9
   b5e44:	e7ca      	b.n	b5ddc <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b5e46:	9800      	ldr	r0, [sp, #0]
   b5e48:	f7fe fc32 	bl	b46b0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b5e4c:	4638      	mov	r0, r7
   b5e4e:	b015      	add	sp, #84	; 0x54
   b5e50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b5e54 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b5e54:	4b02      	ldr	r3, [pc, #8]	; (b5e60 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b5e56:	4a03      	ldr	r2, [pc, #12]	; (b5e64 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b5e58:	601a      	str	r2, [r3, #0]
   b5e5a:	2200      	movs	r2, #0
   b5e5c:	605a      	str	r2, [r3, #4]

} // spark
   b5e5e:	4770      	bx	lr
   b5e60:	2003e678 	.word	0x2003e678
   b5e64:	000b6b44 	.word	0x000b6b44

000b5e68 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b5e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5e6a:	4606      	mov	r6, r0
   b5e6c:	460d      	mov	r5, r1
  size_t n = 0;
   b5e6e:	188f      	adds	r7, r1, r2
   b5e70:	2400      	movs	r4, #0
  while (size--) {
   b5e72:	42bd      	cmp	r5, r7
   b5e74:	d00c      	beq.n	b5e90 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b5e76:	6833      	ldr	r3, [r6, #0]
   b5e78:	f815 1b01 	ldrb.w	r1, [r5], #1
   b5e7c:	689b      	ldr	r3, [r3, #8]
   b5e7e:	4630      	mov	r0, r6
   b5e80:	4798      	blx	r3
     if (chunk>=0)
   b5e82:	1e03      	subs	r3, r0, #0
   b5e84:	db01      	blt.n	b5e8a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b5e86:	441c      	add	r4, r3
  while (size--) {
   b5e88:	e7f3      	b.n	b5e72 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b5e8a:	2c00      	cmp	r4, #0
   b5e8c:	bf08      	it	eq
   b5e8e:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b5e90:	4620      	mov	r0, r4
   b5e92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5e94 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b5e94:	b513      	push	{r0, r1, r4, lr}
   b5e96:	4604      	mov	r4, r0
    }
   b5e98:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b5e9a:	b159      	cbz	r1, b5eb4 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b5e9c:	9101      	str	r1, [sp, #4]
   b5e9e:	f000 fc59 	bl	b6754 <strlen>
   b5ea2:	6823      	ldr	r3, [r4, #0]
   b5ea4:	9901      	ldr	r1, [sp, #4]
   b5ea6:	68db      	ldr	r3, [r3, #12]
   b5ea8:	4602      	mov	r2, r0
   b5eaa:	4620      	mov	r0, r4
    }
   b5eac:	b002      	add	sp, #8
   b5eae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b5eb2:	4718      	bx	r3
    }
   b5eb4:	b002      	add	sp, #8
   b5eb6:	bd10      	pop	{r4, pc}

000b5eb8 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b5eb8:	6803      	ldr	r3, [r0, #0]
   b5eba:	689b      	ldr	r3, [r3, #8]
   b5ebc:	4718      	bx	r3

000b5ebe <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b5ebe:	b530      	push	{r4, r5, lr}
   b5ec0:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b5ec2:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b5ec4:	2a01      	cmp	r2, #1
  *str = '\0';
   b5ec6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b5eca:	bf98      	it	ls
   b5ecc:	220a      	movls	r2, #10
   b5ece:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b5ed0:	460d      	mov	r5, r1
   b5ed2:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b5ed6:	fb01 5312 	mls	r3, r1, r2, r5
   b5eda:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5ede:	2b09      	cmp	r3, #9
   b5ee0:	bf94      	ite	ls
   b5ee2:	3330      	addls	r3, #48	; 0x30
   b5ee4:	3337      	addhi	r3, #55	; 0x37
   b5ee6:	b2db      	uxtb	r3, r3
  } while(n);
   b5ee8:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5eea:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b5eee:	d9ef      	bls.n	b5ed0 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b5ef0:	4621      	mov	r1, r4
   b5ef2:	f7ff ffcf 	bl	b5e94 <_ZN5Print5writeEPKc>
}
   b5ef6:	b00b      	add	sp, #44	; 0x2c
   b5ef8:	bd30      	pop	{r4, r5, pc}

000b5efa <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   b5efa:	b510      	push	{r4, lr}
   b5efc:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   b5efe:	f7fe fe07 	bl	b4b10 <_ZNSt14_Function_baseD1Ev>
   b5f02:	4620      	mov	r0, r4
   b5f04:	bd10      	pop	{r4, pc}
	...

000b5f08 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b5f08:	4803      	ldr	r0, [pc, #12]	; (b5f18 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   b5f0a:	4a04      	ldr	r2, [pc, #16]	; (b5f1c <_GLOBAL__sub_I_RGB+0x14>)
   b5f0c:	4904      	ldr	r1, [pc, #16]	; (b5f20 <_GLOBAL__sub_I_RGB+0x18>)
   b5f0e:	2300      	movs	r3, #0
   b5f10:	6083      	str	r3, [r0, #8]
   b5f12:	f000 ba7d 	b.w	b6410 <__aeabi_atexit>
   b5f16:	bf00      	nop
   b5f18:	2003e680 	.word	0x2003e680
   b5f1c:	2003e5f8 	.word	0x2003e5f8
   b5f20:	000b5efb 	.word	0x000b5efb

000b5f24 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b5f24:	b510      	push	{r4, lr}
   b5f26:	4604      	mov	r4, r0
{
	free(buffer);
   b5f28:	6800      	ldr	r0, [r0, #0]
   b5f2a:	f7fe fcdd 	bl	b48e8 <free>
}
   b5f2e:	4620      	mov	r0, r4
   b5f30:	bd10      	pop	{r4, pc}

000b5f32 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b5f32:	b510      	push	{r4, lr}
   b5f34:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b5f36:	6800      	ldr	r0, [r0, #0]
   b5f38:	b108      	cbz	r0, b5f3e <_ZN6String10invalidateEv+0xc>
   b5f3a:	f7fe fcd5 	bl	b48e8 <free>
	buffer = NULL;
   b5f3e:	2300      	movs	r3, #0
	capacity = len = 0;
   b5f40:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b5f44:	6023      	str	r3, [r4, #0]
}
   b5f46:	bd10      	pop	{r4, pc}

000b5f48 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b5f48:	b538      	push	{r3, r4, r5, lr}
   b5f4a:	4604      	mov	r4, r0
   b5f4c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b5f4e:	6800      	ldr	r0, [r0, #0]
   b5f50:	3101      	adds	r1, #1
   b5f52:	f7fe fcd1 	bl	b48f8 <realloc>
	if (newbuffer) {
   b5f56:	b110      	cbz	r0, b5f5e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b5f58:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b5f5c:	2001      	movs	r0, #1
	}
	return 0;
}
   b5f5e:	bd38      	pop	{r3, r4, r5, pc}

000b5f60 <_ZN6String7reserveEj>:
{
   b5f60:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b5f62:	6803      	ldr	r3, [r0, #0]
{
   b5f64:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b5f66:	b123      	cbz	r3, b5f72 <_ZN6String7reserveEj+0x12>
   b5f68:	6843      	ldr	r3, [r0, #4]
   b5f6a:	428b      	cmp	r3, r1
   b5f6c:	d301      	bcc.n	b5f72 <_ZN6String7reserveEj+0x12>
   b5f6e:	2001      	movs	r0, #1
}
   b5f70:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b5f72:	4620      	mov	r0, r4
   b5f74:	f7ff ffe8 	bl	b5f48 <_ZN6String12changeBufferEj>
   b5f78:	2800      	cmp	r0, #0
   b5f7a:	d0f9      	beq.n	b5f70 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b5f7c:	68a3      	ldr	r3, [r4, #8]
   b5f7e:	2b00      	cmp	r3, #0
   b5f80:	d1f5      	bne.n	b5f6e <_ZN6String7reserveEj+0xe>
   b5f82:	6822      	ldr	r2, [r4, #0]
   b5f84:	7013      	strb	r3, [r2, #0]
   b5f86:	e7f2      	b.n	b5f6e <_ZN6String7reserveEj+0xe>

000b5f88 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b5f88:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5f8a:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b5f8c:	4611      	mov	r1, r2
   b5f8e:	9201      	str	r2, [sp, #4]
{
   b5f90:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b5f92:	f7ff ffe5 	bl	b5f60 <_ZN6String7reserveEj>
   b5f96:	9a01      	ldr	r2, [sp, #4]
   b5f98:	b928      	cbnz	r0, b5fa6 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b5f9a:	4620      	mov	r0, r4
   b5f9c:	f7ff ffc9 	bl	b5f32 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b5fa0:	4620      	mov	r0, r4
   b5fa2:	b003      	add	sp, #12
   b5fa4:	bd30      	pop	{r4, r5, pc}
	len = length;
   b5fa6:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b5fa8:	4629      	mov	r1, r5
   b5faa:	6820      	ldr	r0, [r4, #0]
   b5fac:	f000 fb6a 	bl	b6684 <memcpy>
	buffer[len] = 0;
   b5fb0:	6822      	ldr	r2, [r4, #0]
   b5fb2:	68a3      	ldr	r3, [r4, #8]
   b5fb4:	2100      	movs	r1, #0
   b5fb6:	54d1      	strb	r1, [r2, r3]
	return *this;
   b5fb8:	e7f2      	b.n	b5fa0 <_ZN6String4copyEPKcj+0x18>

000b5fba <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b5fba:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b5fbc:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b5fbe:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b5fc2:	4604      	mov	r4, r0
	len = 0;
   b5fc4:	6083      	str	r3, [r0, #8]
	flags = 0;
   b5fc6:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b5fc8:	b141      	cbz	r1, b5fdc <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b5fca:	4608      	mov	r0, r1
   b5fcc:	9101      	str	r1, [sp, #4]
   b5fce:	f000 fbc1 	bl	b6754 <strlen>
   b5fd2:	9901      	ldr	r1, [sp, #4]
   b5fd4:	4602      	mov	r2, r0
   b5fd6:	4620      	mov	r0, r4
   b5fd8:	f7ff ffd6 	bl	b5f88 <_ZN6String4copyEPKcj>
}
   b5fdc:	4620      	mov	r0, r4
   b5fde:	b002      	add	sp, #8
   b5fe0:	bd10      	pop	{r4, pc}

000b5fe2 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b5fe2:	b513      	push	{r0, r1, r4, lr}
   b5fe4:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b5fe6:	b159      	cbz	r1, b6000 <_ZN6StringaSEPKc+0x1e>
   b5fe8:	4608      	mov	r0, r1
   b5fea:	9101      	str	r1, [sp, #4]
   b5fec:	f000 fbb2 	bl	b6754 <strlen>
   b5ff0:	9901      	ldr	r1, [sp, #4]
   b5ff2:	4602      	mov	r2, r0
   b5ff4:	4620      	mov	r0, r4
   b5ff6:	f7ff ffc7 	bl	b5f88 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b5ffa:	4620      	mov	r0, r4
   b5ffc:	b002      	add	sp, #8
   b5ffe:	bd10      	pop	{r4, pc}
	else invalidate();
   b6000:	f7ff ff97 	bl	b5f32 <_ZN6String10invalidateEv>
   b6004:	e7f9      	b.n	b5ffa <_ZN6StringaSEPKc+0x18>
	...

000b6008 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   b6008:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b600a:	4b09      	ldr	r3, [pc, #36]	; (b6030 <_GLOBAL__sub_I_System+0x28>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b600c:	4c09      	ldr	r4, [pc, #36]	; (b6034 <_GLOBAL__sub_I_System+0x2c>)
   b600e:	2202      	movs	r2, #2
   b6010:	601a      	str	r2, [r3, #0]
   b6012:	2000      	movs	r0, #0
    SleepResult() {}
   b6014:	4b08      	ldr	r3, [pc, #32]	; (b6038 <_GLOBAL__sub_I_System+0x30>)
   b6016:	60a3      	str	r3, [r4, #8]
              error_(SYSTEM_ERROR_NONE) {
   b6018:	e9c4 0000 	strd	r0, r0, [r4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b601c:	f7fe fbd0 	bl	b47c0 <set_system_mode>
SystemClass System;
   b6020:	4620      	mov	r0, r4
   b6022:	4a06      	ldr	r2, [pc, #24]	; (b603c <_GLOBAL__sub_I_System+0x34>)
   b6024:	4906      	ldr	r1, [pc, #24]	; (b6040 <_GLOBAL__sub_I_System+0x38>)
   b6026:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   b602a:	f000 b9f1 	b.w	b6410 <__aeabi_atexit>
   b602e:	bf00      	nop
   b6030:	2003e69c 	.word	0x2003e69c
   b6034:	2003e690 	.word	0x2003e690
   b6038:	ffff0000 	.word	0xffff0000
   b603c:	2003e5f8 	.word	0x2003e5f8
   b6040:	000b40ab 	.word	0x000b40ab

000b6044 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b6044:	4b02      	ldr	r3, [pc, #8]	; (b6050 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b6046:	681a      	ldr	r2, [r3, #0]
   b6048:	4b02      	ldr	r3, [pc, #8]	; (b6054 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b604a:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b604c:	4770      	bx	lr
   b604e:	bf00      	nop
   b6050:	2003e590 	.word	0x2003e590
   b6054:	2003e6a0 	.word	0x2003e6a0

000b6058 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   b6058:	4770      	bx	lr

000b605a <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b605a:	7441      	strb	r1, [r0, #17]
}
   b605c:	4770      	bx	lr

000b605e <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b605e:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b6060:	7c00      	ldrb	r0, [r0, #16]
   b6062:	f7fe fb65 	bl	b4730 <hal_usart_available_data_for_write>
}
   b6066:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b606a:	bd08      	pop	{r3, pc}

000b606c <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b606c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b606e:	7c00      	ldrb	r0, [r0, #16]
   b6070:	f7fe fb3e 	bl	b46f0 <hal_usart_available>
}
   b6074:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6078:	bd08      	pop	{r3, pc}

000b607a <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b607a:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b607c:	7c00      	ldrb	r0, [r0, #16]
   b607e:	f7fe fb47 	bl	b4710 <hal_usart_peek>
}
   b6082:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6086:	bd08      	pop	{r3, pc}

000b6088 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b6088:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b608a:	7c00      	ldrb	r0, [r0, #16]
   b608c:	f7fe fb38 	bl	b4700 <hal_usart_read>
}
   b6090:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6094:	bd08      	pop	{r3, pc}

000b6096 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b6096:	7c00      	ldrb	r0, [r0, #16]
   b6098:	f7fe bb42 	b.w	b4720 <hal_usart_flush>

000b609c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b609c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b609e:	7c45      	ldrb	r5, [r0, #17]
{
   b60a0:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b60a2:	b12d      	cbz	r5, b60b0 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b60a4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b60a6:	b003      	add	sp, #12
   b60a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b60ac:	f7fe bb18 	b.w	b46e0 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b60b0:	7c00      	ldrb	r0, [r0, #16]
   b60b2:	9101      	str	r1, [sp, #4]
   b60b4:	f7fe fb3c 	bl	b4730 <hal_usart_available_data_for_write>
   b60b8:	2800      	cmp	r0, #0
   b60ba:	9901      	ldr	r1, [sp, #4]
   b60bc:	dcf2      	bgt.n	b60a4 <_ZN11USARTSerial5writeEh+0x8>
}
   b60be:	4628      	mov	r0, r5
   b60c0:	b003      	add	sp, #12
   b60c2:	bd30      	pop	{r4, r5, pc}

000b60c4 <_ZN11USARTSerialD0Ev>:
   b60c4:	b510      	push	{r4, lr}
   b60c6:	2114      	movs	r1, #20
   b60c8:	4604      	mov	r4, r0
   b60ca:	f000 f9a6 	bl	b641a <_ZdlPvj>
   b60ce:	4620      	mov	r0, r4
   b60d0:	bd10      	pop	{r4, pc}
	...

000b60d4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   b60d4:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b60d6:	f04f 0c00 	mov.w	ip, #0
   b60da:	4604      	mov	r4, r0
   b60dc:	4608      	mov	r0, r1
   b60de:	4611      	mov	r1, r2
   b60e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   b60e4:	e9c4 c201 	strd	ip, r2, [r4, #4]
   b60e8:	4a04      	ldr	r2, [pc, #16]	; (b60fc <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   b60ea:	6022      	str	r2, [r4, #0]
  _blocking = true;
   b60ec:	2201      	movs	r2, #1
  _serial = serial;
   b60ee:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b60f0:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   b60f2:	461a      	mov	r2, r3
   b60f4:	f7fe faec 	bl	b46d0 <hal_usart_init>
}
   b60f8:	4620      	mov	r0, r4
   b60fa:	bd10      	pop	{r4, pc}
   b60fc:	000b6b9c 	.word	0x000b6b9c

000b6100 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   b6100:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   b6102:	4c0e      	ldr	r4, [pc, #56]	; (b613c <_Z22__fetch_global_Serial1v+0x3c>)
   b6104:	7821      	ldrb	r1, [r4, #0]
   b6106:	f3bf 8f5b 	dmb	ish
   b610a:	f011 0101 	ands.w	r1, r1, #1
   b610e:	d112      	bne.n	b6136 <_Z22__fetch_global_Serial1v+0x36>
   b6110:	4620      	mov	r0, r4
   b6112:	9101      	str	r1, [sp, #4]
   b6114:	f7fd ffc1 	bl	b409a <__cxa_guard_acquire>
   b6118:	9901      	ldr	r1, [sp, #4]
   b611a:	b160      	cbz	r0, b6136 <_Z22__fetch_global_Serial1v+0x36>
   b611c:	4a08      	ldr	r2, [pc, #32]	; (b6140 <_Z22__fetch_global_Serial1v+0x40>)
   b611e:	4b09      	ldr	r3, [pc, #36]	; (b6144 <_Z22__fetch_global_Serial1v+0x44>)
   b6120:	4809      	ldr	r0, [pc, #36]	; (b6148 <_Z22__fetch_global_Serial1v+0x48>)
   b6122:	f7ff ffd7 	bl	b60d4 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   b6126:	4620      	mov	r0, r4
   b6128:	f7fd ffbc 	bl	b40a4 <__cxa_guard_release>
   b612c:	4a07      	ldr	r2, [pc, #28]	; (b614c <_Z22__fetch_global_Serial1v+0x4c>)
   b612e:	4908      	ldr	r1, [pc, #32]	; (b6150 <_Z22__fetch_global_Serial1v+0x50>)
   b6130:	4805      	ldr	r0, [pc, #20]	; (b6148 <_Z22__fetch_global_Serial1v+0x48>)
   b6132:	f000 f96d 	bl	b6410 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   b6136:	4804      	ldr	r0, [pc, #16]	; (b6148 <_Z22__fetch_global_Serial1v+0x48>)
   b6138:	b002      	add	sp, #8
   b613a:	bd10      	pop	{r4, pc}
   b613c:	2003e6a4 	.word	0x2003e6a4
   b6140:	2003e6a8 	.word	0x2003e6a8
   b6144:	2003e72c 	.word	0x2003e72c
   b6148:	2003e7b0 	.word	0x2003e7b0
   b614c:	2003e5f8 	.word	0x2003e5f8
   b6150:	000b6059 	.word	0x000b6059

000b6154 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b6154:	7441      	strb	r1, [r0, #17]
}
   b6156:	4770      	bx	lr

000b6158 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b6158:	4770      	bx	lr

000b615a <_ZN9USBSerial4readEv>:
{
   b615a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b615c:	2100      	movs	r1, #0
   b615e:	7c00      	ldrb	r0, [r0, #16]
   b6160:	f7fe fb06 	bl	b4770 <HAL_USB_USART_Receive_Data>
}
   b6164:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6168:	bd08      	pop	{r3, pc}

000b616a <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   b616a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b616c:	2101      	movs	r1, #1
   b616e:	7c00      	ldrb	r0, [r0, #16]
   b6170:	f7fe fafe 	bl	b4770 <HAL_USB_USART_Receive_Data>
}
   b6174:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b6178:	bd08      	pop	{r3, pc}

000b617a <_ZN9USBSerial17availableForWriteEv>:
{
   b617a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b617c:	7c00      	ldrb	r0, [r0, #16]
   b617e:	f7fe faef 	bl	b4760 <HAL_USB_USART_Available_Data_For_Write>
}
   b6182:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6186:	bd08      	pop	{r3, pc}

000b6188 <_ZN9USBSerial9availableEv>:
{
   b6188:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b618a:	7c00      	ldrb	r0, [r0, #16]
   b618c:	f7fe fae0 	bl	b4750 <HAL_USB_USART_Available_Data>
}
   b6190:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b6194:	bd08      	pop	{r3, pc}

000b6196 <_ZN9USBSerial5writeEh>:
{
   b6196:	b513      	push	{r0, r1, r4, lr}
   b6198:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b619a:	7c00      	ldrb	r0, [r0, #16]
{
   b619c:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b619e:	f7fe fadf 	bl	b4760 <HAL_USB_USART_Available_Data_For_Write>
   b61a2:	2800      	cmp	r0, #0
   b61a4:	9901      	ldr	r1, [sp, #4]
   b61a6:	dc01      	bgt.n	b61ac <_ZN9USBSerial5writeEh+0x16>
   b61a8:	7c60      	ldrb	r0, [r4, #17]
   b61aa:	b120      	cbz	r0, b61b6 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b61ac:	7c20      	ldrb	r0, [r4, #16]
   b61ae:	f7fe fae7 	bl	b4780 <HAL_USB_USART_Send_Data>
   b61b2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b61b6:	b002      	add	sp, #8
   b61b8:	bd10      	pop	{r4, pc}

000b61ba <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b61ba:	7c00      	ldrb	r0, [r0, #16]
   b61bc:	f7fe bae8 	b.w	b4790 <HAL_USB_USART_Flush_Data>

000b61c0 <_ZN9USBSerialD0Ev>:
   b61c0:	b510      	push	{r4, lr}
   b61c2:	2114      	movs	r1, #20
   b61c4:	4604      	mov	r4, r0
   b61c6:	f000 f928 	bl	b641a <_ZdlPvj>
   b61ca:	4620      	mov	r0, r4
   b61cc:	bd10      	pop	{r4, pc}
	...

000b61d0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b61d0:	b510      	push	{r4, lr}
   b61d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b61d6:	4604      	mov	r4, r0
   b61d8:	4608      	mov	r0, r1
   b61da:	2100      	movs	r1, #0
   b61dc:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b61e0:	4b04      	ldr	r3, [pc, #16]	; (b61f4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b61e2:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b61e4:	2301      	movs	r3, #1
  _serial = serial;
   b61e6:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b61e8:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b61ea:	4611      	mov	r1, r2
   b61ec:	f7fe faa8 	bl	b4740 <HAL_USB_USART_Init>
}
   b61f0:	4620      	mov	r0, r4
   b61f2:	bd10      	pop	{r4, pc}
   b61f4:	000b6bcc 	.word	0x000b6bcc

000b61f8 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   b61f8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   b61fa:	2214      	movs	r2, #20
{
   b61fc:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   b61fe:	2100      	movs	r1, #0
   b6200:	f000 fa68 	bl	b66d4 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   b6204:	4620      	mov	r0, r4
   b6206:	bd10      	pop	{r4, pc}

000b6208 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   b6208:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b620a:	4c10      	ldr	r4, [pc, #64]	; (b624c <_Z16_fetch_usbserialv+0x44>)
{
   b620c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b620e:	a803      	add	r0, sp, #12
   b6210:	f7ff fff2 	bl	b61f8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6214:	7821      	ldrb	r1, [r4, #0]
   b6216:	f3bf 8f5b 	dmb	ish
   b621a:	f011 0101 	ands.w	r1, r1, #1
   b621e:	d111      	bne.n	b6244 <_Z16_fetch_usbserialv+0x3c>
   b6220:	4620      	mov	r0, r4
   b6222:	9101      	str	r1, [sp, #4]
   b6224:	f7fd ff39 	bl	b409a <__cxa_guard_acquire>
   b6228:	9901      	ldr	r1, [sp, #4]
   b622a:	b158      	cbz	r0, b6244 <_Z16_fetch_usbserialv+0x3c>
   b622c:	aa03      	add	r2, sp, #12
   b622e:	4808      	ldr	r0, [pc, #32]	; (b6250 <_Z16_fetch_usbserialv+0x48>)
   b6230:	f7ff ffce 	bl	b61d0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b6234:	4620      	mov	r0, r4
   b6236:	f7fd ff35 	bl	b40a4 <__cxa_guard_release>
   b623a:	4a06      	ldr	r2, [pc, #24]	; (b6254 <_Z16_fetch_usbserialv+0x4c>)
   b623c:	4906      	ldr	r1, [pc, #24]	; (b6258 <_Z16_fetch_usbserialv+0x50>)
   b623e:	4804      	ldr	r0, [pc, #16]	; (b6250 <_Z16_fetch_usbserialv+0x48>)
   b6240:	f000 f8e6 	bl	b6410 <__aeabi_atexit>
	return _usbserial;
}
   b6244:	4802      	ldr	r0, [pc, #8]	; (b6250 <_Z16_fetch_usbserialv+0x48>)
   b6246:	b008      	add	sp, #32
   b6248:	bd10      	pop	{r4, pc}
   b624a:	bf00      	nop
   b624c:	2003e7c4 	.word	0x2003e7c4
   b6250:	2003e7c8 	.word	0x2003e7c8
   b6254:	2003e5f8 	.word	0x2003e5f8
   b6258:	000b6159 	.word	0x000b6159

000b625c <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b625c:	2200      	movs	r2, #0
   b625e:	6840      	ldr	r0, [r0, #4]
   b6260:	4611      	mov	r1, r2
   b6262:	f7fe baf1 	b.w	b4848 <network_ready>

000b6266 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b6266:	2200      	movs	r2, #0
   b6268:	6840      	ldr	r0, [r0, #4]
   b626a:	4611      	mov	r1, r2
   b626c:	f7fe bb0c 	b.w	b4888 <network_listening>

000b6270 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b6270:	2200      	movs	r2, #0
   b6272:	6840      	ldr	r0, [r0, #4]
   b6274:	4611      	mov	r1, r2
   b6276:	f7fe bb17 	b.w	b48a8 <network_get_listen_timeout>

000b627a <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b627a:	6840      	ldr	r0, [r0, #4]
   b627c:	2200      	movs	r2, #0
   b627e:	f7fe bb0b 	b.w	b4898 <network_set_listen_timeout>

000b6282 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b6282:	6840      	ldr	r0, [r0, #4]
   b6284:	2200      	movs	r2, #0
   b6286:	f081 0101 	eor.w	r1, r1, #1
   b628a:	f7fe baf5 	b.w	b4878 <network_listen>

000b628e <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b628e:	2300      	movs	r3, #0
   b6290:	6840      	ldr	r0, [r0, #4]
   b6292:	461a      	mov	r2, r3
   b6294:	4619      	mov	r1, r3
   b6296:	f7fe bae7 	b.w	b4868 <network_off>

000b629a <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b629a:	2300      	movs	r3, #0
   b629c:	6840      	ldr	r0, [r0, #4]
   b629e:	461a      	mov	r2, r3
   b62a0:	4619      	mov	r1, r3
   b62a2:	f7fe bad9 	b.w	b4858 <network_on>

000b62a6 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b62a6:	2200      	movs	r2, #0
   b62a8:	6840      	ldr	r0, [r0, #4]
   b62aa:	4611      	mov	r1, r2
   b62ac:	f7fe babc 	b.w	b4828 <network_connecting>

000b62b0 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b62b0:	6840      	ldr	r0, [r0, #4]
   b62b2:	2200      	movs	r2, #0
   b62b4:	2102      	movs	r1, #2
   b62b6:	f7fe babf 	b.w	b4838 <network_disconnect>

000b62ba <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b62ba:	2300      	movs	r3, #0
   b62bc:	6840      	ldr	r0, [r0, #4]
   b62be:	461a      	mov	r2, r3
   b62c0:	f7fe baaa 	b.w	b4818 <network_connect>

000b62c4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b62c4:	4b02      	ldr	r3, [pc, #8]	; (b62d0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b62c6:	2204      	movs	r2, #4
   b62c8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b62ca:	4a02      	ldr	r2, [pc, #8]	; (b62d4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b62cc:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b62ce:	4770      	bx	lr
   b62d0:	2003e7dc 	.word	0x2003e7dc
   b62d4:	000b6bfc 	.word	0x000b6bfc

000b62d8 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b62d8:	4b01      	ldr	r3, [pc, #4]	; (b62e0 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b62da:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b62dc:	4770      	bx	lr
   b62de:	bf00      	nop
   b62e0:	2003e594 	.word	0x2003e594

000b62e4 <serialEventRun>:
{
   b62e4:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b62e6:	4b0b      	ldr	r3, [pc, #44]	; (b6314 <serialEventRun+0x30>)
   b62e8:	b143      	cbz	r3, b62fc <serialEventRun+0x18>
   b62ea:	f7ff ff8d 	bl	b6208 <_Z16_fetch_usbserialv>
   b62ee:	6803      	ldr	r3, [r0, #0]
   b62f0:	691b      	ldr	r3, [r3, #16]
   b62f2:	4798      	blx	r3
   b62f4:	2800      	cmp	r0, #0
   b62f6:	dd01      	ble.n	b62fc <serialEventRun+0x18>
        serialEvent();
   b62f8:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b62fc:	4b06      	ldr	r3, [pc, #24]	; (b6318 <serialEventRun+0x34>)
   b62fe:	b143      	cbz	r3, b6312 <serialEventRun+0x2e>
   b6300:	f7ff fefe 	bl	b6100 <_Z22__fetch_global_Serial1v>
   b6304:	6803      	ldr	r3, [r0, #0]
   b6306:	691b      	ldr	r3, [r3, #16]
   b6308:	4798      	blx	r3
   b630a:	2800      	cmp	r0, #0
   b630c:	dd01      	ble.n	b6312 <serialEventRun+0x2e>
        serialEvent1();
   b630e:	f3af 8000 	nop.w
}
   b6312:	bd08      	pop	{r3, pc}
	...

000b631c <_post_loop>:
{
   b631c:	b508      	push	{r3, lr}
	serialEventRun();
   b631e:	f7ff ffe1 	bl	b62e4 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b6322:	f7fe f9b5 	bl	b4690 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b6326:	4b01      	ldr	r3, [pc, #4]	; (b632c <_post_loop+0x10>)
   b6328:	6018      	str	r0, [r3, #0]
}
   b632a:	bd08      	pop	{r3, pc}
   b632c:	2003e7ec 	.word	0x2003e7ec

000b6330 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b6330:	4805      	ldr	r0, [pc, #20]	; (b6348 <_Z33system_initialize_user_backup_ramv+0x18>)
   b6332:	4a06      	ldr	r2, [pc, #24]	; (b634c <_Z33system_initialize_user_backup_ramv+0x1c>)
   b6334:	4906      	ldr	r1, [pc, #24]	; (b6350 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b6336:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b6338:	1a12      	subs	r2, r2, r0
   b633a:	f000 f9a3 	bl	b6684 <memcpy>
    __backup_sram_signature = signature;
   b633e:	4b05      	ldr	r3, [pc, #20]	; (b6354 <_Z33system_initialize_user_backup_ramv+0x24>)
   b6340:	4a05      	ldr	r2, [pc, #20]	; (b6358 <_Z33system_initialize_user_backup_ramv+0x28>)
   b6342:	601a      	str	r2, [r3, #0]
}
   b6344:	bd08      	pop	{r3, pc}
   b6346:	bf00      	nop
   b6348:	2003f400 	.word	0x2003f400
   b634c:	2003f404 	.word	0x2003f404
   b6350:	000b6dc0 	.word	0x000b6dc0
   b6354:	2003f400 	.word	0x2003f400
   b6358:	9a271c1e 	.word	0x9a271c1e

000b635c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b635c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b635e:	2300      	movs	r3, #0
   b6360:	9300      	str	r3, [sp, #0]
   b6362:	461a      	mov	r2, r3
   b6364:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b6368:	f7fe fa44 	bl	b47f4 <system_ctrl_set_result>
}
   b636c:	b003      	add	sp, #12
   b636e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b6374 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b6374:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b6376:	8843      	ldrh	r3, [r0, #2]
   b6378:	2b0a      	cmp	r3, #10
   b637a:	d008      	beq.n	b638e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b637c:	2b50      	cmp	r3, #80	; 0x50
   b637e:	d10b      	bne.n	b6398 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b6380:	4b09      	ldr	r3, [pc, #36]	; (b63a8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b6382:	681b      	ldr	r3, [r3, #0]
   b6384:	b14b      	cbz	r3, b639a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b6386:	b003      	add	sp, #12
   b6388:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b638c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b638e:	f7ff ffe5 	bl	b635c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b6392:	b003      	add	sp, #12
   b6394:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b6398:	2300      	movs	r3, #0
   b639a:	9300      	str	r3, [sp, #0]
   b639c:	461a      	mov	r2, r3
   b639e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b63a2:	f7fe fa27 	bl	b47f4 <system_ctrl_set_result>
}
   b63a6:	e7f4      	b.n	b6392 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b63a8:	2003e7e8 	.word	0x2003e7e8

000b63ac <module_user_init_hook>:
{
   b63ac:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b63ae:	4812      	ldr	r0, [pc, #72]	; (b63f8 <module_user_init_hook+0x4c>)
   b63b0:	2100      	movs	r1, #0
   b63b2:	f7fe fab9 	bl	b4928 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b63b6:	4b11      	ldr	r3, [pc, #68]	; (b63fc <module_user_init_hook+0x50>)
   b63b8:	681a      	ldr	r2, [r3, #0]
   b63ba:	4b11      	ldr	r3, [pc, #68]	; (b6400 <module_user_init_hook+0x54>)
   b63bc:	429a      	cmp	r2, r3
   b63be:	4b11      	ldr	r3, [pc, #68]	; (b6404 <module_user_init_hook+0x58>)
   b63c0:	bf0c      	ite	eq
   b63c2:	2201      	moveq	r2, #1
   b63c4:	2200      	movne	r2, #0
   b63c6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b63c8:	d001      	beq.n	b63ce <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b63ca:	f7ff ffb1 	bl	b6330 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b63ce:	f7fe f94f 	bl	b4670 <HAL_RNG_GetRandomNumber>
   b63d2:	4604      	mov	r4, r0
    srand(seed);
   b63d4:	f000 f986 	bl	b66e4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b63d8:	4b0b      	ldr	r3, [pc, #44]	; (b6408 <module_user_init_hook+0x5c>)
   b63da:	b113      	cbz	r3, b63e2 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b63dc:	4620      	mov	r0, r4
   b63de:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b63e2:	2100      	movs	r1, #0
   b63e4:	4808      	ldr	r0, [pc, #32]	; (b6408 <module_user_init_hook+0x5c>)
   b63e6:	f7fe fa0f 	bl	b4808 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b63ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b63ee:	4807      	ldr	r0, [pc, #28]	; (b640c <module_user_init_hook+0x60>)
   b63f0:	2100      	movs	r1, #0
   b63f2:	f7fe b9f5 	b.w	b47e0 <system_ctrl_set_app_request_handler>
   b63f6:	bf00      	nop
   b63f8:	000b62d9 	.word	0x000b62d9
   b63fc:	2003f400 	.word	0x2003f400
   b6400:	9a271c1e 	.word	0x9a271c1e
   b6404:	2003e7e4 	.word	0x2003e7e4
   b6408:	00000000 	.word	0x00000000
   b640c:	000b6375 	.word	0x000b6375

000b6410 <__aeabi_atexit>:
   b6410:	460b      	mov	r3, r1
   b6412:	4601      	mov	r1, r0
   b6414:	4618      	mov	r0, r3
   b6416:	f000 b917 	b.w	b6648 <__cxa_atexit>

000b641a <_ZdlPvj>:
   b641a:	f7fd be3c 	b.w	b4096 <_ZdlPv>

000b641e <_ZSt25__throw_bad_function_callv>:
   b641e:	b508      	push	{r3, lr}
   b6420:	f7fe fa72 	bl	b4908 <abort>

000b6424 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   b6424:	4901      	ldr	r1, [pc, #4]	; (b642c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   b6426:	f000 b8f9 	b.w	b661c <_ZNKSt9type_infoeqERKS_>
   b642a:	bf00      	nop
   b642c:	000b6c48 	.word	0x000b6c48

000b6430 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   b6430:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   b6432:	2400      	movs	r4, #0
   b6434:	2310      	movs	r3, #16
   b6436:	e9cd 3402 	strd	r3, r4, [sp, #8]
   b643a:	6803      	ldr	r3, [r0, #0]
   b643c:	4615      	mov	r5, r2
   b643e:	699e      	ldr	r6, [r3, #24]
   b6440:	6812      	ldr	r2, [r2, #0]
   b6442:	466b      	mov	r3, sp
   b6444:	e9cd 4400 	strd	r4, r4, [sp]
   b6448:	47b0      	blx	r6
   b644a:	f89d 3004 	ldrb.w	r3, [sp, #4]
   b644e:	f003 0306 	and.w	r3, r3, #6
   b6452:	2b06      	cmp	r3, #6
   b6454:	bf03      	ittte	eq
   b6456:	9b00      	ldreq	r3, [sp, #0]
   b6458:	602b      	streq	r3, [r5, #0]
   b645a:	2001      	moveq	r0, #1
   b645c:	4620      	movne	r0, r4
   b645e:	b004      	add	sp, #16
   b6460:	bd70      	pop	{r4, r5, r6, pc}

000b6462 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   b6462:	9800      	ldr	r0, [sp, #0]
   b6464:	4290      	cmp	r0, r2
   b6466:	bf14      	ite	ne
   b6468:	2001      	movne	r0, #1
   b646a:	2006      	moveq	r0, #6
   b646c:	4770      	bx	lr
	...

000b6470 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   b6470:	b510      	push	{r4, lr}
   b6472:	4b03      	ldr	r3, [pc, #12]	; (b6480 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   b6474:	6003      	str	r3, [r0, #0]
   b6476:	4604      	mov	r4, r0
   b6478:	f000 f8cd 	bl	b6616 <_ZNSt9type_infoD1Ev>
   b647c:	4620      	mov	r0, r4
   b647e:	bd10      	pop	{r4, pc}
   b6480:	000b6c88 	.word	0x000b6c88

000b6484 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   b6484:	b510      	push	{r4, lr}
   b6486:	4604      	mov	r4, r0
   b6488:	f7ff fff2 	bl	b6470 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b648c:	4620      	mov	r0, r4
   b648e:	2108      	movs	r1, #8
   b6490:	f7ff ffc3 	bl	b641a <_ZdlPvj>
   b6494:	4620      	mov	r0, r4
   b6496:	bd10      	pop	{r4, pc}

000b6498 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   b6498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b649c:	461f      	mov	r7, r3
   b649e:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   b64a2:	f8dd 8018 	ldr.w	r8, [sp, #24]
   b64a6:	4598      	cmp	r8, r3
   b64a8:	4606      	mov	r6, r0
   b64aa:	4615      	mov	r5, r2
   b64ac:	d107      	bne.n	b64be <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b64ae:	9907      	ldr	r1, [sp, #28]
   b64b0:	f000 f8b4 	bl	b661c <_ZNKSt9type_infoeqERKS_>
   b64b4:	b118      	cbz	r0, b64be <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   b64b6:	7165      	strb	r5, [r4, #5]
   b64b8:	2000      	movs	r0, #0
   b64ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   b64be:	4639      	mov	r1, r7
   b64c0:	4630      	mov	r0, r6
   b64c2:	f000 f8ab 	bl	b661c <_ZNKSt9type_infoeqERKS_>
   b64c6:	2800      	cmp	r0, #0
   b64c8:	d0f6      	beq.n	b64b8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   b64ca:	2301      	movs	r3, #1
   b64cc:	f8c4 8000 	str.w	r8, [r4]
   b64d0:	7125      	strb	r5, [r4, #4]
   b64d2:	71a3      	strb	r3, [r4, #6]
   b64d4:	e7f0      	b.n	b64b8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000b64d6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   b64d6:	b538      	push	{r3, r4, r5, lr}
   b64d8:	4615      	mov	r5, r2
   b64da:	461c      	mov	r4, r3
   b64dc:	f000 f89e 	bl	b661c <_ZNKSt9type_infoeqERKS_>
   b64e0:	b120      	cbz	r0, b64ec <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   b64e2:	2308      	movs	r3, #8
   b64e4:	60e3      	str	r3, [r4, #12]
   b64e6:	2306      	movs	r3, #6
   b64e8:	6025      	str	r5, [r4, #0]
   b64ea:	7123      	strb	r3, [r4, #4]
   b64ec:	bd38      	pop	{r3, r4, r5, pc}

000b64ee <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   b64ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
   b64f0:	4605      	mov	r5, r0
   b64f2:	460c      	mov	r4, r1
   b64f4:	9201      	str	r2, [sp, #4]
   b64f6:	461e      	mov	r6, r3
   b64f8:	f000 f890 	bl	b661c <_ZNKSt9type_infoeqERKS_>
   b64fc:	b950      	cbnz	r0, b6514 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b64fe:	2e03      	cmp	r6, #3
   b6500:	d808      	bhi.n	b6514 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   b6502:	6823      	ldr	r3, [r4, #0]
   b6504:	9a01      	ldr	r2, [sp, #4]
   b6506:	695b      	ldr	r3, [r3, #20]
   b6508:	4629      	mov	r1, r5
   b650a:	4620      	mov	r0, r4
   b650c:	b002      	add	sp, #8
   b650e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   b6512:	4718      	bx	r3
   b6514:	b002      	add	sp, #8
   b6516:	bd70      	pop	{r4, r5, r6, pc}

000b6518 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   b6518:	b510      	push	{r4, lr}
   b651a:	4b03      	ldr	r3, [pc, #12]	; (b6528 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   b651c:	6003      	str	r3, [r0, #0]
   b651e:	4604      	mov	r4, r0
   b6520:	f7ff ffa6 	bl	b6470 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   b6524:	4620      	mov	r0, r4
   b6526:	bd10      	pop	{r4, pc}
   b6528:	000b6ce8 	.word	0x000b6ce8

000b652c <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   b652c:	b510      	push	{r4, lr}
   b652e:	4604      	mov	r4, r0
   b6530:	f7ff fff2 	bl	b6518 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   b6534:	4620      	mov	r0, r4
   b6536:	210c      	movs	r1, #12
   b6538:	f7ff ff6f 	bl	b641a <_ZdlPvj>
   b653c:	4620      	mov	r0, r4
   b653e:	bd10      	pop	{r4, pc}

000b6540 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   b6540:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   b6542:	9f08      	ldr	r7, [sp, #32]
   b6544:	4297      	cmp	r7, r2
   b6546:	4605      	mov	r5, r0
   b6548:	460e      	mov	r6, r1
   b654a:	4614      	mov	r4, r2
   b654c:	d00a      	beq.n	b6564 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   b654e:	68a8      	ldr	r0, [r5, #8]
   b6550:	6802      	ldr	r2, [r0, #0]
   b6552:	9708      	str	r7, [sp, #32]
   b6554:	6a15      	ldr	r5, [r2, #32]
   b6556:	4631      	mov	r1, r6
   b6558:	4622      	mov	r2, r4
   b655a:	46ac      	mov	ip, r5
   b655c:	b003      	add	sp, #12
   b655e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   b6562:	4760      	bx	ip
   b6564:	4619      	mov	r1, r3
   b6566:	9301      	str	r3, [sp, #4]
   b6568:	f000 f858 	bl	b661c <_ZNKSt9type_infoeqERKS_>
   b656c:	9b01      	ldr	r3, [sp, #4]
   b656e:	2800      	cmp	r0, #0
   b6570:	d0ed      	beq.n	b654e <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   b6572:	2006      	movs	r0, #6
   b6574:	b003      	add	sp, #12
   b6576:	bdf0      	pop	{r4, r5, r6, r7, pc}

000b6578 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   b6578:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b657c:	460d      	mov	r5, r1
   b657e:	4619      	mov	r1, r3
   b6580:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   b6584:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   b6588:	4681      	mov	r9, r0
   b658a:	4617      	mov	r7, r2
   b658c:	4698      	mov	r8, r3
   b658e:	f000 f845 	bl	b661c <_ZNKSt9type_infoeqERKS_>
   b6592:	b190      	cbz	r0, b65ba <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   b6594:	2d00      	cmp	r5, #0
   b6596:	6034      	str	r4, [r6, #0]
   b6598:	7137      	strb	r7, [r6, #4]
   b659a:	db09      	blt.n	b65b0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   b659c:	1961      	adds	r1, r4, r5
   b659e:	458a      	cmp	sl, r1
   b65a0:	bf0c      	ite	eq
   b65a2:	2106      	moveq	r1, #6
   b65a4:	2101      	movne	r1, #1
   b65a6:	71b1      	strb	r1, [r6, #6]
   b65a8:	2000      	movs	r0, #0
   b65aa:	b001      	add	sp, #4
   b65ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b65b0:	3502      	adds	r5, #2
   b65b2:	d1f9      	bne.n	b65a8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b65b4:	2301      	movs	r3, #1
   b65b6:	71b3      	strb	r3, [r6, #6]
   b65b8:	e7f6      	b.n	b65a8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b65ba:	4554      	cmp	r4, sl
   b65bc:	d106      	bne.n	b65cc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b65be:	4659      	mov	r1, fp
   b65c0:	4648      	mov	r0, r9
   b65c2:	f000 f82b 	bl	b661c <_ZNKSt9type_infoeqERKS_>
   b65c6:	b108      	cbz	r0, b65cc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   b65c8:	7177      	strb	r7, [r6, #5]
   b65ca:	e7ed      	b.n	b65a8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   b65cc:	f8d9 0008 	ldr.w	r0, [r9, #8]
   b65d0:	6803      	ldr	r3, [r0, #0]
   b65d2:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   b65d6:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   b65da:	69dc      	ldr	r4, [r3, #28]
   b65dc:	463a      	mov	r2, r7
   b65de:	4643      	mov	r3, r8
   b65e0:	4629      	mov	r1, r5
   b65e2:	46a4      	mov	ip, r4
   b65e4:	b001      	add	sp, #4
   b65e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b65ea:	4760      	bx	ip

000b65ec <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   b65ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b65f0:	4607      	mov	r7, r0
   b65f2:	460c      	mov	r4, r1
   b65f4:	4615      	mov	r5, r2
   b65f6:	461e      	mov	r6, r3
   b65f8:	f7ff ff6d 	bl	b64d6 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   b65fc:	b948      	cbnz	r0, b6612 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   b65fe:	68b8      	ldr	r0, [r7, #8]
   b6600:	6803      	ldr	r3, [r0, #0]
   b6602:	699f      	ldr	r7, [r3, #24]
   b6604:	462a      	mov	r2, r5
   b6606:	4633      	mov	r3, r6
   b6608:	4621      	mov	r1, r4
   b660a:	46bc      	mov	ip, r7
   b660c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   b6610:	4760      	bx	ip
   b6612:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000b6616 <_ZNSt9type_infoD1Ev>:
   b6616:	4770      	bx	lr

000b6618 <_ZNKSt9type_info14__is_pointer_pEv>:
   b6618:	2000      	movs	r0, #0
   b661a:	4770      	bx	lr

000b661c <_ZNKSt9type_infoeqERKS_>:
   b661c:	4281      	cmp	r1, r0
   b661e:	b508      	push	{r3, lr}
   b6620:	d00e      	beq.n	b6640 <_ZNKSt9type_infoeqERKS_+0x24>
   b6622:	6840      	ldr	r0, [r0, #4]
   b6624:	7803      	ldrb	r3, [r0, #0]
   b6626:	2b2a      	cmp	r3, #42	; 0x2a
   b6628:	d00c      	beq.n	b6644 <_ZNKSt9type_infoeqERKS_+0x28>
   b662a:	6849      	ldr	r1, [r1, #4]
   b662c:	780b      	ldrb	r3, [r1, #0]
   b662e:	2b2a      	cmp	r3, #42	; 0x2a
   b6630:	bf08      	it	eq
   b6632:	3101      	addeq	r1, #1
   b6634:	f000 f884 	bl	b6740 <strcmp>
   b6638:	fab0 f080 	clz	r0, r0
   b663c:	0940      	lsrs	r0, r0, #5
   b663e:	bd08      	pop	{r3, pc}
   b6640:	2001      	movs	r0, #1
   b6642:	e7fc      	b.n	b663e <_ZNKSt9type_infoeqERKS_+0x22>
   b6644:	2000      	movs	r0, #0
   b6646:	e7fa      	b.n	b663e <_ZNKSt9type_infoeqERKS_+0x22>

000b6648 <__cxa_atexit>:
   b6648:	b510      	push	{r4, lr}
   b664a:	4c05      	ldr	r4, [pc, #20]	; (b6660 <__cxa_atexit+0x18>)
   b664c:	4613      	mov	r3, r2
   b664e:	b12c      	cbz	r4, b665c <__cxa_atexit+0x14>
   b6650:	460a      	mov	r2, r1
   b6652:	4601      	mov	r1, r0
   b6654:	2002      	movs	r0, #2
   b6656:	f3af 8000 	nop.w
   b665a:	bd10      	pop	{r4, pc}
   b665c:	4620      	mov	r0, r4
   b665e:	e7fc      	b.n	b665a <__cxa_atexit+0x12>
   b6660:	00000000 	.word	0x00000000

000b6664 <memcmp>:
   b6664:	b510      	push	{r4, lr}
   b6666:	3901      	subs	r1, #1
   b6668:	4402      	add	r2, r0
   b666a:	4290      	cmp	r0, r2
   b666c:	d101      	bne.n	b6672 <memcmp+0xe>
   b666e:	2000      	movs	r0, #0
   b6670:	e005      	b.n	b667e <memcmp+0x1a>
   b6672:	7803      	ldrb	r3, [r0, #0]
   b6674:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   b6678:	42a3      	cmp	r3, r4
   b667a:	d001      	beq.n	b6680 <memcmp+0x1c>
   b667c:	1b18      	subs	r0, r3, r4
   b667e:	bd10      	pop	{r4, pc}
   b6680:	3001      	adds	r0, #1
   b6682:	e7f2      	b.n	b666a <memcmp+0x6>

000b6684 <memcpy>:
   b6684:	440a      	add	r2, r1
   b6686:	4291      	cmp	r1, r2
   b6688:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b668c:	d100      	bne.n	b6690 <memcpy+0xc>
   b668e:	4770      	bx	lr
   b6690:	b510      	push	{r4, lr}
   b6692:	f811 4b01 	ldrb.w	r4, [r1], #1
   b6696:	f803 4f01 	strb.w	r4, [r3, #1]!
   b669a:	4291      	cmp	r1, r2
   b669c:	d1f9      	bne.n	b6692 <memcpy+0xe>
   b669e:	bd10      	pop	{r4, pc}

000b66a0 <memmove>:
   b66a0:	4288      	cmp	r0, r1
   b66a2:	b510      	push	{r4, lr}
   b66a4:	eb01 0402 	add.w	r4, r1, r2
   b66a8:	d902      	bls.n	b66b0 <memmove+0x10>
   b66aa:	4284      	cmp	r4, r0
   b66ac:	4623      	mov	r3, r4
   b66ae:	d807      	bhi.n	b66c0 <memmove+0x20>
   b66b0:	1e43      	subs	r3, r0, #1
   b66b2:	42a1      	cmp	r1, r4
   b66b4:	d008      	beq.n	b66c8 <memmove+0x28>
   b66b6:	f811 2b01 	ldrb.w	r2, [r1], #1
   b66ba:	f803 2f01 	strb.w	r2, [r3, #1]!
   b66be:	e7f8      	b.n	b66b2 <memmove+0x12>
   b66c0:	4402      	add	r2, r0
   b66c2:	4601      	mov	r1, r0
   b66c4:	428a      	cmp	r2, r1
   b66c6:	d100      	bne.n	b66ca <memmove+0x2a>
   b66c8:	bd10      	pop	{r4, pc}
   b66ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   b66ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
   b66d2:	e7f7      	b.n	b66c4 <memmove+0x24>

000b66d4 <memset>:
   b66d4:	4402      	add	r2, r0
   b66d6:	4603      	mov	r3, r0
   b66d8:	4293      	cmp	r3, r2
   b66da:	d100      	bne.n	b66de <memset+0xa>
   b66dc:	4770      	bx	lr
   b66de:	f803 1b01 	strb.w	r1, [r3], #1
   b66e2:	e7f9      	b.n	b66d8 <memset+0x4>

000b66e4 <srand>:
   b66e4:	b538      	push	{r3, r4, r5, lr}
   b66e6:	4b10      	ldr	r3, [pc, #64]	; (b6728 <srand+0x44>)
   b66e8:	681d      	ldr	r5, [r3, #0]
   b66ea:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b66ec:	4604      	mov	r4, r0
   b66ee:	b9b3      	cbnz	r3, b671e <srand+0x3a>
   b66f0:	2018      	movs	r0, #24
   b66f2:	f7fe f8f1 	bl	b48d8 <malloc>
   b66f6:	4602      	mov	r2, r0
   b66f8:	63a8      	str	r0, [r5, #56]	; 0x38
   b66fa:	b920      	cbnz	r0, b6706 <srand+0x22>
   b66fc:	4b0b      	ldr	r3, [pc, #44]	; (b672c <srand+0x48>)
   b66fe:	480c      	ldr	r0, [pc, #48]	; (b6730 <srand+0x4c>)
   b6700:	2142      	movs	r1, #66	; 0x42
   b6702:	f7fe f909 	bl	b4918 <__assert_func>
   b6706:	490b      	ldr	r1, [pc, #44]	; (b6734 <srand+0x50>)
   b6708:	4b0b      	ldr	r3, [pc, #44]	; (b6738 <srand+0x54>)
   b670a:	e9c0 1300 	strd	r1, r3, [r0]
   b670e:	4b0b      	ldr	r3, [pc, #44]	; (b673c <srand+0x58>)
   b6710:	6083      	str	r3, [r0, #8]
   b6712:	230b      	movs	r3, #11
   b6714:	8183      	strh	r3, [r0, #12]
   b6716:	2100      	movs	r1, #0
   b6718:	2001      	movs	r0, #1
   b671a:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b671e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b6720:	2200      	movs	r2, #0
   b6722:	611c      	str	r4, [r3, #16]
   b6724:	615a      	str	r2, [r3, #20]
   b6726:	bd38      	pop	{r3, r4, r5, pc}
   b6728:	2003e594 	.word	0x2003e594
   b672c:	000b6d21 	.word	0x000b6d21
   b6730:	000b6d38 	.word	0x000b6d38
   b6734:	abcd330e 	.word	0xabcd330e
   b6738:	e66d1234 	.word	0xe66d1234
   b673c:	0005deec 	.word	0x0005deec

000b6740 <strcmp>:
   b6740:	f810 2b01 	ldrb.w	r2, [r0], #1
   b6744:	f811 3b01 	ldrb.w	r3, [r1], #1
   b6748:	2a01      	cmp	r2, #1
   b674a:	bf28      	it	cs
   b674c:	429a      	cmpcs	r2, r3
   b674e:	d0f7      	beq.n	b6740 <strcmp>
   b6750:	1ad0      	subs	r0, r2, r3
   b6752:	4770      	bx	lr

000b6754 <strlen>:
   b6754:	4603      	mov	r3, r0
   b6756:	f813 2b01 	ldrb.w	r2, [r3], #1
   b675a:	2a00      	cmp	r2, #0
   b675c:	d1fb      	bne.n	b6756 <strlen+0x2>
   b675e:	1a18      	subs	r0, r3, r0
   b6760:	3801      	subs	r0, #1
   b6762:	4770      	bx	lr

000b6764 <strnlen>:
   b6764:	b510      	push	{r4, lr}
   b6766:	4602      	mov	r2, r0
   b6768:	4401      	add	r1, r0
   b676a:	428a      	cmp	r2, r1
   b676c:	4613      	mov	r3, r2
   b676e:	d003      	beq.n	b6778 <strnlen+0x14>
   b6770:	781c      	ldrb	r4, [r3, #0]
   b6772:	3201      	adds	r2, #1
   b6774:	2c00      	cmp	r4, #0
   b6776:	d1f8      	bne.n	b676a <strnlen+0x6>
   b6778:	1a18      	subs	r0, r3, r0
   b677a:	bd10      	pop	{r4, pc}

000b677c <dynalib_user>:
   b677c:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b678c:	0000 0000 6154 6c62 7465 6200 3230 3035     ....Tablet.b0250
   b679c:	3137 2d65 3930 6664 342d 3831 2d61 6562     71e-09df-418a-be
   b67ac:	6666 662d 3436 6561 3661 3132 3037 0030     ff-f64aea621700.
   b67bc:	3062 3632 3730 6532 302d 6439 2d66 3134     b026072e-09df-41
   b67cc:	6138 622d 6665 2d66 3666 6134 6165 3236     8a-beff-f64aea62
   b67dc:	3731 3636 6900 736e 6142 7474 7265 4c79     1766.insBatteryL
   b67ec:	7665 6c65 4200 3230 3037 3337 2d45 3930     evel.B027073E-09
   b67fc:	4644 342d 3831 2d41 4542 4646 462d 3436     DF-418A-BEFF-F64
   b680c:	4541 3641 3132 3637 0037 6e69 4373 6e6f     AEA621767.insCon
   b681c:	656e 7463 6f69 006e 3866 3439 3832 6464     nection.f89428dd
   b682c:	302d 6232 2d32 3434 3937 392d 6230 2d61     -02b2-4479-90ba-
   b683c:	3466 6335 3662 6463 6235 3237 6300 6d74     f45cb6cd5b72.ctm
   b684c:	6142 7474 7265 654c 6576 006c 3846 3539     BatterLevel.F895
   b685c:	3832 4444 302d 4232 2d32 3434 3937 392d     28DD-02B2-4479-9
   b686c:	4230 2d41 3446 4335 3642 4443 4235 3337     0BA-F45CB6CD5B73
   b687c:	6300 6d74 6f43 6e6e 6365 6974 6e6f 6300     .ctmConnection.c
   b688c:	3532 3134 3135 2d64 6236 3931 342d 3833     254151d-6b19-438
   b689c:	2d63 3061 3130 352d 3465 3164 6232 3563     c-a001-5e4d12bc5
   b68ac:	3439 0036 6174 6c62 7465 6142 7474 7265     946.tabletBatter
   b68bc:	4c79 7665 6c65 6300 3532 3136 3135 2d64     yLevel.c256151d-
   b68cc:	6236 3931 342d 3833 2d63 3061 3130 352d     6b19-438c-a001-5
   b68dc:	3465 3164 6232 3563 3439 0039 6174 6c62     e4d12bc5949.tabl
   b68ec:	7465 6944 6b73 7053 6361 0065 3243 3535     etDiskSpace.C255
   b68fc:	3531 4431 362d 3142 2d39 3334 4338 412d     151D-6B19-438C-A
   b690c:	3030 2d31 4535 4434 3231 4342 3935 3734     001-5E4D12BC5947
   b691c:	7400 6261 656c 4374 6e6f 656e 7463 6f69     .tabletConnectio
   b692c:	006e 3338 3932 3361 3131 612d 6465 2d64     n.8329a311-aedd-
   b693c:	6634 6566 622d 6130 2d62 6564 3666 6134     4ffe-b0ab-def64a
   b694c:	3939 6234 3335 7300 6965 757a 6572 6c41     994b53.seizureAl
   b695c:	7265 0074 6977 6972 676e 622e 656c 5300     ert.wiring.ble.S
   b696c:	6174 7472 6420 7369 6f63 6576 6972 676e     tart discovering
   b697c:	7320 7265 6976 6563 2e73 5000 6565 2072      services..Peer 
   b698c:	6564 6976 6563 6920 2073 696d 7373 6e69     device is missin
   b699c:	2167 4600 6961 656c 2064 6f74 6120 7070     g!.Failed to app
   b69ac:	6e65 2064 6570 7265 4320 6e65 7274 6c61     end peer Central
   b69bc:	6420 7665 6369 2e65 4300 6e6f 656e 7463      device..Connect
   b69cc:	6465 6220 2079 6543 746e 6172 206c 6564     ed by Central de
   b69dc:	6976 6563 002e 6944 6373 6e6f 656e 7463     vice..Disconnect
   b69ec:	6465 6220 2079 6572 6f6d 6574 6420 7665     ed by remote dev
   b69fc:	6369 2e65 4400 7075 696c 6163 6574 2064     ice..Duplicated 
   b6a0c:	6863 7261 6361 6574 6972 7473 6369 6320     characteristic c
   b6a1c:	6e61 6f6e 2074 6562 6120 6464 6465 002e     annot be added..
   b6a2c:	6146 6c69 6465 7420 206f 7061 6570 646e     Failed to append
   b6a3c:	6c20 636f 6c61 6320 6168 6172 7463 7265      local character
   b6a4c:	7369 6974 2e63 0000                         istic...

000b6a54 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b6a5c:	4945 000b 49a9 000b 4b23 000b 49d3 000b     EI...I..#K...I..
   b6a6c:	4949 000b                                   II..

000b6a70 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b6a78:	4941 000b 49b7 000b 4943 000b 49d9 000b     AI...I..CI...I..
   b6a88:	4969 000b                                   iI..

000b6a8c <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b6a94:	493f 000b 49c5 000b 5305 000b 49df 000b     ?I...I...S...I..
   b6aa4:	4989 000b                                   .I..

000b6aa8 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   b6ab4:	0000 34fb 5f9b 0080 8000 1000 0000 0000     ...4._..........
	...

000b6ac6 <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   b6ac6:	e37b 7427 f87b ac15 49dd 13a9 0000 f572     {.'t{....I....r.

000b6ad6 <_ZN8particle7BleUuid9BASE_UUIDE>:
   b6ad6:	34fb 5f9b 0080 8000 1000 0000 0000 0000     .4._............
	...

000b6ae8 <_ZTVN5spark13EthernetClassE>:
	...
   b6af0:	5be7 000b 5bdd 000b 5bd3 000b 5bc9 000b     .[...[...[...[..
   b6b00:	5bbd 000b 5bb1 000b 5d45 000b 5d4d 000b     .[...[..E]..M]..
   b6b10:	5ba5 000b 5b9d 000b 5b93 000b 5b89 000b     .[...[...[...[..
   b6b20:	5d7d 000b                                   }]..

000b6b24 <_ZTV9IPAddress>:
	...
   b6b2c:	5c15 000b 5c05 000b 5c07 000b 7061 0070     .\...\...\..app.

000b6b3c <_ZTVN5spark12NetworkClassE>:
	...
   b6b44:	5d05 000b 5d0f 000b 5d19 000b 5d23 000b     .]...]...]..#]..
   b6b54:	5d2d 000b 5d39 000b 5d45 000b 5d4d 000b     -]..9]..E]..M]..
   b6b64:	5d55 000b 5d61 000b 5d69 000b 5d73 000b     U]..a]..i]..s]..
   b6b74:	5d7d 000b 5925 252d 2d6d 6425 2554 3a48     }]..%Y-%m-%dT%H:
   b6b84:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000b6b94 <_ZTV11USARTSerial>:
	...
   b6b9c:	6059 000b 60c5 000b 609d 000b 5e69 000b     Y`...`...`..i^..
   b6bac:	606d 000b 6089 000b 607b 000b 6097 000b     m`...`..{`...`..
   b6bbc:	605b 000b 605f 000b                         [`.._`..

000b6bc4 <_ZTV9USBSerial>:
	...
   b6bcc:	6159 000b 61c1 000b 6197 000b 5e69 000b     Ya...a...a..i^..
   b6bdc:	6189 000b 615b 000b 616b 000b 61bb 000b     .a..[a..ka...a..
   b6bec:	617b 000b 6155 000b                         {a..Ua..

000b6bf4 <_ZTVN5spark9WiFiClassE>:
	...
   b6bfc:	62bb 000b 62b1 000b 62a7 000b 625d 000b     .b...b...b..]b..
   b6c0c:	629b 000b 628f 000b 5d45 000b 5d4d 000b     .b...b..E]..M]..
   b6c1c:	6283 000b 627b 000b 6271 000b 6267 000b     .b..{b..qb..gb..
   b6c2c:	5d7d 000b                                   }]..

000b6c30 <_ZTSSt19_Sp_make_shared_tag>:
   b6c30:	7453 3931 535f 5f70 616d 656b 735f 6168     St19_Sp_make_sha
   b6c40:	6572 5f64 6174 0067                         red_tag.

000b6c48 <_ZTISt19_Sp_make_shared_tag>:
   b6c48:	6c88 000b 6c30 000b                         .l..0l..

000b6c50 <_ZTIN10__cxxabiv117__class_type_infoE>:
   b6c50:	6ce8 000b 6c5c 000b 6d0c 000b               .l..\l...m..

000b6c5c <_ZTSN10__cxxabiv117__class_type_infoE>:
   b6c5c:	314e 5f30 635f 7878 6261 7669 3131 5f37     N10__cxxabiv117_
   b6c6c:	635f 616c 7373 745f 7079 5f65 6e69 6f66     _class_type_info
   b6c7c:	0045 0000                                   E...

000b6c80 <_ZTVN10__cxxabiv117__class_type_infoE>:
   b6c80:	0000 0000 6c50 000b 6471 000b 6485 000b     ....Pl..qd...d..
   b6c90:	6619 000b 6619 000b 64ef 000b 6431 000b     .f...f...d..1d..
   b6ca0:	64d7 000b 6499 000b 6463 000b               .d...d..cd..

000b6cac <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   b6cac:	6ce8 000b 6cb8 000b 6c50 000b               .l...l..Pl..

000b6cb8 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   b6cb8:	314e 5f30 635f 7878 6261 7669 3231 5f30     N10__cxxabiv120_
   b6cc8:	735f 5f69 6c63 7361 5f73 7974 6570 695f     _si_class_type_i
   b6cd8:	666e 456f 0000 0000                         nfoE....

000b6ce0 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   b6ce0:	0000 0000 6cac 000b 6519 000b 652d 000b     .....l...e..-e..
   b6cf0:	6619 000b 6619 000b 64ef 000b 6431 000b     .f...f...d..1d..
   b6d00:	65ed 000b 6579 000b 6541 000b               .e..ye..Ae..

000b6d0c <_ZTISt9type_info>:
   b6d0c:	6c88 000b 6d14 000b                         .l...m..

000b6d14 <_ZTSSt9type_info>:
   b6d14:	7453 7439 7079 5f65 6e69 6f66 5200 4545     St9type_info.REE
   b6d24:	544e 6d20 6c61 6f6c 2063 7573 6363 6565     NT malloc succee
   b6d34:	6564 0064 742f 706d 6a2f 6e65 696b 736e     ded./tmp/jenkins
   b6d44:	472d 4343 312d 2d30 6970 6570 696c 656e     -GCC-10-pipeline
   b6d54:	342d 5f38 3032 3032 3131 3432 315f 3036     -48_20201124_160
   b6d64:	3136 3038 3336 2f39 7273 2f63 656e 6c77     6180639/src/newl
   b6d74:	6269 6e2f 7765 696c 2f62 696c 6362 732f     ib/newlib/libc/s
   b6d84:	6474 696c 2f62 6172 646e 632e                tdlib/rand.c.

000b6d91 <link_const_variable_data_end>:
   b6d91:	00          	.byte	0x00
	...

000b6d94 <link_constructors_location>:
   b6d94:	000b4529 	.word	0x000b4529
   b6d98:	000b5b61 	.word	0x000b5b61
   b6d9c:	000b5bf1 	.word	0x000b5bf1
   b6da0:	000b5cf5 	.word	0x000b5cf5
   b6da4:	000b5e55 	.word	0x000b5e55
   b6da8:	000b5f09 	.word	0x000b5f09
   b6dac:	000b6009 	.word	0x000b6009
   b6db0:	000b6045 	.word	0x000b6045
   b6db4:	000b62c5 	.word	0x000b62c5

000b6db8 <link_constructors_end>:
	...
